<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: backbonejs | Nakajijapan]]></title>
  <link href="http://nakajijapan.github.io/blog/categories/backbonejs/atom.xml" rel="self"/>
  <link href="http://nakajijapan.github.io/"/>
  <updated>2014-02-28T21:33:48+09:00</updated>
  <id>http://nakajijapan.github.io/</id>
  <author>
    <name><![CDATA[nakajijapan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSRF Protection for Rails and Backbone.js]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/07/01/csrf-protection/"/>
    <updated>2013-07-01T07:53:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/07/01/csrf-protection</id>
    <content type="html"><![CDATA[<p>欲求不満では内部でBackbone.jsを利用しているのですが、セキュリティ強化のためにCSRF対策を施しました。
Railsを利用しているときはCSRF用のtokenを発行しているのでそれをBackbone.jsで通信するさいに情報を負荷
して送信させるようにしました。</p>

<p>ちなみに以前はModelに<code>toJSON</code>メソッドでtokenを付加させていたのですがPOST,PUTのみの対応だったので
DELETE用にも対応できるよう実装してみた。（<code>Model.destroy</code>時には<code>toJSON()</code>を仲介しない）</p>

<p>```javascript</p>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<h1>Sync</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<p>Backbone._sync = Backbone.sync
Backbone.sync = (method, model, options) &ndash;>
  if method == &lsquo;create&rsquo; || method == &lsquo;update&rsquo; || method == &lsquo;delete&rsquo;</p>

<pre><code>options_csrf =
  headers:
    'X-CSRF-Token': BackboneFrustration.Model.csrf_token()

_.extend(
  options,
  options_csrf
)
</code></pre>

<p>  return Backbone._sync(method, model, options)
```</p>

<p>メソッドをオーバーライドしてHEADERに<code>X−CSRF-Token</code>を付加して親処理に渡す。<code>BackboneFrustration.Model.csrf_token()</code>は
単純にフォームからCSRF用のtokenを取得しているだけです。これでajax通信のときはtokenを無視して処理をするようなその場しのぎな実装をせずになりました。</p>

<p>以下のような処理撲滅です。</p>

<p><code>ruby
protect_from_forgery except: :craete
</code></p>

<p>この修正で問題なく動作しているので適用させました。</p>

<p>ところでRails用のgemで<code>backbone-rails</code>なんてものがありましてそこのコードを
見ていたらだいたい同じことをしていたのであらかじめこれを参考にして勉強すれば良かったと思いました。とほほ。。</p>

<p><a href="https://github.com/codebrew/backbone-rails/blob/master/vendor/assets/javascripts/backbone_rails_sync.js">https://github.com/codebrew/backbone-rails/blob/master/vendor/assets/javascripts/backbone_rails_sync.js</a></p>

<p>とりあえず、これで一安心。</p>

<h2>実際の修正箇所</h2>

<p><a href="https://github.com/nakajijapan/frustrationme_app/pull/25/files">https://github.com/nakajijapan/frustrationme_app/pull/25/files</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bbackbone.js 読書会 第２章]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/06/13/backbone-guidebook03/"/>
    <updated>2013-06-13T10:56:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/06/13/backbone-guidebook03</id>
    <content type="html"><![CDATA[<p>前回の続きです。１章ではBackboneの基礎的な知識を読んでいきましたが、次は実際に使われるオブジェクトの説明。
Backboneで利用される重要な３つのモデルModel, Coolection, Viewの説明（役割・使い方）でした。</p>

<p>概要と話題になったことをメモろうと思います。</p>

<h2>Model</h2>

<p>データを扱う方法を提供するもの。
View側で実際にデータがどう扱われているかは気にしない。 &ndash;> viewとの分離
これがjavascriptで使えちゃう。</p>

<h3>提供するもの</h3>

<ul>
<li>保持</li>
<li>検証</li>
<li>アクセス制御</li>
<li>保存</li>
</ul>


<h3>Validationをどうするか</h3>

<p>サーバサイドでもクライアントサイドでも実装しなくちゃいけなくなるのは大変だよね。って話をした。
場合によりけりだろうけど。そこまでのアクセスを気にしなきゃ。検証はサーバサイドで全て任せて
その結果を画面に表示。は二重管理せずに済むよね。ユーザにリアルタイムに検証結果を表示させたいとき
とかはクライアント側でも利用するよねーという話をした。</p>

<p>ちなみに欲求不満(<a href="http://www.frustration.me">http://www.frustration.me</a>)ではサーバサイドでもチェックできるようクラスを用意して
それを継承して処理が動作するようになっている。</p>

<p>```javascript</p>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<h1>Model</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<p>class BackboneFrustration.Model extends Backbone.Model</p>

<p>  initialize: (attributes, options) &ndash;></p>

<pre><code>@on 'error',   @defaultErrorHandler
@on 'invalid', @defaultErrorHandler
</code></pre>

<p>  defaultErrorHandler: (model, error) &ndash;></p>

<pre><code>if typeof(error) == 'object'
  if error.statusText != ''
    alert 'Intal Server Error'
    console.error error

 else if typeof(error) == 'string'
   if error? or error != ''
     alert error
</code></pre>

<p>```</p>

<h2>Collecation</h2>

<p>複数のモデルを管理するためのオブジェクト。それ自体にデータはない。
Underscoreの配列操作に由来した関数群があるのでそれ使うと便利という話。
each(),pluck(),invoke()等のよく使いそうな便利メソッドの紹介があった。</p>

<h2>View</h2>

<p>BackboneにおけるViewは二つの役割を持っているという話。</p>

<ul>
<li>Viewとして、「適切にDOMツリーを構築する」</li>
<li>Controllerとして、「そのDOMツリーで起ったDOMイベントを処理する」</li>
</ul>


<p>前者でいうと</p>

<ul>
<li>Model,Collectionを利用してデータの操作して、保存を行ったり、新しいViewを構築する</li>
</ul>


<p>後者でいうと</p>

<ul>
<li>DOMのイベントハンドリングはView内でちゃんとやろう</li>
</ul>


<p>なのかなと感じた。</p>

<p>あと、Underscoreのテンプレートエンジンの話が出てきて、また記法覚えるの辛かったのでERBの記法に似た<a href="http://embeddedjs.com/">EJS</a>を利用したいのですが余裕があるのでこちらに移行してみるのありだと思いました。</p>

<h2>Router</h2>

<h2>Sync</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsガイドブック読書会 第１章 続き]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/05/30/backbone-guidebook01/"/>
    <updated>2013-05-30T00:12:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/05/30/backbone-guidebook01</id>
    <content type="html"><![CDATA[<p>第１章の続き</p>

<p>Eventsあたりのところから</p>

<blockquote><p>Eventsが提供しているインタフェースはオブザーバパターンを駆使してオブジェクト間の結合を「疎」に保たせている</p></blockquote>

<p>と記述されている。</p>

<h2>オブザーバパターンとは</h2>

<p>購読者と発行者と呼ばれるオブジェクトが存在する。
発行者が購読者のメソッドを直接呼び出す代わりに、購読者は発行者
のイベントを購読する。イベントが発生したらそれを購読している
オブジェクトに通知される。</p>

<p>発行者はだれが購読してるのか知らずに済む。</p>

<p>イベント駆動開発の技法。</p>

<p>詳細はここが分かりやすい。
<a href="http://www.techscore.com/tech/DesignPattern/Observer.html/">http://www.techscore.com/tech/DesignPattern/Observer.html/</a></p>

<h3>Backbone.jsでいう購読者と発行者</h3>

<p>これを以下のようにして考えるとわかりやすい</p>

<ul>
<li>購読者: View</li>
<li>発行者 : Model</li>
</ul>


<p>Modelはだれが購読してるかしらなくていい、イベントを通知してあげればいいんです。</p>

<p>```</p>

<h1>viewの中で</h1>

<p>var entry = new Entry();
entry.on(&lsquo;change&rsquo;, this.render());
```</p>

<h2>メディエータパターン</h2>

<blockquote><p>複数オブジェクトの間を取り持つ仲介者と鳴るオブジェクトを用意し、オブジェクト間の連動の詳細をその仲介者に持たせる
個々のオブジェクトの独自性を高める</p></blockquote>

<p>内容は理解できたけど、使いどころまだピンときていない。</p>

<p>ここに詳しく記述されていた。
<a href="http://www.techscore.com/tech/DesignPattern/Mediator.html/">http://www.techscore.com/tech/DesignPattern/Mediator.html/</a></p>

<h2>コラムでのまめ知識</h2>

<p>メモリーリークの問題から<code>on() off()</code>ではなくて <code>listenTo() stopListening()</code>を利用するといい
v1.0からはView#remove()内部でstopListening() ViewではlistenToしてるので大丈夫！</p>

<h2>Underscore.js</h2>

<p>便利関数の紹介だった。</p>

<ul>
<li>_.debounce()

<ul>
<li>一定時間イベントが発生しなかったときに処理を実行する</li>
</ul>
</li>
<li>_.throtte()

<ul>
<li>コールバックの実行頻度をさげる</li>
</ul>
</li>
<li>_.delay()

<ul>
<li>処理を遅らせる</li>
</ul>
</li>
<li>_.defer()

<ul>
<li>コールバック関数の中で最後に実行されることを保証する</li>
</ul>
</li>
</ul>


<p>上記二つの関数は今にも使えそうな便利関数だったので導入していきたいな。</p>

<p><a href="http://underscorejs.org/">http://underscorejs.org/</a></p>

<p>見る限り処理を便利＆スマートにしてくれるのでカジュアルにこれだけ導入でもありかもしれない。</p>

<p>さて来週からは第二章ですよ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsガイドブック読書会 第１章 続き]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/05/23/backbone-guidebook00/"/>
    <updated>2013-05-23T00:12:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/05/23/backbone-guidebook00</id>
    <content type="html"><![CDATA[<h2>Backbone.js読書会１日目</h2>

<p>Webも徐々にGUIアプリのような振る舞いが求められていく世の中になってきたし、技術的に可能になってきたと。クライアントでそんな振る舞いをしてくれてるのが現状javascriptです。僕たちはどんどんjavascriiptを利用して多種多様な振る舞いをしていかなければいけないけど、現状のjQueryでばんばん書いていくのにも限界がきてるんじゃないか。そのとき、外国で話題になっていたフレームワークをほそぼそと勉強しはじめ、今や業務にまで導入できることに成功しました。（まだ、いろいろ課題はありますが。。。）</p>

<p>そんなときに、満を持して洋書よりも早く日本の書籍がでてしまったので早速基本に振り返るがてらみんなで知識深めようという目的で読書会はじめました。</p>

<p>「Backbone.js ガイドブック」</p>

<p><a href="http://www.amazon.co.jp/Backbone-js%E3%82%AC%E3%82%A4%E3%83%89%E3%83%96%E3%83%83%E3%82%AF-%E9%AB%98%E6%A9%8B-%E4%BE%91%E4%B9%85/dp/4899773501%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4899773501" target="_blank" title="Backbone.jsガイドブック"><img src="http://ecx.images-amazon.com/images/I/31tI0WaZukL._SL160_.jpg" width="118" height="150" alt="Backbone.jsガイドブック" /></a><br /><a href="http://www.amazon.co.jp/Backbone-js%E3%82%AC%E3%82%A4%E3%83%89%E3%83%96%E3%83%83%E3%82%AF-%E9%AB%98%E6%A9%8B-%E4%BE%91%E4%B9%85/dp/4899773501%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4899773501" target="_blank">Backbone.jsガイドブック</a></p>

<p>はじめは概要なのですらっと。</p>

<p>一つ話題になったのは、基本は「.extend」を利用してインスタンス用のプロパティを作成していくのが基本だけど、クラス用のプロパティってどこで利用するケースがあるかってこと。</p>

<p>```js
var Parent = Backbone.View.extend(
  {</p>

<pre><code>instance_p: 1,
instance_m: function(){ return 'instance_m';}
</code></pre>

<p>  },
  {</p>

<pre><code>class_p: 2,
class_m: function(){ return 'instance_m';}
</code></pre>

<p>  }</p>

<p>);
```</p>

<p>サンプルみただけだとふーんですよね。僕もいまのところふーんです。</p>

<p>ケースとしてはクラスプロパティにテンプレートをぶち込んでおくのがよさげなのかしらね。例えば、Viewが管理している内部でモーダルを管理しているとき。モーダルは基本一つなのでクラスプロパティであらかじめ作成しておけば使い回しがきくと。$(&lsquo;modal&rsquo;)とかで毎回DOMを操作しなくて済む。</p>

<p>ふと思った訳です。</p>

<p>```js
var Parent = Backbone.View.extend(
  {</p>

<pre><code>instance_p: 1,
instance_m: function(){ return 'instance_m';}
</code></pre>

<p>  },
  {</p>

<pre><code>modal_template: null,
class_m: function(){ this.modal_template = $('#modal').html()}
</code></pre>

<p>  }</p>

<p>);
```</p>

<p>こんなかんじ。</p>

<p>あと、なんだかんだ実装しながら確認してたら時間かかってしまったので１章の半分くらいで終了。バタリ。</p>

<p>さ。来週もすすめていきますよ。</p>

<h2>追記</h2>

<p>洋書は今月末にでるようだ。</p>

<p><a href="http://www.amazon.co.jp/Developing-Backbone-js-Applications-Addy-Osmani/dp/1449328253%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1449328253" target="_blank" title="Developing Backbone.js Applications"><img src="http://ecx.images-amazon.com/images/I/5171nmxXQdL._SL160_.jpg" width="114" height="150" alt="Developing Backbone.js Applications" /></a><br /><a href="http://www.amazon.co.jp/Developing-Backbone-js-Applications-Addy-Osmani/dp/1449328253%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1449328253" target="_blank">Developing Backbone.js Applications</a></p>
]]></content>
  </entry>
  
</feed>
