<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: Swift | Nakajijapan]]></title>
  <link href="http://nakajijapan.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://nakajijapan.github.io/"/>
  <updated>2014-12-15T00:01:27+09:00</updated>
  <id>http://nakajijapan.github.io/</id>
  <author>
    <name><![CDATA[nakajijapan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[About Core Foudation in Working with Cocoa Data Types]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/07/26/core-foudation-for-swift/"/>
    <updated>2014-07-26T16:44:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/07/26/core-foudation-for-swift</id>
    <content type="html"><![CDATA[<p>AV Foundation関連のプログラムをSwiftで書き直しているときに、単純に変換できないところがあったので
一旦でキュメントに振り返って読み直してみました。</p>

<p>参照先はAppleの<a href="https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/BuildingCocoaApps/WorkingWithCocoaDataTypes.html">公式ドキュメント</a>に記載してあるのを自分なりに翻訳してみました。</p>

<h1>Core Foundation</h1>

<p><code>Core Foundation</code>型は自動的に<code>full-fledged</code>なSwiftクラスとしてインポートされる。
メモリ管理が提供されるときはいつでも、Swiftは自動的に<code>Core Foundation objects</code>のメモリを管理し、
自身をインスタンス化した<code>Core Foundation objects</code>をインクルードして管理します。Swift内で、
あなたは<code>toll-free bridged</code>な<code>Foundation</code>と<code>Core Foundation</code>の両方を相互に変換できる。
あなたはブリッジしている<code>Foundation</code>型をキャストするならSwiftの標準ライブラリに対して<code>toll-free bridged</code>な
<code>Core Foundation</code>型をブリッジすることができる</p>

<ul>
<li>toll-free bridged

<ul>
<li>オブジェクトを変換することなくキャストすることで相互変換可能な仕組みのことを指すらしいです</li>
</ul>
</li>
</ul>


<h2>Remapped Types</h2>

<p>Swiftは<code>Core Foundation</code>型をインポートするとき、コンパイラはそれらの型名を再配置する
コンパイラは各型の最後に記述されている<code>Ref</code>を削除する、なぜならSwiftクラスのすべては参照型、
それゆえにサフィックスはいらない</p>

<p><code>CFTypeRef</code>は<code>AnyObject</code>に再配置されるよ。<code>CFTypeRef</code>をつかうときは<code>AnyObject</code>を利用すべきだ！</p>

<h2>Memory Managed Objects</h2>

<p>APIから返却された<code>Core Foundation objects</code>はSwiftで自動的にメモリ管理される。
CFRetain、CFRelease、CFAutoreleaseを自動で呼び出す必要はない。独自のCの関数から<code>Core Foundation objects</code>
を返すのなら、それらを<code>CF_RETURNS_RETAINED</code>と<code>CF_RETURNS_NOT_RETAINED</code>のいずれかを使ってアノテートする。
上記のAPIを呼び出すSwiftコードをコンパイルするとき、コンパイラは自動的ににメモリ管理用の呼び出しを行う。
<code>Core Foundation objects</code>を返さないAPIを利用するときは、このセクションをスキップしてね。
でないのなら<code>unmanaged Core Foundation objects</code>の操作について学んでね。</p>

<h2>Unmanaged Objects</h2>

<p>Swiftが提供されているAPIをimportするときに、コンパイラは自動的に返却された<code>Core Foundation Objects</code>をメモリ管理できないよ
Swiftは<code>Unmanaged&lt;T&gt;</code>構造体内でこれらの返却された<code>Core Foundation objects</code>を内包する
間接的に返却された<code>Core Foundation objects</code>のすべては管理されい。例えば以下のように宣言できる</p>

<h3>Objective-C</h3>

<p><code>
CFStringRef StringByAddingTwoStrings(CFStringRef string1, CFStringRef string2)
</code></p>

<h3>Swift</h3>

<p><code>
func StringByAddingTwoStrings(CFString!, CFString!) -&gt; Unmanaged&lt;CFString&gt;!
</code></p>

<p>非管理のオブジェクトを受け取るとき、あなたは直接メモり管理されたオブジェクトに変換すべきです、非管理のオブジェクトを受け取る前に。
この方法でSwiftは手動でメモリ管理を行うことができる。
Unmanaged<T>構造体は非管理オブジェクトをメモリ管理されたobjectに<code>takeUnretainedValue()</code>に変換したり、<code>takeRetainedValue()</code>に変換したりと２つの方法を提供する。
あなたは自分が呼びだだしているAPIがunretained objectやretained objectを返すかどうかを基本に利用するためにどちらかのメソッドを選べる。</p>

<h3>Swift</h3>

<p><code>
let memoryManagedResult = StringByAddingTwoStrings(str1, str2).takeUnretainedValue()
// memoryManagedResult is a memory managed CFString
</code></p>

<p>非管理のオブジェクトであるretain() release() autorelease() メソッドを呼び出すことができます、しかしこのアプローチは推奨されないよ</p>

<h2>まとめ</h2>

<p>どうもSwiftでもARC非対応のものがあるので<code>Unmanaged&lt;T&gt;</code>構造体を利用して<code>takeUnretainedValue()</code>、<code>takeRetainedValue()</code>経由でメモリ管理されたオブジェクトにしなければならないようだ。
とはいえまだ完全理解というわけではないので引き続き調べていこうと思う。</p>

<h2>参考文献</h2>

<div style="margin-bottom:5px;"><a href="http://www.amazon.co.jp/%E8%A9%B3%E8%A7%A3-Objective-C-2-0-%E7%AC%AC3%E7%89%88-%E8%8D%BB%E5%8E%9F/dp/4797368276%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797368276" target="_blank" title="詳解 Objective-C 2.0 第3版"><img src="http://ecx.images-amazon.com/images/I/41VdFg9YqsL._SL160_.jpg" width="115" height="150" alt="詳解 Objective-C 2.0 第3版" style="border:0;border-radius:0" /></a></div>


<p><a href="http://www.amazon.co.jp/%E8%A9%B3%E8%A7%A3-Objective-C-2-0-%E7%AC%AC3%E7%89%88-%E8%8D%BB%E5%8E%9F/dp/4797368276%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797368276" target="_blank">詳解 Objective-C 2.0 第3版</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift勉強会を開催して話してきました。]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/07/19/swift-shibuya-01/"/>
    <updated>2014-07-19T20:08:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/07/19/swift-shibuya-01</id>
    <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="a9200910f163013106da6eb14261a8ef" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>先日、小さい規模ながらSwfit勉強会を開催しました。</p>

<p><a href="http://atnd.org/events/52641">Swift勉強会 hosted by @nakajijapan from ペパボ</a></p>

<p>そんななか、自分も「Swiftに慣れるまで行ったこと」を発表しました。</p>

<p>ざっくり言うSwiftに慣れるのに以下のことをしてみた献じたことを話しました。</p>

<ol>
<li>公式ドキュメント（を読んだ後に）</li>
<li>サンプルアプリをTableViewControllerベースで作成してみたこと</li>
<li>自分のプラグイン(NKJMovieComposer)をSwiftで書き換えてみたこと</li>
<li>気分高ぶってMac OS Xも作成してみたこと</li>
</ol>


<p>詳しくはスライドをご覧ください。</p>

<p>Swiftが出たときにSan Franciscoで一心不乱にサンプルアプリプログラム書いてブログ上げようかと思ったけど
いろんな人が既にブログに上げていたのでただただGitHubにあげるだけでした。そんなんか
いろいろ勉強していくうちにMacアプリもつくれんじゃねーかwで脳内麻痺して書籍を購入してSwiftで作成
してみました。</p>

<p><img src="/images/posts/2014-07-19-01.png" alt="swift" /></p>

<p>起動しとけば単純に画像を定期的に保存するアプリです。
（そのうちに１日で保存した画像をGifアニメのような動画にしてソーシャルにアップする機能作ろうかと計画中）
ある程度できたらGeHubにアップ仕様と思います。</p>

<p>ちなみにこちらの書籍を購入しました。</p>

<p><a href="http://frustration.me/items/5171">
  <img src="http://ecx.images-amazon.com/images/I/41bAmGQ-ljL.jpg" />
</a></p>

<p>Macアプリ、知識が溜まって来たらまた記事にします。</p>

<p>とにかく、Swift勉強会が無事終えてよかったです。
参加してくれたみなさん、そして発表してくれた、<a href="http://twitter.com/misyobun">@misyobun</a> <a href="http://twitter.com/hypermkt">@hypermkt</a> <a href="http://twitter.com/kurotaky">@kurotaky</a> ありがとうございました！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift勉強会をした]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/06/10/study-swift-01/"/>
    <updated>2014-06-10T18:25:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/06/10/study-swift-01</id>
    <content type="html"><![CDATA[<p>社内で早速Swift勉強会を開きました。
流れとしては、あのときの動画（クレイグがSwiftを発表したところ）をみんなで１０分程鑑賞してテンションあげてから公式のドキュメントを見ながら、みんなでぺちゃくちゃ話す会をしました。</p>

<h2>はじめに</h2>

<p>以下の動画をみてまずざっくりどんなものか概要をつかむ</p>

<p><a href="https://developer.apple.com/videos/wwdc/2014/?id=101">https://developer.apple.com/videos/wwdc/2014/?id=101</a></p>

<h1>A Swift Tour</h1>

<h2>About Swift</h2>

<ul>
<li>Objective-C without the C</li>
<li>iOSとOS Xで開発するための開発言語</li>
<li>Ccoa and Cocoa Touch</li>
<li>Build with LLVM compiler</li>
<li>Optimizer and Autovectorizer</li>
<li>ARC memory management</li>
<li>Same runtime as Objective-C</li>
</ul>


<h2>Simple Value</h2>

<ul>
<li><code>let</code>,<code>var</code>で宣言</li>
<li><code>let</code>は定数、<code>var</code>は変数</li>
</ul>


<p><code>
var foo = 33
let foo = 33
</code></p>

<ul>
<li>格納する値が明白であれば自動できに方が決定される</li>
<li>十分でなければ明示的に指定することも可能</li>
</ul>


<p><code>
let total = 30
let total = 30.0
let total:Double = 0
</code></p>

<ul>
<li>初期化に以下のような宣言ができる</li>
</ul>


<p>```
let emptyArray = String<a href=""></a>
let emptyDictionary = Dictionary&lt;String, Float>()</p>

<p>```</p>

<ul>
<li>単純な初期化は<code>[] and [:]</code>で省略できる</li>
</ul>


<p>```</p>

<p>let emptyArray = []
let emptyDictionary = [:]
```</p>

<h3>Control Flow</h3>

<ul>
<li>どこかでみたような記述でif,switch,for-in,for,while,do-whileできるよ</li>
<li><code>..</code>で数値の範囲を決定できることができる</li>
</ul>


<p>```
var total = 0;
for i in 0..10 {</p>

<pre><code>total += 2
</code></pre>

<p>}</p>

<p>total
```</p>

<h2>Functions and Closures</h2>

<ul>
<li>考え方は他の言語と同じ。引数があって返り値がある</li>
</ul>


<p>```
func greet(name: String, day: String) &ndash;> String {
  return &ldquo;Hello (name), today is (day)&rdquo;
}</p>

<p>greet(&ldquo;Bob&rdquo;, &ldquo;Tuesday&rdquo;)
```</p>

<ul>
<li>Touple

<ul>
<li>複数の返り値を返す</li>
</ul>
</li>
</ul>


<p>```
func getGasPrices() &ndash;> (Double, Double, Double) {</p>

<pre><code>return (3.59, 3.69, 3.79)
</code></pre>

<p>}
getGasPrices()</p>

<p>```</p>

<ul>
<li>引数を任意で指定することもできます</li>
</ul>


<p>```
func sumOf(numbers:Int&hellip;) &ndash;> Int
{</p>

<pre><code>var sum = 0
for number in numbers {
    sum += number
}

return sum
</code></pre>

<p>}</p>

<p>sumOf()</p>

<p>sumOf(10, 20, 33)
```</p>

<ul>
<li><code>{}</code>でクロージャを記述</li>
</ul>


<p>```
numbers.map({</p>

<pre><code>(number: Int) -&gt; Int in
let result = 3 * number
return result
</code></pre>

<p>})
```</p>

<p>以下の記述も同じ意味</p>

<p><code>
numbers.map({ number in 3 * number })
</code></p>

<h2>Objects and Classes</h2>

<ul>
<li><code>class</code>で定義</li>
<li><code>init()</code>はコンストラクタ</li>
</ul>


<p>継承は</p>

<p>```
class Squre : NamedShape {</p>

<p>}
```</p>

<p>overrideはfuncの前に<code>override</code>を宣言する</p>

<p>```
override func init() {</p>

<pre><code>super.init()
</code></pre>

<p>}
```</p>

<p>インスタンス変数をカスタマイズできる</p>

<p>```
var perimeter: Double {</p>

<pre><code>get {
    return 3.0 * sideLength
}
set {
    sideLength = newValue / 3.0
}
</code></pre>

<p>}</p>

<p>```</p>

<ul>
<li>メンバ変数に以下の記述,<code>willSet</code>,<code>didSet</code>をすることであらかじめ、前処理後処理ができるようになる</li>
</ul>


<p>```
class {</p>

<pre><code>var triangle: EquilateralTriangle {
willSet {
    square.sideLength = newValue.sideLength
}
didSet {
    square.sideLength *= 2
}
}
</code></pre>

<p>}</p>

<p>```</p>

<ul>
<li>引数に別名を持たせられる</li>
</ul>


<p>```
class Counter {</p>

<pre><code>var count: Int = 0
func incrementBy(amount: Int, numberOfTimes times: Int) {
    count += amount * times
}
</code></pre>

<p>}
var counter = Counter()
counter.incrementBy(2, numberOfTimes: 7)</p>

<p>```</p>

<h2>Enumerations and Structures</h2>

<ul>
<li>メソッドも作成できる</li>
<li>最初に数値を入れておかなければならない</li>
<li>後はインクリメントされる</li>
</ul>


<p>```
enum Rank: Int {</p>

<pre><code>case Ace = 1
case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten
case Jack, Queen, King
func simpleDescription() -&gt; String {
    switch self {
    case .Ace:
        return "ace"
    case .Jack:
        return "jack"
    case .Queen:
        return "queen"
    case .King:
        return "king"
    default:
        return String(self.toRaw())
    }
}
</code></pre>

<p>}</p>

<p>let ace = Rank.Ace
let aceRawValue = ace.toRaw() # 1
let name = ace.simpleDescription() # &ldquo;Ace&rdquo;</p>

<p>```</p>

<p>enumの方で比較しないとだめ</p>

<p>```</p>

<pre><code>    if ace == Rank.Ace {
        NSLog("-- ace!!!")
    }
</code></pre>

<p>// NG
//        else if ace == 1 {
//            NSLog(&ldquo;&mdash; no ace&hellip;&rdquo;)
//        }</p>

<p>```</p>

<h5>structure</h5>

<ul>
<li>classとほぼ同じ振る舞いをする</li>
<li>処理するときは必ずコピーされる, クラスは参照によって処理される</li>
</ul>


<h2>Protocols and Extensions</h2>

<ul>
<li>基本的なところはObjective-Cと変わらない</li>
</ul>


<p>```
protocol ExampleProtocol {</p>

<pre><code>var simpleDescription: String { get } # readonly
mutating func adjust()
</code></pre>

<p>}</p>

<p>```</p>

<ul>
<li>クラスにも構造体にも組み込める</li>
</ul>


<p>```
class SimpleClass: ExampleProtocol {
}</p>

<p>struct SimpleStructure: ExampleProtocol {
}
```</p>

<h2>Generics</h2>

<ul>
<li>型に汎用性を持たせて同じロジックを処理させることができる</li>
<li><code>classes</code>, <code>enumerations</code>, <code>structures</code>で利用できる</li>
</ul>


<p>```
func repeat<T>(item: T, times: Int) &ndash;> T[] {</p>

<pre><code>var result = T[]()
for i in 0..times {
    result += item
}
return result
</code></pre>

<p>}</p>

<p>repeat(&ldquo;knock&rdquo;, 4)
repeat(333, 3)</p>

<p>```</p>

<h2>まとめ</h2>

<p>何よりシンプルでモダンな作りになっているのでアプリを作ることがよりいっそう楽しくなること間違い無しですな。
ただ、いくつか説明できないところがあったので、次の会まで宿題にすることにします。</p>
]]></content>
  </entry>
  
</feed>
