<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: iOS | Nakajijapan]]></title>
  <link href="http://nakajijapan.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://nakajijapan.github.io/"/>
  <updated>2014-08-04T11:42:02+09:00</updated>
  <id>http://nakajijapan.github.io/</id>
  <author>
    <name><![CDATA[nakajijapan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[About Core Foudation in Working with Cocoa Data Types]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/07/26/core-foudation-for-swift/"/>
    <updated>2014-07-26T16:44:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/07/26/core-foudation-for-swift</id>
    <content type="html"><![CDATA[<p>AV Foundation関連のプログラムをSwiftで書き直しているときに、単純に変換できないところがあったので
一旦でキュメントに振り返って読み直してみました。</p>

<p>参照先はAppleの<a href="https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/BuildingCocoaApps/WorkingWithCocoaDataTypes.html">公式ドキュメント</a>に記載してあるのを自分なりに翻訳してみました。</p>

<h1>Core Foundation</h1>

<p><code>Core Foundation</code>型は自動的に<code>full-fledged</code>なSwiftクラスとしてインポートされる。
メモリ管理が提供されるときはいつでも、Swiftは自動的に<code>Core Foundation objects</code>のメモリを管理し、
自身をインスタンス化した<code>Core Foundation objects</code>をインクルードして管理します。Swift内で、
あなたは<code>toll-free bridged</code>な<code>Foundation</code>と<code>Core Foundation</code>の両方を相互に変換できる。
あなたはブリッジしている<code>Foundation</code>型をキャストするならSwiftの標準ライブラリに対して<code>toll-free bridged</code>な
<code>Core Foundation</code>型をブリッジすることができる</p>

<ul>
<li>toll-free bridged

<ul>
<li>オブジェクトを変換することなくキャストすることで相互変換可能な仕組みのことを指すらしいです</li>
</ul>
</li>
</ul>


<h2>Remapped Types</h2>

<p>Swiftは<code>Core Foundation</code>型をインポートするとき、コンパイラはそれらの型名を再配置する
コンパイラは各型の最後に記述されている<code>Ref</code>を削除する、なぜならSwiftクラスのすべては参照型、
それゆえにサフィックスはいらない</p>

<p><code>CFTypeRef</code>は<code>AnyObject</code>に再配置されるよ。<code>CFTypeRef</code>をつかうときは<code>AnyObject</code>を利用すべきだ！</p>

<h2>Memory Managed Objects</h2>

<p>APIから返却された<code>Core Foundation objects</code>はSwiftで自動的にメモリ管理される。
CFRetain、CFRelease、CFAutoreleaseを自動で呼び出す必要はない。独自のCの関数から<code>Core Foundation objects</code>
を返すのなら、それらを<code>CF_RETURNS_RETAINED</code>と<code>CF_RETURNS_NOT_RETAINED</code>のいずれかを使ってアノテートする。
上記のAPIを呼び出すSwiftコードをコンパイルするとき、コンパイラは自動的ににメモリ管理用の呼び出しを行う。
<code>Core Foundation objects</code>を返さないAPIを利用するときは、このセクションをスキップしてね。
でないのなら<code>unmanaged Core Foundation objects</code>の操作について学んでね。</p>

<h2>Unmanaged Objects</h2>

<p>Swiftが提供されているAPIをimportするときに、コンパイラは自動的に返却された<code>Core Foundation Objects</code>をメモリ管理できないよ
Swiftは<code>Unmanaged&lt;T&gt;</code>構造体内でこれらの返却された<code>Core Foundation objects</code>を内包する
間接的に返却された<code>Core Foundation objects</code>のすべては管理されい。例えば以下のように宣言できる</p>

<h3>Objective-C</h3>

<p><code>
CFStringRef StringByAddingTwoStrings(CFStringRef string1, CFStringRef string2)
</code></p>

<h3>Swift</h3>

<p><code>
func StringByAddingTwoStrings(CFString!, CFString!) -&gt; Unmanaged&lt;CFString&gt;!
</code></p>

<p>非管理のオブジェクトを受け取るとき、あなたは直接メモり管理されたオブジェクトに変換すべきです、非管理のオブジェクトを受け取る前に。
この方法でSwiftは手動でメモリ管理を行うことができる。
Unmanaged<T>構造体は非管理オブジェクトをメモリ管理されたobjectに<code>takeUnretainedValue()</code>に変換したり、<code>takeRetainedValue()</code>に変換したりと２つの方法を提供する。
あなたは自分が呼びだだしているAPIがunretained objectやretained objectを返すかどうかを基本に利用するためにどちらかのメソッドを選べる。</p>

<h3>Swift</h3>

<p><code>
let memoryManagedResult = StringByAddingTwoStrings(str1, str2).takeUnretainedValue()
// memoryManagedResult is a memory managed CFString
</code></p>

<p>非管理のオブジェクトであるretain() release() autorelease() メソッドを呼び出すことができます、しかしこのアプローチは推奨されないよ</p>

<h2>まとめ</h2>

<p>どうもSwiftでもARC非対応のものがあるので<code>Unmanaged&lt;T&gt;</code>構造体を利用して<code>takeUnretainedValue()</code>、<code>takeRetainedValue()</code>経由でメモリ管理されたオブジェクトにしなければならないようだ。
とはいえまだ完全理解というわけではないので引き続き調べていこうと思う。</p>

<h2>参考文献</h2>

<div style="margin-bottom:5px;"><a href="http://www.amazon.co.jp/%E8%A9%B3%E8%A7%A3-Objective-C-2-0-%E7%AC%AC3%E7%89%88-%E8%8D%BB%E5%8E%9F/dp/4797368276%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797368276" target="_blank" title="詳解 Objective-C 2.0 第3版"><img src="http://ecx.images-amazon.com/images/I/41VdFg9YqsL._SL160_.jpg" width="115" height="150" alt="詳解 Objective-C 2.0 第3版" style="border:0;border-radius:0" /></a></div>


<p><a href="http://www.amazon.co.jp/%E8%A9%B3%E8%A7%A3-Objective-C-2-0-%E7%AC%AC3%E7%89%88-%E8%8D%BB%E5%8E%9F/dp/4797368276%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797368276" target="_blank">詳解 Objective-C 2.0 第3版</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift勉強会を開催して話してきました。]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/07/19/swift-shibuya-01/"/>
    <updated>2014-07-19T20:08:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/07/19/swift-shibuya-01</id>
    <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="a9200910f163013106da6eb14261a8ef" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>先日、小さい規模ながらSwfit勉強会を開催しました。</p>

<p><a href="http://atnd.org/events/52641">Swift勉強会 hosted by @nakajijapan from ペパボ</a></p>

<p>そんななか、自分も「Swiftに慣れるまで行ったこと」を発表しました。</p>

<p>ざっくり言うSwiftに慣れるのに以下のことをしてみた献じたことを話しました。</p>

<ol>
<li>公式ドキュメント（を読んだ後に）</li>
<li>サンプルアプリをTableViewControllerベースで作成してみたこと</li>
<li>自分のプラグイン(NKJMovieComposer)をSwiftで書き換えてみたこと</li>
<li>気分高ぶってMac OS Xも作成してみたこと</li>
</ol>


<p>詳しくはスライドをご覧ください。</p>

<p>Swiftが出たときにSan Franciscoで一心不乱にサンプルアプリプログラム書いてブログ上げようかと思ったけど
いろんな人が既にブログに上げていたのでただただGitHubにあげるだけでした。そんなんか
いろいろ勉強していくうちにMacアプリもつくれんじゃねーかwで脳内麻痺して書籍を購入してSwiftで作成
してみました。</p>

<p><img src="/images/posts/2014-07-19-01.png" alt="swift" /></p>

<p>起動しとけば単純に画像を定期的に保存するアプリです。
（そのうちに１日で保存した画像をGifアニメのような動画にしてソーシャルにアップする機能作ろうかと計画中）
ある程度できたらGeHubにアップ仕様と思います。</p>

<p>ちなみにこちらの書籍を購入しました。</p>

<p><a href="http://frustration.me/items/5171">
  <img src="http://ecx.images-amazon.com/images/I/41bAmGQ-ljL.jpg" />
</a></p>

<p>Macアプリ、知識が溜まって来たらまた記事にします。</p>

<p>とにかく、Swift勉強会が無事終えてよかったです。
参加してくれたみなさん、そして発表してくれた、@misyobun @hypermkt @kurotaky ありがとうございました！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcodeのフォルダ参照]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/07/11/xcode-folder-references/"/>
    <updated>2014-07-11T00:37:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/07/11/xcode-folder-references</id>
    <content type="html"><![CDATA[<p>なにげに今まで知らなかったんですが結構便利だってことに最近気づいたのでメモ。
普段リソースをXcodeに関連づけさせるためにドラッグアンドドロップさせていたのですが、
一旦以下のチェック項目でディレクトリ参照にしてしまえば、これ以降リソースファイルを追加したときに毎度
ドラッグアンドドロップさせなくてよく、自動的に追加されます。</p>

<p><img src="/images/posts/2014-07-11-01.png" alt="nakajijapan" /></p>

<p><img src="/images/posts/2014-07-11-02.png" alt="nakajijapan" /></p>

<p>他と違うのは対象のディレクトリは色が青になっています。</p>

<p>実際に呼び出すときには通常の呼び出し方法と異なります。リソースファイルの前に指定のディレクトリ名を宣言
する必要があります。</p>

<p>今回だと以下の感じになります。</p>

<p><code>
let soundFilePath = NSBundle.mainBundle().pathForResource("music/sound001", ofType: "mp3")
</code></p>

<p><code>music</code>がディレクトリにあたりますね。</p>

<p>これ、何気に便利で、デザイナさんにXcode立ち上げなくても指定のディレクトリおいておくだけで、余計なところを実装せずに済むので
仕事が捗るのではないかと気づいた今日このごろでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[録画時にブラックシーンができてしまう問題]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/06/15/study-avassetwriter/"/>
    <updated>2014-06-15T18:26:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/06/15/study-avassetwriter</id>
    <content type="html"><![CDATA[<p><a href="http://nakajijapan.github.io/blog/2014/06/08/wwdc2014/">WWDC2014に行って来た</a>の話になるのですが、
プライベートでアプリ作成しているときにAV Foundation絡みでわからないところがあったのでAppleのエンジニアさんに質問してきました。</p>

<h2>現象</h2>

<p>問題は、自分が作成した<a href="https://github.com/nakajijapan/NKJMultiMovieCaptureView">NKJMultiMovieCaptureView</a>でその現象が発生しました。
作成したときの話は<a href="http://nakajijapan.github.io/blog/2014/06/01/app-doujou3/">こちら</a>になります。
Vine動画のようにタッチしたら録画し、タッチが終了したら(指を離したら)録画を終了し、録画した複数の動画を一つにする仕組みを作成したのですが、
実際作成した動画を見てみると最初のほんの一瞬だけなぜかブラックシーンができてしまいます。</p>

<p>現状の処理として以下のようなことをしています。</p>

<h3>1. 録画開始</h3>

<p><code>obj-c
- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
</code></p>

<p>タッチイベントで録画の処理を開始します。このときにファイルに対しての書き込み処理を開始します。</p>

<p><code>obj-c
[self.assetWriter startWriting];
[self.assetWriter startSessionAtSourceTime:self.recordStartTime];
</code></p>

<h3>2. 録画</h3>

<p><code>AVCaptureVideoDataOutputSampleBufferDelegate</code>, <code>AVCaptureAudioDataOutputSampleBufferDelegate</code>をプロトコルとして指定して、
以下のメソッドで録画の処理を行います。</p>

<p><code>obj-c
- (void)captureOutput:(AVCaptureOutput *)captureOutput didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer fromConnection:(AVCaptureConnection *)connection
</code></p>

<p>ざっくりですが、内部でやっていることはCMSampleBufferというフレーム情報が取得でき、それを１秒間に何回も実行されるこのメソッドで<code>AVAssetWriterInput</code>オブジェクトに
追加処理をしています。</p>

<p>```obj-c</p>

<pre><code>CFRetain(sampleBuffer);
CFRetain(formatDescription);
dispatch_async(self.movieWritingQueue, ^{

    if (_assetWriter.status == AVAssetWriterStatusWriting) {

        if (assetWriterInput.readyForMoreMediaData) {

            if (![assetWriterInput appendSampleBuffer:sampleBuffer]) {
                NSLog(@"%@",[self.assetWriter error]);
            }

        }
    }

    CFRelease(sampleBuffer);
    CFRelease(formatDescription);
});
</code></pre>

<p>```</p>

<h3>3. 録画終了</h3>

<p>タッチが終了したら録画終了の処理を行います。</p>

<p><code>obj-c
- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event
</code></p>

<h2>問題</h2>

<p>どうやらスレッドを利用しての保存方法に問題があったようです。</p>

<h3>修正前</h3>

<p><img src="/images/posts/2014-06-15_01_avassetwriter.jpg" alt="AVAssetWriter" /></p>

<p>録画開始とフレーム情報を保存する処理が別スレッドで行われているせいで微妙にタイミングがずれたフレーム情報を取得してしまっている。
ここっだと、開始した時間よりも一瞬だけ先のフレーム情報を取得してしまうので最初の一瞬はブラックシーンになります。</p>

<h3>修正後</h3>

<p><img src="/images/posts/2014-06-15_02_avassetwriter.jpg" alt="AVAssetWriter" /></p>

<p>なので録画開始も同じスレッドで順次処理させるようにし、時間の誤差を最小限にしました。こうすることで無事ブラックシーンが無くなりました。</p>

<p>実際には以下のように修正しています。</p>

<p>```diff</p>

<pre><code> // Record
 NSLog(@"[Starting to record]");
</code></pre>

<ul>
<li> [self.assetWriter startWriting];</li>
<li> [self.assetWriter startSessionAtSourceTime:self.recordStartTime];</li>
<li> dispatch_async(self.movieWritingQueue, ^{</li>
<li><pre><code> [self.assetWriter startWriting];
</code></pre></li>
<li><pre><code> [self.assetWriter startSessionAtSourceTime:self.recordStartTime];
</code></pre></li>
<li> });
+
```</li>
</ul>


<h3>まとめ</h3>

<p>とはいえ、この実装も完璧というわけではなくてタイミングがずれることはあるとおっしゃっていましたが、
今のところ発生していないので安心しています。</p>

<h2>参考</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAssetWriter_Class/Reference/Reference.html">AVAssetWriter Class Reference</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/Multithreading.pdf">Threading Programming Guide</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091">Concurrency Programming Guide</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC2014に参加してきました]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/06/08/wwdc2014/"/>
    <updated>2014-06-08T23:50:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/06/08/wwdc2014</id>
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/wwdc/">
  <img src="https://devimages.apple.com.edgekey.net/wwdc/images/wwdc14-home-branding.png" width=800/>
</a></p>

<p>今回、アプリエンジニアなら一度は行ってみたいはずのWWDC2014に行くことになりました。そこで、この一週間いろんなこと起きたので何回かに分けてブログという形で記録に残しておきたいと思います。</p>

<h2>経緯</h2>

<p>ここ最近の２、３年はプライベートでアプリを作る時間の割合がどんどん大きくなってきて何個かアプリを出したり、CocoaPodsでプラグインを出したりと活動して来たわけですが、その成果もあってかないのか仕事でもアプリの仕事を振られるようになって徐々に仕事もプライベートもアプリの仕事の比重が高くなってくる今日このごろでした。</p>

<p>そんななか同僚の<a href="https://twitter.com/misyobun">@misyobun</a> <a href="https://twitter.com/daniel0613">@daniel0613</a>と今年のWWDCはどうしようかという話になって、たしかにいち早くセッションの内容が見れたりLabで開発者の人に質問したりと魅力たっぷりなのですが予算とか有給とか上長の許可とか。。。。超えなければいけない壁あったのですが、まぁ当選に受かったらその後のことは後で考えようということで駄目もとで応募してみました。</p>

<p>その後、突如何の前触れもなく当選したというメールがきたのでびっくりしました。じわじわきた感じです。とはいえ、これからどうしたものかと思いとにかく基盤の方、事業部長、上長、人事の方に相談していろいろありましたが、WWDCに行く承認がおりましてめでたく参加という形になりました。一つ奇跡がありまして僕の同僚である<a href="https://twitter.com/misyobun">@misyobun</a>も受かっていたことです。初めてのサンフランシスコで初めてのWWDCだったの一緒にいくメンバーがいたのは大変心強いものを感じました。</p>

<h2>KeyNote</h2>

<p>詳しい纏めは<a href="http://www.gizmodo.jp/2014/06/wwdc_2014_3.html">ギズモードさんの記事</a>を読んでもらった方がわかりやすいです。</p>

<p>衝撃的だったのが新しいプログラミング「Swift」が発表されたこと。
しかも、しれっとはじまったので驚きました。。。クレイグさんが「Xcode..」って言ったときにみんな”ざわっ”ってしてたのは忘れないです。
今年はiPhone6やフィットネス関係のハードが出るのかなと思いきや、iOS8、Swiftとデベロッパの祭典ならではの内容だったのかなと思います。</p>

<p><img src="https://devimages.apple.com.edgekey.net/swift/images/swift-hero.png" alt="Swift" /></p>

<h4>Swift &ndash; Objective-C without C</h4>

<p><a href="https://developer.apple.com/swift/">Introducing Swift</a></p>

<ul>
<li>安全なプログラミングパターンの提供</li>
<li>現代の機能・技術の即したものをよりシンプルに柔軟に楽しく実装できる</li>
<li>Python, Objective-Cより高速</li>
</ul>


<h3>CocoaPods MeetUp in Twillio</h3>

<p>その日は、いろんな会社でWWDCにちなんだミートアップをやっていたので自分はTwillio社で開催されていたCocoaPodsのミートアップに参加してきました。英語が早くてほとんど聞き取れなかった・・・。とはいえ、なんかコミニュケーションしようと思って発表した人に挨拶しにいきました。</p>

<iframe src="http://nakajijapan.github.io//instagram.com/p/ow-OKBsR0Y/embed/" width="612" height="710" frameborder="0" scrolling="no" allowtransparency="true"></iframe>


<h2>2日目</h2>

<p>せっかくなので自分の興味のある分野をみてきたのでした。</p>

<ul>
<li>Mastering Modern Media Playback</li>
<li>Harnessing Metadata in Audiovisual Media</li>
<li>Introducing HomeKit</li>
</ul>


<p>夜は二人でSwiftごにょごにょ</p>

<h2>3日目</h2>

<p>この日もせっかくなので自分の興味のある分野をみてきたのでした。</p>

<ul>
<li>What&rsquo;s New in Core Audio</li>
<li>Introducing HealthKit</li>
<li>Mastering Modern Media Playback</li>
<li>Harnessing Metadata in Audiovisual Media</li>
<li>Camera Capture: Manual Controls</li>
<li>Intermediate Swift</li>
<li>Swift Interoperability In Depth</li>
</ul>


<p>夜は二人でSwiftごにょごにょ</p>

<h2>4日目</h2>

<p>この日は、二人でSwiftのドキュメント読んだりプログラミングしているうちにわからないところがでてきたので一旦セッションにでることは中止して各分野のLabにいって担当のエンジニアに質問をしに行く業を行いました。</p>

<ul>
<li>Swift Lab

<ul>
<li>Swiftの実装の仕方もろもろ</li>
</ul>
</li>
<li>Media Lab

<ul>
<li>AV Foundation関連でAVAssetWriterの処理方法</li>
</ul>
</li>
</ul>


<p>その後は、Bashというなの打ち上げが庭で開催されました。</p>

<h3>5日目</h3>

<ul>
<li>Advanced Swift Debugging in LLDB</li>
</ul>


<p>時間があったのでSwift Labで質問。</p>

<h2>Bash!!!!!!!</h2>

<p>WWDCは五日間あったのですが、四日目にはBash!というなの打ち上げがあり、せっかくなので参加してきました。開会式・閉会式とかはないんですがね&hellip;これは文化の違いなのかな。あ、書いてて思ったのですが、
参加したエンジニアと交流する名目のあれだったんだな思いました。。。。Bashのプログラムが全くなかったので同僚と話していたらおばちゃんが英語で交流しなさい！！
っていわれたので何人かのエンジニアさんと会話してきましたのも思い出しました。アジアからきたりヨーロッパからきたりいろんな国のエンジニアさんと話させていただきました。
みんな英語流暢でなかなか理解できなかったのですがそこはお酒の力をかりてテンションで会話できたのでした。。。</p>

<p>途中からはライブが始まり、KeyNoteで流れていた曲のアーティスト、Bastilleがライブしたらしいです。KeyNoteを見直したら確かにこの曲でじわじわと会場にいたときの興奮がよみがえって来たので購入してしまいましたw</p>

<p><img src="http://ecx.images-amazon.com/images/I/51IANZeQuXL.jpg" alt="Bastille - Pompeii" /></p>

<p>Bad Blood &ndash; Pompeii</p>

<p>あと、本当に偶然にクレイグさんが近くにいたので一緒に写真を撮らせていただいたのは貴重な思い出です。安定のスマイルでした。</p>

<blockquote class="twitter-tweet" lang="ja"><p>Awesome!! はじめまして！ <a href="https://twitter.com/craig_apple">@craig_apple</a> <a href="https://twitter.com/search?q=%23WWDC&amp;src=hash">#WWDC</a> <a href="http://t.co/zjZ3LrzLFA">pic.twitter.com/zjZ3LrzLFA</a></p>&mdash; nakajijapan (@nakajijapan) <a href="https://twitter.com/nakajijapan/statuses/474827650419007488">2014, 6月 6</a></blockquote>


<script async src="http://nakajijapan.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>WWDCに参加してみて</h2>

<h3>Labにもっと行こう！！！</h3>

<p>今回は初めてもありあまり用意という用意はしてこなかったのですが、実際に参加してみてセッションに躍起になって参加はしなくてもいいのかなと思いました。
今年はセッションの発表が終了してから１、２日後にはセッションの動画アップロードされているので、あまりWWDCに参加したメリットは感じられないと思います。
なのでセッションは適度にして、新しい機能や仕事やプライベートで解決できない問題纏めて各分野のLabで質問しまくるのがいいなと思いました。
実際に、Appleのエンジニアさんも、皆さんがLabで質問してくるこが大変ありがたいし大歓迎だよ！改善にもつながるしね！とおっしゃっていました。
英語もコードとサンプルプログラムで一緒に話せばなんとかなると実感しました。
もっと、質問すれば良かったと大変反省しております。</p>

<h3>沸き上がる興奮を日本に持ち帰る</h3>

<p>自慢話します。（違います）
今回参加したことを何らかの形でフィードバックして来年こそ自分が行きたい！来年も参加の許可が下りるようにする使命みたいなものは勝手にあると思っています。
もっと盛り上げたいな。まぁ自分や近くにいる人たちが楽しんでれば、勝手に集まってくるのかな。よし、もっと楽しもう！！！！</p>

<h3>戦争だ！</h3>

<p>いや、ビジネスと言う名の戦争です。
外国の方（特に英語圏）は言語の壁がないのでがんがんLabに質問していって解決したり、勝手に他のエンジニアとなかよくなって情報交換したりと圧倒されたり、
このようなエンジニアが会場でこんな多いと感じたのに正解にはもっとたくさんいるんだなと思うと自分なんてほんの点なんだなと萎縮しています。</p>

<p>そんな人と、ビジネスで闘っているとなるとなおさら。</p>

<h2>最後に</h2>

<p>相談に乗っていただいた<a href="https://twitter.com/kentaro">@kentaro</a>さん、<a href="https://twitter.com/mau_rin">@mau_rin</a>さん、
仕事がまだがんがん残っているのにも関わらず許可していただいた上長、事業部長、そしてWWDCそしてサンフランシスコで一週間心の支えになった同僚の
<a href="https://twitter.com/misyobun">@misyobun</a>には大変大変大変大変大変感謝しております。</p>

<p>この恩義は業務や後輩の育成で返していこう思います！！！！</p>

<p>ぼそっ(来年も参加したい。。。)
ぼそっ(仕事が溜まってる!!!!!)</p>

<p>以上、Apple信者のたわいもないブログでした。</p>
]]></content>
  </entry>
  
</feed>
