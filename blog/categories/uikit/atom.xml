<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: uikit | Nakajijapan]]></title>
  <link href="http://nakajijapan.github.io/blog/categories/uikit/atom.xml" rel="self"/>
  <link href="http://nakajijapan.github.io/"/>
  <updated>2014-04-29T11:44:45+09:00</updated>
  <id>http://nakajijapan.github.io/</id>
  <author>
    <name><![CDATA[nakajijapan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UIButtonのカスタマイズ - ライトON/OFFを制御するボタンを作成してみた]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/09/18/customize-uibutton/"/>
    <updated>2013-09-18T20:19:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/09/18/customize-uibutton</id>
    <content type="html"><![CDATA[<p>iPhoneについているライトのON/OFFを制御したいのですが、ボタンをそのまま流量できるのかなと思いきや
UIImagePickerControllerを利用しないで実装する場合はイベントしか用意されておらずデザインも自分で実装
しないといけないようです。</p>

<p>なので自分なりにそれっぽいのを実装してみました。
（とりあえず手動でon/offで切り替えるUIにしてます）</p>

<p>```obj-c</p>

<pre><code>// ライトが利用できたら表示
if (device.torchAvailable == YES) {
    UIButton* toggleLightButton = [UIButton buttonWithType:UIButtonTypeCustom];
    [toggleLightButton setFrame:CGRectMake(30, 120, 100, 55)];
    [toggleLightButton setTitle:@"ON" forState:UIControlStateNormal];

    // レイヤー内でボタンデザインの編集を行う
    [[toggleLightButton layer] setCornerRadius:25.0f];// 角丸
    [[toggleLightButton layer] setMasksToBounds:YES];
    [[toggleLightButton layer] setBorderWidth:2.5f];// 枠線の太さ
    [[toggleLightButton layer] setBorderColor:[[UIColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:0.7] CGColor]];// 枠線の色
    [[toggleLightButton layer] setBackgroundColor:[[UIColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:0.3] CGColor]];// 背景色
    [toggleLightButton addTarget:self action:@selector(toggleChangeTorchMode:) forControlEvents:UIControlEventTouchUpInside];

    // 画像を左側に埋め込む
    UIImage* image = [UIImage imageNamed:@"light.png"];
    CALayer* imgLayer = [CALayer layer];
    imgLayer.contents = CFBridgingRelease([image CGImage]);
    imgLayer.frame    = CGRectMake(10, 13, 30, 30);
    [toggleLightButton.layer addSublayer:imgLayer];

    // 文字列のpaddingを設定する
    UIEdgeInsets insets = toggleLightButton.contentEdgeInsets;
    insets.left = 20.0;
    toggleLightButton.contentEdgeInsets = insets;

    [self.view addSubview:toggleLightButton];
}
</code></pre>

<p>```</p>

<p>実際できたのがこんな感じ。
なんかそれっぽくできました。（アイコンは当てなのであしからず）</p>

<p><img src="/images/posts/2013-09-18_01.png" alt="ss" /></p>

<p>基本は<code>CALayer</code>でデザインの修正をおこなう。</p>

<p>```obj-c</p>

<pre><code>    // レイヤー内でボタンデザインの編集を行う
    [[toggleLightButton layer] setCornerRadius:25.0f];// 角丸
    [[toggleLightButton layer] setMasksToBounds:YES];
    [[toggleLightButton layer] setBorderWidth:2.5f];// 枠線の太さ
    [[toggleLightButton layer] setBorderColor:[[UIColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:0.7] CGColor]];// 枠線の色
    [[toggleLightButton layer] setBackgroundColor:[[UIColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:0.3] CGColor]];// 背景色
    [toggleLightButton addTarget:self action:@selector(toggleChangeTorchMode:) forControlEvents:UIControlEventTouchUpInside];
</code></pre>

<p>```</p>

<p>画像を組み込んだ場合は文字と被るといけないので文字の表示位置をずらします。
XIBの場合はIBの左側のメニューで設定できるのですが、それを実装で行うときは<code>UIEdgeInsets</code>クラスを
利用します。CSSのイメージでいうとpaddingをイメージして設定すると想像できます。</p>

<p>```obj-c</p>

<pre><code>    // 文字列のpaddingを設定する
    UIEdgeInsets insets = toggleLightButton.contentEdgeInsets;
    insets.left = 20.0;
    toggleLightButton.contentEdgeInsets = insets;
</code></pre>

<p>```</p>

<p><code>UIButton</code>でいろいろカスタマイズしてみました。ほとんどはUIViewを親にもっていて、そのなかにCALayerをもっているのです。
そのCALayerをうまく使ってデザインすればいい感じにカスタマイズができますよって話でした。</p>
]]></content>
  </entry>
  
</feed>
