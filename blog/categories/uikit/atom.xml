<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: uikit | Nakajijapan]]></title>
  <link href="http://nakajijapan.github.io/blog/categories/uikit/atom.xml" rel="self"/>
  <link href="http://nakajijapan.github.io/"/>
  <updated>2014-03-02T17:02:23+09:00</updated>
  <id>http://nakajijapan.github.io/</id>
  <author>
    <name><![CDATA[nakajijapan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UIButtonのカスタマイズ - ライトON/OFFを制御するボタンを作成してみた]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/09/18/customize-uibutton/"/>
    <updated>2013-09-18T20:19:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/09/18/customize-uibutton</id>
    <content type="html"><![CDATA[<p>iPhoneについているライトのON/OFFを制御したいのですが、ボタンをそのまま流量できるのかなと思いきや
UIImagePickerControllerを利用しないで実装する場合はイベントしか用意されておらずデザインも自分で実装
しないといけないようです。</p>

<p>なので自分なりにそれっぽいのを実装してみました。
（とりあえず手動でon/offで切り替えるUIにしてます）</p>

<p>```obj-c</p>

<pre><code>// ライトが利用できたら表示
if (device.torchAvailable == YES) {
    UIButton* toggleLightButton = [UIButton buttonWithType:UIButtonTypeCustom];
    [toggleLightButton setFrame:CGRectMake(30, 120, 100, 55)];
    [toggleLightButton setTitle:@"ON" forState:UIControlStateNormal];

    // レイヤー内でボタンデザインの編集を行う
    [[toggleLightButton layer] setCornerRadius:25.0f];// 角丸
    [[toggleLightButton layer] setMasksToBounds:YES];
    [[toggleLightButton layer] setBorderWidth:2.5f];// 枠線の太さ
    [[toggleLightButton layer] setBorderColor:[[UIColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:0.7] CGColor]];// 枠線の色
    [[toggleLightButton layer] setBackgroundColor:[[UIColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:0.3] CGColor]];// 背景色
    [toggleLightButton addTarget:self action:@selector(toggleChangeTorchMode:) forControlEvents:UIControlEventTouchUpInside];

    // 画像を左側に埋め込む
    UIImage* image = [UIImage imageNamed:@"light.png"];
    CALayer* imgLayer = [CALayer layer];
    imgLayer.contents = CFBridgingRelease([image CGImage]);
    imgLayer.frame    = CGRectMake(10, 13, 30, 30);
    [toggleLightButton.layer addSublayer:imgLayer];

    // 文字列のpaddingを設定する
    UIEdgeInsets insets = toggleLightButton.contentEdgeInsets;
    insets.left = 20.0;
    toggleLightButton.contentEdgeInsets = insets;

    [self.view addSubview:toggleLightButton];
}
</code></pre>

<p>```</p>

<p>実際できたのがこんな感じ。
なんかそれっぽくできました。（アイコンは当てなのであしからず）</p>

<p><img src="/images/posts/2013-09-18_01.png" alt="ss" /></p>

<p>基本は<code>CALayer</code>でデザインの修正をおこなう。</p>

<p>```obj-c</p>

<pre><code>    // レイヤー内でボタンデザインの編集を行う
    [[toggleLightButton layer] setCornerRadius:25.0f];// 角丸
    [[toggleLightButton layer] setMasksToBounds:YES];
    [[toggleLightButton layer] setBorderWidth:2.5f];// 枠線の太さ
    [[toggleLightButton layer] setBorderColor:[[UIColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:0.7] CGColor]];// 枠線の色
    [[toggleLightButton layer] setBackgroundColor:[[UIColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:0.3] CGColor]];// 背景色
    [toggleLightButton addTarget:self action:@selector(toggleChangeTorchMode:) forControlEvents:UIControlEventTouchUpInside];
</code></pre>

<p>```</p>

<p>画像を組み込んだ場合は文字と被るといけないので文字の表示位置をずらします。
XIBの場合はIBの左側のメニューで設定できるのですが、それを実装で行うときは<code>UIEdgeInsets</code>クラスを
利用します。CSSのイメージでいうとpaddingをイメージして設定すると想像できます。</p>

<p>```obj-c</p>

<pre><code>    // 文字列のpaddingを設定する
    UIEdgeInsets insets = toggleLightButton.contentEdgeInsets;
    insets.left = 20.0;
    toggleLightButton.contentEdgeInsets = insets;
</code></pre>

<p>```</p>

<p><code>UIButton</code>でいろいろカスタマイズしてみました。ほとんどはUIViewを親にもっていて、そのなかにCALayerをもっているのです。
そのCALayerをうまく使ってデザインすればいい感じにカスタマイズができますよって話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIKitで人魂つくってみた]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/09/07/create-hitodama-with-uikit/"/>
    <updated>2013-09-07T07:42:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/09/07/create-hitodama-with-uikit</id>
    <content type="html"><![CDATA[<p>お化けアプリを絶賛作成中なのですが、そのなかで世界観を少しでも作るべくいろいろ試行錯誤しているのですが、ちょっとトップに
人魂でもいれてみようじゃないかと思い立って作ってみました。</p>

<p>iOS5からCore AnimationなるものがサポートされていてパーティクルエフェクトがUIKitでも作成できるようになったので実装してみました。
以前はCocos2Dのフレームワーク情報で作成していたのですがそれを利用しないのは初めて。</p>

<p>まずはフレームワークをインポートする</p>

<h2>1</h2>

<p>```</p>

<h1>import &lt;QuartzCore/QuartzCore.h></h1>

<p>```</p>

<h2>2</h2>

<p>あとは表現したものを想像して実装するのみ！！！！っていってもパラメータが沢山あるので
感覚的にGUIで設定できてその状態のパラメータをみれるツールをつかいました。</p>

<ul>
<li>UIEffectDesigner

<ul>
<li><a href="http://www.touch-code-magazine.com/uieffectdesigner/">http://www.touch-code-magazine.com/uieffectdesigner/</a></li>
</ul>
</li>
</ul>


<p>これにfire ballっていのがあったのでそれを参考にしつつ自分なりに調整してみました。</p>

<p>```objective-c
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];

CAEmitterLayer* fireEmitter = [CAEmitterLayer layer];
fireEmitter.emitterPosition = CGPointMake(200, 200);
fireEmitter.emitterSize = CGSizeMake(40, 40);
fireEmitter.renderMode = kCAEmitterLayerAdditive;

CAEmitterCell* fire = [CAEmitterCell emitterCell];

fire.birthRate     = 250;
fire.lifetime      = 2.0;
fire.lifetimeRange = 2.06;
fire.velocity      = 26;
fire.velocityRange = 40;

fire.color         = [[UIColor colorWithRed:0.0 green:0.0 blue:0.05 alpha:1.0] CGColor];
fire.redRange      = 0.12;
fire.greenRange    = 0.12;
fire.blueRange     = 0.12;
fire.contents      = (id)[[UIImage imageNamed:@"particle.png"] CGImage];
[fire setName:@"fire"];

fire.alphaRange = 0;
fire.scale      = 2.0;
fire.scaleRange = 2.0;
fire.spin       = 1.56;
fire.spinRange  = 0;

fire.alphaSpeed = -0.33;
fire.scaleSpeed = -0.1;

fire.emissionRange     = M_PI / 2;
fire.emissionLongitude = 1.57;
fire.emissionLatitude  = 2.33;

fire.xAcceleration = 0;
fire.yAcceleration = -80;
fire.zAcceleration = 0;

fireEmitter.emitterCells = [NSArray arrayWithObject:fire];

[self.view.layer addSublayer:fireEmitter];
</code></pre>

<p>}</p>

<p>```</p>

<p>とりあえずこれで自分なりの人魂作成に成功しました。
パラメータをいろいろ覚えなければいけないものが沢山あるのでちょっと覚えるの大変だなという印象。
今回その煩雑さをUIEffectDesignerで補完しましたが、それでもパラメータがどのような効果があるのかはある程度理解しておく必要があるようです。</p>

<p><img src="/images/posts/2013-09-08_01.png" alt="ss" /></p>

<h3>参照</h3>

<p>iOS Developer Library
<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CAEmitterLayer_class/Reference/Reference.html">https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CAEmitterLayer_class/Reference/Reference.html</a></p>

<p>UIEffectDesigner
<a href="http://www.touch-code-magazine.com/uieffectdesigner/">http://www.touch-code-magazine.com/uieffectdesigner/</a></p>
]]></content>
  </entry>
  
</feed>
