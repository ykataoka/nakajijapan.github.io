<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nakajijapan]]></title>
  <link href="http://nakajijapan.github.io/atom.xml" rel="self"/>
  <link href="http://nakajijapan.github.io/"/>
  <updated>2014-02-17T03:24:21+09:00</updated>
  <id>http://nakajijapan.github.io/</id>
  <author>
    <name><![CDATA[nakajijapan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Developers Summit 2014]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/02/15/developers-summit-2014/"/>
    <updated>2014-02-15T01:51:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/02/15/developers-summit-2014</id>
    <content type="html"><![CDATA[<p>先週ではありますが、Developers Summit 2014に参加してきました。
サミットが平日だったので全部はみれていませんが、いくつかのステージをみること
はできたのでそのメモを記します。</p>

<ul>
<li>Developers Summit 2014

<ul>
<li><a href="http://event.shoeisha.jp/devsumi/20140213/">http://event.shoeisha.jp/devsumi/20140213/</a></li>
</ul>
</li>
</ul>


<h2>iOSアプリケーションの継続的デリバリー</h2>

<ul>
<li>発表者

<ul>
<li><a href="https://event.shoeisha.jp/devsumi/20140213/session/430">https://event.shoeisha.jp/devsumi/20140213/session/430</a></li>
</ul>
</li>
<li>発表資料

<ul>
<li><a href="http://sssslide.com/www.slideshare.net/numeha/ios-31199969">http://sssslide.com/www.slideshare.net/numeha/ios-31199969</a></li>
</ul>
</li>
</ul>


<h3>どのくらいスピードが必要なのか</h3>

<ul>
<li>iOS１ヶ月で約四回リリース</li>
<li>ネックは申請降りるのに７日間必要。。。</li>
<li>1年で１２回のリリース</li>
<li>自分たちのリリースのリズムできてますか？

<ul>
<li>いつもリリースできる状態にしときましょう!!</li>
</ul>
</li>
<li>継続的デリバリー

<ul>
<li>ビジネスの主導権を握る為にCIやるんだ!!!</li>
</ul>
</li>
</ul>


<blockquote><p>価値のあるソフトウェアをはやく継続的にリリースする</p></blockquote>

<h3>徹底的に自動化してきた</h3>

<h4>コード品質のパイプライン</h4>

<ol>
<li>コード取得 &ndash;> Git</li>
<li>ビルド &ndash;> Xcode</li>
<li>コード行数 &ndash;> SLOCCount</li>
<li>重複コード &ndash;> DRY</li>
<li><p>警告 &ndash;> Warnnings</p></li>
<li><p>テストにはGHUnitを利用している</p></li>
<li>カバレッジはgcovr</li>
</ol>


<h3>製品品質のパイプライン</h3>

<ul>
<li>実記でのテストが必要</li>
<li>テストフレームワークを同封してビルドしている</li>
<li>自動でipaファイル作成</li>
<li>複数のデバイスに自動でインストール

<ul>
<li>fruitstrap or Instruments</li>
</ul>
</li>
<li>特定の端末のピンポイントでデプロイする</li>
<li>Frankというテストフレーム</li>
<li>httpで外部から複数代のios端末を操作</li>
<li>ios7からのTouch問うの操作API禁止</li>
</ul>


<p>どうしよう。。。</p>

<ul>
<li>解決策としてiOS6専用にしよう</li>
<li>iOS7はInstruments経由で操作</li>
<li>ビルドマシン一代につきiOS一代にいれよう</li>
<li>テストフレームワークを複数いれられない

<ul>
<li>シングルプロセスでしか動作しないらしい</li>
</ul>
</li>
</ul>


<p>どうしよう。。。</p>

<ul>
<li>MacサーバでVMサーバ作って複数台での端末で実装してみたよ

<ul>
<li>実機のテストにはさまざまなシリーズ・OSバージョンのiPhone,iPadを用意してるらしい</li>
</ul>
</li>
</ul>


<p>エンタープライズすごい！</p>

<h2>Tokyo MotionControl Network</h2>

<ul>
<li>Facebook

<ul>
<li><a href="https://www.facebook.com/TokyoMotioncontrolNetwork">https://www.facebook.com/TokyoMotioncontrolNetwork</a></li>
</ul>
</li>
</ul>


<p>モーションキャプチャを利用したさまざまなコンテンツの紹介をされていました。</p>

<h4>VIRTUAL FASHION</h4>

<ul>
<li><code>Kinect/PrimeSence</code>で作成</li>
<li>ボーントラッキングの技術をもちいてCGノ衣装をマッピング</li>
<li>360度マッピングしてる</li>
</ul>


<h4>TRANSSHOME</h4>

<ul>
<li>ポーズをとったその陰で家を自動生成してくれる</li>
<li>子供受けがいい</li>
</ul>


<h4>AIR SHODOU</h4>

<ul>
<li><code>Kinect</code>で作成</li>
<li>書道をモーションキャプチャを通して描くシステム</li>
</ul>


<h4>執事力</h4>

<ul>
<li>執事のようにきれいな姿勢で入れるか検定する</li>
<li>ボーントラッキングで検査している</li>
</ul>


<h4>うるしずく</h4>

<h4>nt-kinesys</h4>

<ul>
<li><code>PrimeSense</code>で作成</li>
</ul>


<h4>ゲゲゲの鬼太郎</h4>

<ul>
<li>近づくと全身がネズミ男になるらしいです</li>
</ul>


<h3>メモ</h3>

<p>他にもの以下のセッションが行われていました。</p>

<ul>
<li>モーションコントロールコンテンツの実装からみえてきたもの

<ul>
<li><a href="http://www.slideshare.net/NaojiTaniguchi/developer-summit-2014naojitaniguchi">http://www.slideshare.net/NaojiTaniguchi/developer-summit-2014naojitaniguchi</a></li>
</ul>
</li>
<li>モーションセンサーの現状と2014年の予測

<ul>
<li><a href="http://www.slideshare.net/kaorun55/devsumi-201414c5">http://www.slideshare.net/kaorun55/devsumi-201414c5</a></li>
</ul>
</li>
</ul>


<h2>所感</h2>

<p>今回一番勉強になったのはメインでリコーさんのiOSの発表で、いろいろ勉強させていただきました。
そこでいくつかのツールがでてきたので今度利用してみようと思います。
大企業もCIでやることはだいたいかわらないけど、実機数十台用意してそこにデプロイしてテストするとこは大企業だなと感じました。</p>

<ul>
<li>Frank</li>
<li><p><a href="http://www.testingwithfrank.com/">http://www.testingwithfrank.com/</a></p></li>
<li><p>fruitstrap</p>

<ul>
<li><a href="https://github.com/ghughes/fruitstrap">https://github.com/ghughes/fruitstrap</a></li>
<li><code>This project is no longer maintained.</code>が気になりました。。。</li>
</ul>
</li>
<li><p>Instruments</p>

<ul>
<li>Xcodeに付属しているプロファイラツール</li>
<li>どの処理・メソッドが遅いのか、どこでメモリを消費しているのか調査する</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Confrence With Developer2に参加してLTしてきた]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/02/02/conference-with-developers-2014/"/>
    <updated>2014-02-02T23:32:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/02/02/conference-with-developers-2014</id>
    <content type="html"><![CDATA[<p>今回、Confrence With Developer2に参加してきました。
iOSに携わる、すべての開発者に向けたカンファレンスイベントだったのですが
いろいろ収穫があり、たくさん勉強させていただきました。</p>

<p>そんな僕もここでLTをしてきたのでのせときます。以前は、MA9でも発表している
ですがあくまでプロダクトとして発表だったのと今回は技術的なカンファレンス
なので技術的側面に焦点をあてて発表させていただきました。</p>

<p>話した内容はアプリでがんがん利用していた<code>AV Foundation</code>の話をしてきました。</p>

<script async class="speakerdeck-embed" data-id="ebaab3406d820131c6665e5071095c76" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>(発表時にディスプレイコネクタが認識しなくて発狂していたところ<code>@tamotamago</code>さんにパソコンを貸していただき大変感謝です！)</p>

<p>自分でもいろいろとメモっていたのですが以下のサイトがよく纏められていたのでご参照ください。</p>

<h3>Developers.IO</h3>

<ul>
<li><a href="http://dev.classmethod.jp/smartphone/ios-confwd2/">http://dev.classmethod.jp/smartphone/ios-confwd2/</a></li>
</ul>


<h3>Togetter</h3>

<ul>
<li><a href="http://togetter.com/li/623779">http://togetter.com/li/623779</a></li>
</ul>


<h3>Ustream録画</h3>

<ul>
<li><a href="http://www.ustream.tv/recorded/43319245">http://www.ustream.tv/recorded/43319245</a></li>
<li><a href="http://www.ustream.tv/recorded/43323576">http://www.ustream.tv/recorded/43323576</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVMutableVideoCompositionLayerInstructionの使い方]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/01/19/how-to-avmutablevideocompositionlayerinstruction/"/>
    <updated>2014-01-19T19:32:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/01/19/how-to-avmutablevideocompositionlayerinstruction</id>
    <content type="html"><![CDATA[<p>ビデオ用の<code>AVMutableCompositionTrack</code>にレイヤーを持たせることができます。
それが<code>AVMutableVideoCompositionLayerInstruction</code>なんですがこれが意外と
簡単に動画に対して<code>CGAffineTransform</code>を指定することで動画の移動・回転・拡大縮小
ができたりフェードイン・アウトの設定ができたのでメモ。</p>

<p>まずは対象のトラックをもとにして、レイヤーをインスタンス化します。</p>

<p><code>+ (AVMutableVideoCompositionLayerInstruction *)videoCompositionLayerInstructionWithAssetTrack:(AVAssetTrack *)track</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVMutableVideoCompositionLayerInstruction</span> <span class="o">*</span><span class="n">layerInstruction</span><span class="p">;</span>
</span><span class='line'><span class="n">layerInstruction</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableVideoCompositionLayerInstruction</span>
</span><span class='line'>                    <span class="nl">videoCompositionLayerInstructionWithAssetTrack:</span><span class="n">compositionVideoTrack</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>TransForm</h3>

<p><code>- (void)setTransformRampFromStartTransform:(CGAffineTransform)startTransform toEndTransform:(CGAffineTransform)endTransform timeRange:(CMTimeRange)timeRange</code></p>

<p>この例だと、３秒間左から動画が移動してきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// transition</span>
</span><span class='line'><span class="n">CGAffineTransform</span> <span class="n">rotateStart</span><span class="p">,</span> <span class="n">rotateEnd</span><span class="p">;</span>
</span><span class='line'><span class="n">startTime</span>    <span class="o">=</span> <span class="n">kCMTimeZero</span><span class="p">;</span>
</span><span class='line'><span class="n">timeDuration</span> <span class="o">=</span> <span class="n">CMTimeMake</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">rotateStart</span>  <span class="o">=</span> <span class="n">CGAffineTransformMakeScale</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">rotateStart</span>  <span class="o">=</span> <span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="o">-</span><span class="mi">720</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">rotateEnd</span>    <span class="o">=</span> <span class="n">CGAffineTransformTranslate</span><span class="p">(</span><span class="n">rotateStart</span><span class="p">,</span> <span class="mi">720</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">layerInstruction</span> <span class="nl">setTransformRampFromStartTransform:</span><span class="n">rotateStart</span>
</span><span class='line'>                                      <span class="nl">toEndTransform:</span><span class="n">rotateEnd</span>
</span><span class='line'>                                           <span class="nl">timeRange:</span><span class="n">CMTimeRangeMake</span><span class="p">(</span><span class="n">startTime</span><span class="p">,</span> <span class="n">timeDuration</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Opacity</h3>

<p><code>- (void)setOpacityRampFromStartOpacity:(float)startOpacity toEndOpacity:(float)endOpacity timeRange:(CMTimeRange)timeRange</code></p>

<p>この例だと最初から３秒間動画がフェードインしてきて最後の３秒間動画をフェードアウトします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// fade in</span>
</span><span class='line'><span class="n">CMTime</span> <span class="n">startTime</span><span class="p">,</span> <span class="n">timeDuration</span><span class="p">;</span>
</span><span class='line'><span class="n">startTime</span>    <span class="o">=</span> <span class="n">kCMTimeZero</span><span class="p">;</span>
</span><span class='line'><span class="n">timeDuration</span> <span class="o">=</span> <span class="n">CMTimeMake</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">layerInstruction</span> <span class="nl">setOpacityRampFromStartOpacity:</span><span class="mf">0.0</span>
</span><span class='line'>                                    <span class="nl">toEndOpacity:</span><span class="mf">1.0</span>
</span><span class='line'>                                       <span class="nl">timeRange:</span><span class="n">CMTimeRangeMake</span><span class="p">(</span><span class="n">startTime</span><span class="p">,</span> <span class="n">timeDuration</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// fade out</span>
</span><span class='line'><span class="n">startTime</span>    <span class="o">=</span> <span class="n">CMTimeSubtract</span><span class="p">(</span><span class="n">videoComposition</span><span class="p">.</span><span class="n">currentTimeDuration</span><span class="p">,</span> <span class="n">CMTimeMake</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="n">timeDuration</span> <span class="o">=</span> <span class="n">CMTimeMake</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">layerInstruction</span> <span class="nl">setOpacityRampFromStartOpacity:</span><span class="mf">1.0</span>
</span><span class='line'>                                    <span class="nl">toEndOpacity:</span><span class="mf">0.0</span>
</span><span class='line'>                                       <span class="nl">timeRange:</span><span class="n">CMTimeRangeMake</span><span class="p">(</span><span class="n">startTime</span><span class="p">,</span> <span class="n">timeDuration</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>Appleのドキュメントでこのクラスの説明をみると動画処理にしては結構シンプルだったので何個か試してみたのでした。
ただ、<code>CMTime</code>関連・<code>CGAffineTransform</code>関連の知識はないと結構何がなんだかわからなくなるのであらかじめ知識として
蓄えておくことはは必須ですね。</p>

<h2>Ref</h2>

<p><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVMutableVideoCompositionLayerInstruction_Class/Reference/Reference.html#//apple_ref/occ/instm/AVMutableVideoCompositionLayerInstruction/setTransformRampFromStartTransform:toEndTransform:timeRange:">https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVMutableVideoCompositionLayerInstruction_Class/Reference/Reference.html#//apple_ref/occ/instm/AVMutableVideoCompositionLayerInstruction/setTransformRampFromStartTransform:toEndTransform:timeRange:</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[動画関連の処理をする上で注意すること]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/01/19/avfoundation-checkpoint/"/>
    <updated>2014-01-19T19:32:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/01/19/avfoundation-checkpoint</id>
    <content type="html"><![CDATA[<p>以前の記事でも書いたのですが、<a href="https://itunes.apple.com/jp/app/the-ghost-movie-app-look-again/id696530211?mt=8">心霊動画アプリ「もう一度ご覧いただこう」</a>というアプリを作成したときにいろいろと苦労したことがあったので、それを書き留めておこうと思います。</p>

<h3>回転問題</h3>

<p>そのまま動画を保存すると270度になってしまっているので回転する必要があった</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CGAffineTransform transformVideo       = CGAffineTransformMakeTranslation(videoTrack.naturalSize.height, 0.0);
</span><span class='line'>CGAffineTransform transformVideoRotate = CGAffineTransformRotate(transformVideo, M_PI * 0.5);
</span><span class='line'>CGAffineTransform transformVideoMove   = CGAffineTransformTranslate(transformVideoRotate, -300, 0);
</span><span class='line'>[layerInstruction setTransform: transformVideoMove atTime:kCMTimeZero];</span></code></pre></td></tr></table></div></figure>


<p>結構、簡単で地味なことだったのですが、こういうことが原因で数日迷走していた日があったのでもう迷走しない為に。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy New Year]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/01/02/happy-new-year/"/>
    <updated>2014-01-02T20:22:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/01/02/happy-new-year</id>
    <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>時が経つが年々早くなるのがだんだんと早く感じる今日この頃ですが、去年は自分がもう
３０年も生きたことになり、仕事にプライベートに考えさせられる一年だったと思います。</p>

<p>いかがおすごしでしょうか。
nakajijapanです。</p>

<p>去年を振り返ってみると、とにかく自分の可能性を信じつつ自分が未開拓な領域
をガンガン攻めた年ではありました。しかし、まだスタート地点に立ったところ
というか物足りないと感じてる次第です。もっとイケル！</p>

<p>殻を打ち破る日はまだ分からないですが、あきらめず自分のケツを叩きながら
一歩づつ前に突き進んでいこうと思います。</p>

<p>今年も仕事にプライベートにがんばるぞ！</p>

<p>今年もよろしくお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS勉強会 iBeaconでできること　に参加してきた]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/12/12/study-ibeacon/"/>
    <updated>2013-12-12T19:06:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/12/12/study-ibeacon</id>
    <content type="html"><![CDATA[<p>Developer&rsquo;s IOさんが主催する勉強会に参加してきました。
<a href="http://connpass.com/event/4225/">http://connpass.com/event/4225/</a></p>

<p>iOS7の発表がでてから<code>iBeacon</code>に興味を持ち出して、このにゅ〜てくのろじ〜を面白いことにつかえないかと調査していたのですが、今回もっと知識を深めるべく勉強会にさんかしてきました。そのメモを残しておこうと思います。</p>

<h1>【初級】iBeaconの基礎のキ</h1>

<p>開発者以外にひとでも分かるようにiBeaconというものをざっくり説明してました。</p>

<h2>iBeaconとは</h2>

<ul>
<li>BLEを利用している</li>
<li>Bluetooth onにしないといけない</li>
<li>CoreLocation.framework</li>
<li>iOS7がインストールされるからってBLEが利用されるわけではない

<ul>
<li>iOS7 + BLEが利用できるっていうのが重要</li>
</ul>
</li>
</ul>


<p>ざっくり定義すると</p>

<p><code>BLEを利用したAppleの距離と領域観測のサービス</code></p>

<p>です。</p>

<h2>利用したサービス</h2>

<ul>
<li>AppleStore

<ul>
<li>テーブルに近づくとiPhoneの紹介や下取りの情報が表示される</li>
</ul>
</li>
<li>Macy&rsquo;s

<ul>
<li>入店検知してクーポンの取得、おすすめ商品の紹介</li>
<li>O2O施策としてだいぶ確率されているようです</li>
</ul>
</li>
<li>スマポ

<ul>
<li>来店ポイントがたまる</li>
<li>日本でしっかりベジネスにしているサービスですね</li>
</ul>
</li>
<li>MLB

<ul>
<li>入場用のバーコード</li>
<li>point</li>
<li>クーポン</li>
<li>本日の対戦情報を表示してくれる</li>
<li>自分の座席情報を教えてくれる</li>
<li>とはいえ、現在まだベータ運用しているらしく、本番運用はまだのようですね</li>
</ul>
</li>
</ul>


<h2>よく利用される用語</h2>

<ul>
<li>Beacon

<ul>
<li>電子情報を受信して現在情報を知る電子機器のことをいうらしい

<ul>
<li><a href="http://e-words.jp/w/E38393E383BCE382B3E383B3.html">http://e-words.jp/w/E38393E383BCE382B3E383B3.html</a></li>
</ul>
</li>
</ul>
</li>
<li>BLE

<ul>
<li>2.4GHz の無線を使った近距離無線通信規格</li>
<li>少ない電池でもいままでよりも長くバッテリーが持つようにつくられている</li>
</ul>
</li>
<li>Advertise

<ul>
<li>アドバタイズ：ある機器が別の機器に管理情報を伝達すること</li>
<li>proximity UUID（企業）</li>
<li>major（建物）</li>
<li>minor（フロア）</li>
</ul>
</li>
<li>リージョン監視

<ul>
<li>領域の入出チェック（虜域観測）</li>
<li>リージョン=UUID</li>
<li>出るイベントはドキュメント情報は２０秒っぽいが実際は３０秒かかるっぽい</li>
</ul>
</li>
<li>Ranging

<ul>
<li>エリア内のBeaconの情報を取得（距離推定）</li>
<li>Beacon距離

<ul>
<li>proximity

<ul>
<li>距離判定は４つとれる</li>
<li>相対的に変わる</li>
</ul>
</li>
<li>accuracy

<ul>
<li>位置情報取得の精度を指定</li>
<li>もちろん精度が良いほど正確だが電池の量も多い</li>
<li>領域はだいたいのもの</li>
</ul>
</li>
<li>rssi

<ul>
<li>Received Signal Strength Indication</li>
<li>無線通信機器が受信する信号の強度を測定するための回路または信号</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>電波法！！！！

<ul>
<li>技適マークがついていない無線機は電波法違反らしい</li>
<li>estimoteのビーコン端末は日本実運用すると電波法違反になるぽいですね</li>
</ul>
</li>
</ul>


<h2>iBeaconを使ってみよう</h2>

<p>iBeaconアプリの作り方を二つのキーワードで説明しています。
以下の二つをもとに実装を行っていく</p>

<ul>
<li>距離観測（Ranging）

<ul>
<li>各Beaconとの距離を約１秒おきに監視する</li>
<li>それぞれの領域をみる</li>
</ul>
</li>
<li><p>領域観測のた仕様</p>

<ul>
<li>Beaconグループで作成される領域</li>
</ul>
</li>
<li><p>uuidgen
ビーコン端末に固有のID振らないといけないのでコマンドを利用して生成したりできます</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ uuidgen
</span><span class='line'>8649794A-0C6C-4D82-99F2-7084D6C231B1</span></code></pre></td></tr></table></div></figure>


<h1>Beaconアプリの作り方</h1>

<p>具体的にコードレベルでどんな風に作成されるのか、ハマりどころを説明していただきました。</p>

<ul>
<li>具体的に実装がでてきたコード

<ul>
<li><a href="https://github.com/suwa-yuki/BeaconSample">https://github.com/suwa-yuki/BeaconSample</a></li>
</ul>
</li>
<li>ハマりどころ

<ul>
<li>startMonitoringForRegionはバックグラウンドおk</li>
</ul>
</li>
</ul>


<h1>LTで話されたことメモ</h1>

<ul>
<li>Androidでの確認はほぼできない

<ul>
<li>Nexus5だと大丈夫</li>
<li>あとは海外の端末を輸入する</li>
<li>iPhoneは無論OK</li>
</ul>
</li>
</ul>


<h1>まとめ</h1>

<p>今回はiBeaconを使って開発する為の基本知識をベースとした勉強会でたくさん学ばしていいただきました。
まだまだ勉強不足なところはあるけれど、今回の勉強会でだいぶもやもやしていたところが解消したので次の開発に活かそうと思います。
しかし、つい先日estimoteのbeacon端末を購入したのですが技適マークがついていないのは残念です。。。ビジネスで
利用するとしたらまた別の端末（日本の電波法に準拠したハード製品）を購入してやらないとだめですね。。。</p>

<h1>参考スライド</h1>

<p><a href="http://www.slideshare.net/RikitakeOohashi/i-beacon-29135007">http://www.slideshare.net/RikitakeOohashi/i-beacon-29135007</a>
<a href="http://www.slideshare.net/yuki0211s/i-beacon-29135560">http://www.slideshare.net/yuki0211s/i-beacon-29135560</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AV Foundation Frameworkを利用して動画の結合を行う]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/10/22/how-to-combine-some-movies-with-avfoundation/"/>
    <updated>2013-10-22T19:06:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/10/22/how-to-combine-some-movies-with-avfoundation</id>
    <content type="html"><![CDATA[<p>こんにちはあのnakajijapanです。 以前、心霊動画アプリで「もう一度ご覧いただこう」 というアプリをリリースしました。 心霊動画アプリなので動画と動画を結合したり動画の上に動画を重ねて実装したりといろいろ やるわけですが今回はじめてということもあり沢山勉強になったのでここいらで自分の頭の整理 がてら情報をまためようと思います。</p>

<p>今回主に利用したのが「AV Foundation」です。</p>

<p>ざっくりいうとメディア情報（動画）を細かく制御できるようにしたフレームワークで、メタ情報の 取得、作成、編集、再エンコードができたりできます。</p>

<p>階層的には以下のような階層に存在して、簡単に動画とか写真の処理をしたい場合は</p>

<ul>
<li>Media Player Framework(MPMoviePlayerController, MPMoviePlayerViewController)</li>
<li>UIKit(UIIMagePickerController)</li>
</ul>


<p>を実装すれば難なく実装できちゃいます。ただ、今回は動画にいろんなエフェクトをいれたいのでもっと細かく制御 できる下の階層のフレームワークを使いました。感覚的に細かい制御できるようになるのでそのぶん面倒くさいのは いうまでもありません。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-10-22_01.png" alt="layer" /></p>

<p><a href="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html">https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html</a></p>

<p>では実際にどう実装していけばいいかなのですが、そのために結構なクラスを利用するのでそれぞれざっくり説明していきます。</p>

<h3>AVAsset</h3>

<p>iPodや写真ライブラリのメディア情報をオブジェクトとして保持することができ、これからいろんなの情報を切り出して取得すること ができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVAsset</span><span class="o">*</span>                   <span class="n">videoAsset</span><span class="p">;</span>
</span><span class='line'><span class="n">videoAsset</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVURLAsset</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="n">movieUrl</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AVAssetTrack</h3>

<p>アセットの情報からトラックレベルで切り出した情報。（うまく翻訳できなかった・・・） 例えば、アセットから動画と音声に切り分ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVAsset</span><span class="o">*</span>                   <span class="n">videoAsset</span><span class="p">;</span>
</span><span class='line'><span class="n">AVAssetTrack</span><span class="o">*</span>              <span class="n">videoTrack</span><span class="p">;</span>
</span><span class='line'><span class="n">AVAssetTrack</span><span class="o">*</span>              <span class="n">audioTrack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">videoAsset</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVURLAsset</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="n">movieUrl</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// アセットからトラックを取得</span>
</span><span class='line'><span class="n">videoTrack</span> <span class="o">=</span> <span class="p">[[</span><span class="n">videoAsset</span> <span class="nl">tracksWithMediaType:</span><span class="n">AVMediaTypeVideo</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">audioTrack</span> <span class="o">=</span> <span class="p">[[</span><span class="n">videoAsset</span> <span class="nl">tracksWithMediaType:</span><span class="n">AVMediaTypeAudio</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AVMutableCompositionTrack</h3>

<p>様々なメディア情報を結合したものです。このクラスで様々に編集された動画や音声を結合したり、時間の制御をしたり するクラスです。最終的にAVAssetExportSessionに渡してエキスポート処理（実際にファイルに保存する）します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVMutableComposition</span><span class="o">*</span>      <span class="n">mixComposition</span><span class="p">;</span>
</span><span class='line'><span class="n">AVMutableCompositionTrack</span><span class="o">*</span> <span class="n">compositionVideoTrack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// コンポジション作成</span>
</span><span class='line'><span class="n">mixComposition</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableComposition</span> <span class="n">composition</span><span class="p">];</span>
</span><span class='line'><span class="n">compositionVideoTrack</span> <span class="o">=</span> <span class="p">[</span><span class="n">mixComposition</span> <span class="nl">addMutableTrackWithMediaType:</span><span class="n">AVMediaTypeVideo</span> <span class="nl">preferredTrackID:</span><span class="n">kCMPersistentTrackID_Invalid</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AVMutableVideoComposition</h3>

<p>AVMutableCompositionで新しいトラックを追加したときに返り値としてとれるもです。追加されたオブジェクトの参照で空のトラックって感じなんでしょうか。 ここに実際のメディア情報を入れていきます。メディアタイプで動画とか音声とか格納することができます。あと、この動画の何秒 から何秒間を何秒目に結合させるとかできたりします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">compositionVideoTrack</span> <span class="o">=</span> <span class="p">[</span><span class="n">mixComposition</span> <span class="nl">addMutableTrackWithMediaType:</span><span class="n">AVMediaTypeVideo</span> <span class="nl">preferredTrackID:</span><span class="n">kCMPersistentTrackID_Invalid</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">compositionVideoTrack</span> <span class="nl">insertTimeRange:</span><span class="n">CMTimeRangeMake</span><span class="p">(</span><span class="n">kCMTimeZero</span><span class="p">,</span> <span class="n">timeDuration</span><span class="p">)</span>
</span><span class='line'>                               <span class="nl">ofTrack:</span><span class="n">_videoTrack</span>
</span><span class='line'>                                <span class="nl">atTime:</span><span class="n">kCMTimeZero</span>
</span><span class='line'>                                 <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">compositionVideoTrack</span> <span class="nl">setPreferredTransform:</span><span class="p">[</span><span class="n">videoTrack</span> <span class="n">preferredTransform</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AVMutableVideoCompositionLayerInstruction</h3>

<p>アセットのトラックに対して回転、透過度、クロッピングができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// ここでは動画を小さくして指定の位置へ移動させてます。</span>
</span><span class='line'><span class="n">CGAffineTransform</span> <span class="n">scale</span>      <span class="o">=</span> <span class="n">CGAffineTransformMakeScale</span><span class="p">(</span><span class="mf">0.30f</span><span class="p">,</span> <span class="mf">0.30f</span><span class="p">);</span>
</span><span class='line'><span class="n">CGAffineTransform</span> <span class="n">trnsration</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">406</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">AVMutableVideoCompositionLayerInstruction</span><span class="o">*</span> <span class="n">_layerInstruction</span><span class="p">;</span>
</span><span class='line'><span class="n">_layerInstruction</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableVideoCompositionLayerInstruction</span> <span class="nl">videoCompositionLayerInstructionWithAssetTrack:</span><span class="n">_compositionVideoTrack</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">_layerInstruction</span> <span class="nl">setTransform:</span><span class="n">CGAffineTransformConcat</span><span class="p">(</span><span class="n">scale</span><span class="p">,</span> <span class="n">trnsration</span><span class="p">)</span> <span class="nl">atTime:</span><span class="n">kCMTimeZero</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>AVAssetExportSession</h3>

<p>さまざまなアセット情報を利用して指定されたフォーマットに変換したり動画のトリミングを行います。 例えば、mov形式、720x720サイズでファイルに保存させたりで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">videoComp</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableVideoComposition</span> <span class="n">videoComposition</span><span class="p">];</span>
</span><span class='line'><span class="n">videoComp</span><span class="p">.</span><span class="n">renderSize</span>    <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">720</span><span class="p">,</span> <span class="mi">720</span><span class="p">);</span>
</span><span class='line'><span class="n">videoComp</span><span class="p">.</span><span class="n">frameDuration</span> <span class="o">=</span> <span class="n">CMTimeMake</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span> <span class="c1">// framerate</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// AVCompositionをベースにAVAssetExportを生成</span>
</span><span class='line'><span class="n">assetExportSession</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVAssetExportSession</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAsset:</span><span class="n">mixComposition</span> <span class="nl">presetName:</span><span class="n">AVAssetExportPreset1280x720</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 合成用のVideoCompositionを設定</span>
</span><span class='line'><span class="n">assetExportSession</span><span class="p">.</span><span class="n">videoComposition</span> <span class="o">=</span> <span class="n">videoComp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// エクスポートファイルの設定</span>
</span><span class='line'><span class="n">NSURL</span> <span class="o">*</span><span class="n">composedMovieUrl</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">fileURLWithPath:</span><span class="n">composedMoviePath</span><span class="p">];</span>
</span><span class='line'><span class="n">assetExportSession</span><span class="p">.</span><span class="n">outputFileType</span> <span class="o">=</span> <span class="n">AVFileTypeQuickTimeMovie</span><span class="p">;</span>
</span><span class='line'><span class="n">assetExportSession</span><span class="p">.</span><span class="n">outputURL</span> <span class="o">=</span> <span class="n">composedMovieUrl</span><span class="p">;</span>
</span><span class='line'><span class="n">assetExportSession</span><span class="p">.</span><span class="n">shouldOptimizeForNetworkUse</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// エキスポート処理</span>
</span><span class='line'><span class="p">[</span><span class="n">assetExportSession</span> <span class="nl">exportAsynchronouslyWithCompletionHandler:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">([</span><span class="n">exportSession</span> <span class="n">status</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">AVAssetExportSessionStatusFailed:</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Export failed: %@&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">exportSession</span> <span class="n">error</span><span class="p">]</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">AVAssetExportSessionStatusCancelled:</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Export canceled&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>主に利用するクラスを説明しました。これらを駆使して実装すれば簡単な動画の結合ができるようになります。</p>

<p>だいたいの大枠は以下の図を見ると何となくわかるかもしれませんね。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-10-22_02.png" alt="layer" /></p>

<p><a href="https://developer.apple.com/library/ios/DOCUMENTATION/AudioVideo/Conceptual/AVFoundationPG/Articles/03_Editing.html">https://developer.apple.com/library/ios/DOCUMENTATION/AudioVideo/Conceptual/AVFoundationPG/Articles/03_Editing.html</a></p>

<h2>まとめ</h2>

<p>どうでしょう。ざっくりとですが動画を結合するのに必要なクラスの説明とどのように実装されていくのかをざっくり 説明しました。本当に最初の方は？？？となってしまうと思いますが実装していくうちに分かってくるようになります。 あとこれ系の情報はあんまりネット上にはないのでしっかりと学びたいもっと動画カスタマイズしたという人がいれば やはり<code>AV Foundation Programming Guide</code>をじっくり読むのが最短だししっかり理解できるとおもいました。あと困った ことがあったら <a href="http://stackoverflow.com/">http://stackoverflow.com/</a> で同じ人が困っているかもしれないのでみるといいです。</p>

<p>応用編としては動画をスローモーションにさせたり、ワイプのような動画を作成したり、画像をアニメーションさせたりと いろいろありますが説明していこうと思います。というか時間がたったら忘れそうな知識なのでやります。。。</p>

<h2>Reference</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/AVFoundationPG.pdf">AV Foundation Programming Guide</a></li>
<li><a href="https://developer.apple.com/wwdc/videos/">Moving to AV Kit and AV Foundation – 606</a></li>
<li><a href="https://developer.apple.com/wwdc/videos/">Core Image Effects and Techniques – 509</a></li>
<li><a href="https://developer.apple.com/wwdc/videos/">Advanced Editing with AV Foundation – 612</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[心霊動画アプリ 「もう一度ご覧いただこう」をリリースしました。]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/09/30/released-iphone-app-ghost-movie/"/>
    <updated>2013-09-30T02:17:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/09/30/released-iphone-app-ghost-movie</id>
    <content type="html"><![CDATA[<p><img src="http://a1745.phobos.apple.com/us/r30/Purple6/v4/88/a2/77/88a27754-3407-af16-2c8d-2bfec9c508f0/mzl.llawgtne.png" alt="心霊動画アプリ もう一度ご覧いただこう" /></p>

<p><a href="https://itunes.apple.com/jp/app/the-ghost-movie-app-look-again/id696530211?mt=8" target="_blank"><img src="http://nakajijapan.github.io/images/apple_store.png" /></a></p>

<p>先日ではありますがnakajijapan所属するチーム「恥知らず」で次なるアプリをリリースしました。
その名も</p>

<h3>心霊動画アプリ 「もう一度ご覧いただこう」</h3>

<p><a href="http://owkr.info/movie">http://owkr.info/movie</a></p>

<p>です。</p>

<p>構想は３年前からあったのですが僕の技術力不足で無理！とか言って、最初はその前進となる</p>

<h3>心霊写真アプリ「おわかりいただけただろうか」</h3>

<p><a href="http://owkr.info">http://owkr.info</a></p>

<p>を作成しました。その後時を経て、そろそろできるんじゃねという根拠ない自信がありまして
作成するにいたった次第です。今回はそのリリースが出来ましたよっていうご報告であります！</p>

<p>今回動画アプリを作成してみて、自分としてグッドっだったのは</p>

<ul>
<li>AVFoundationガリガリガリガリいじったし（未知の領域への挑戦）

<ul>
<li>動画動詞の結合</li>
<li>動画内でのアニメーション</li>
<li>動画のスローモーション</li>
<li>動画内に動画をいれる（ワイプ）</li>
</ul>
</li>
<li>いろんなTips学んだ

<ul>
<li>シュミレータで効率的に開発していく方法</li>
<li>iOSのバージョンのデザインの差異（主に位置によるずれ）の直し方</li>
</ul>
</li>
<li>キャンペーンの出し方

<ul>
<li>以前にリリースアプリと連携デザインに統一感をもたせた</li>
</ul>
</li>
</ul>


<p>失敗や改善した方がいいなというのも何個かあって</p>

<p>iOS7でチェックしとけばよかった。しかもガンガンみんなiOS7にしてしまったのでこれはつらかった・・
iOS7でテストして仮に問題が発生したときにその対応でリリースが遅れるのは避けたかったのでちょっと
最後まで避けてたのが仇となりました。無念。やりかたとしては、新しいバージョンがリリース間近に
なった場合はかならず確認を行うことをマストにしたほうがいいですね。これ勉強！</p>

<p>リリースタイミングを逃しました。本当は夏にリリースすれば良かったのですが僕の技術力不足であえなく断念して
しまいました。。。</p>

<p>あとは、デザイナの確認作業についてです。デザイナにはある程度できあがらないとテストや確認出来ない状態でしたし、
毎回自分のPCでビルドして渡すのはかなり面倒でした。（のでこの作業はほとんどやってない・・・）なので自分が修正
したらすぐに自分の実機やシミュレータでがんがん確認出来るような状況を作ればなと思っていました。会社だとjenkins
でビルドしてそれをダウンロードできる基盤があるのでそれ参考に個人でも作成してみようと思う。</p>

<p>肝心のiOS7でのおばけが表示されないバグがありますが先日修正したものを申請しましたのでもう少しでiOS7にした人も
使えることでしょう！！</p>

<p>とりあえず、リリースできてよかったのです。</p>

<p>また、いろんなことに挑戦していきたい。</p>

<p>今後はもう一度の使い方なり、AVFoundationのTipsをちょこちょこ書いていこうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIButtonのカスタマイズ - ライトON/OFFを制御するボタンを作成してみた]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/09/18/customize-uibutton/"/>
    <updated>2013-09-18T20:19:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/09/18/customize-uibutton</id>
    <content type="html"><![CDATA[<p>iPhoneについているライトのON/OFFを制御したいのですが、ボタンをそのまま流量できるのかなと思いきや
UIImagePickerControllerを利用しないで実装する場合はイベントしか用意されておらずデザインも自分で実装
しないといけないようです。</p>

<p>なので自分なりにそれっぽいのを実装してみました。
（とりあえず手動でon/offで切り替えるUIにしてます）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// ライトが利用できたら表示</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">device</span><span class="p">.</span><span class="n">torchAvailable</span> <span class="o">==</span> <span class="n">YES</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIButton</span><span class="o">*</span> <span class="n">toggleLightButton</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIButton</span> <span class="nl">buttonWithType:</span><span class="n">UIButtonTypeCustom</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toggleLightButton</span> <span class="nl">setFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">55</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toggleLightButton</span> <span class="nl">setTitle:</span><span class="s">@&quot;ON&quot;</span> <span class="nl">forState:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// レイヤー内でボタンデザインの編集を行う</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setCornerRadius:</span><span class="mf">25.0f</span><span class="p">];</span><span class="c1">// 角丸</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setMasksToBounds:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBorderWidth:</span><span class="mf">2.5f</span><span class="p">];</span><span class="c1">// 枠線の太さ</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBorderColor:</span><span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">1.0</span> <span class="nl">green:</span><span class="mf">1.0</span> <span class="nl">blue:</span><span class="mf">1.0</span> <span class="nl">alpha:</span><span class="mf">0.7</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]];</span><span class="c1">// 枠線の色</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBackgroundColor:</span><span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">1.0</span> <span class="nl">green:</span><span class="mf">1.0</span> <span class="nl">blue:</span><span class="mf">1.0</span> <span class="nl">alpha:</span><span class="mf">0.3</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]];</span><span class="c1">// 背景色</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toggleLightButton</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">toggleChangeTorchMode:</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 画像を左側に埋め込む</span>
</span><span class='line'>    <span class="n">UIImage</span><span class="o">*</span> <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;light.png&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CALayer</span><span class="o">*</span> <span class="n">imgLayer</span> <span class="o">=</span> <span class="p">[</span><span class="n">CALayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>    <span class="n">imgLayer</span><span class="p">.</span><span class="n">contents</span> <span class="o">=</span> <span class="n">CFBridgingRelease</span><span class="p">([</span><span class="n">image</span> <span class="n">CGImage</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">imgLayer</span><span class="p">.</span><span class="n">frame</span>    <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toggleLightButton</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer:</span><span class="n">imgLayer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 文字列のpaddingを設定する</span>
</span><span class='line'>    <span class="n">UIEdgeInsets</span> <span class="n">insets</span> <span class="o">=</span> <span class="n">toggleLightButton</span><span class="p">.</span><span class="n">contentEdgeInsets</span><span class="p">;</span>
</span><span class='line'>    <span class="n">insets</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="mf">20.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">toggleLightButton</span><span class="p">.</span><span class="n">contentEdgeInsets</span> <span class="o">=</span> <span class="n">insets</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">toggleLightButton</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際できたのがこんな感じ。
なんかそれっぽくできました。（アイコンは当てなのであしからず）</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-09-18_01.png" alt="ss" /></p>

<p>基本は<code>CALayer</code>でデザインの修正をおこなう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'>    <span class="c1">// レイヤー内でボタンデザインの編集を行う</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setCornerRadius:</span><span class="mf">25.0f</span><span class="p">];</span><span class="c1">// 角丸</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setMasksToBounds:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBorderWidth:</span><span class="mf">2.5f</span><span class="p">];</span><span class="c1">// 枠線の太さ</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBorderColor:</span><span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">1.0</span> <span class="nl">green:</span><span class="mf">1.0</span> <span class="nl">blue:</span><span class="mf">1.0</span> <span class="nl">alpha:</span><span class="mf">0.7</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]];</span><span class="c1">// 枠線の色</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBackgroundColor:</span><span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">1.0</span> <span class="nl">green:</span><span class="mf">1.0</span> <span class="nl">blue:</span><span class="mf">1.0</span> <span class="nl">alpha:</span><span class="mf">0.3</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]];</span><span class="c1">// 背景色</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toggleLightButton</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">toggleChangeTorchMode:</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>画像を組み込んだ場合は文字と被るといけないので文字の表示位置をずらします。
XIBの場合はIBの左側のメニューで設定できるのですが、それを実装で行うときは<code>UIEdgeInsets</code>クラスを
利用します。CSSのイメージでいうとpaddingをイメージして設定すると想像できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'>    <span class="c1">// 文字列のpaddingを設定する</span>
</span><span class='line'>    <span class="n">UIEdgeInsets</span> <span class="n">insets</span> <span class="o">=</span> <span class="n">toggleLightButton</span><span class="p">.</span><span class="n">contentEdgeInsets</span><span class="p">;</span>
</span><span class='line'>    <span class="n">insets</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="mf">20.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">toggleLightButton</span><span class="p">.</span><span class="n">contentEdgeInsets</span> <span class="o">=</span> <span class="n">insets</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>UIButton</code>でいろいろカスタマイズしてみました。ほとんどはUIViewを親にもっていて、そのなかにCALayerをもっているのです。
そのCALayerをうまく使ってデザインすればいい感じにカスタマイズができますよって話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIKitで人魂つくってみた]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/09/07/create-hitodama-with-uikit/"/>
    <updated>2013-09-07T07:42:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/09/07/create-hitodama-with-uikit</id>
    <content type="html"><![CDATA[<p>お化けアプリを絶賛作成中なのですが、そのなかで世界観を少しでも作るべくいろいろ試行錯誤しているのですが、ちょっとトップに
人魂でもいれてみようじゃないかと思い立って作ってみました。</p>

<p>iOS5からCore AnimationなるものがサポートされていてパーティクルエフェクトがUIKitでも作成できるようになったので実装してみました。
以前はCocos2Dのフレームワーク情報で作成していたのですがそれを利用しないのは初めて。</p>

<p>まずはフレームワークをインポートする</p>

<h2>1</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;QuartzCore/QuartzCore.h&gt;</span></code></pre></td></tr></table></div></figure>


<h2>2</h2>

<p>あとは表現したものを想像して実装するのみ！！！！っていってもパラメータが沢山あるので
感覚的にGUIで設定できてその状態のパラメータをみれるツールをつかいました。</p>

<ul>
<li>UIEffectDesigner

<ul>
<li><a href="http://www.touch-code-magazine.com/uieffectdesigner/">http://www.touch-code-magazine.com/uieffectdesigner/</a></li>
</ul>
</li>
</ul>


<p>これにfire ballっていのがあったのでそれを参考にしつつ自分なりに調整してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CAEmitterLayer</span><span class="o">*</span> <span class="n">fireEmitter</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAEmitterLayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>    <span class="n">fireEmitter</span><span class="p">.</span><span class="n">emitterPosition</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fireEmitter</span><span class="p">.</span><span class="n">emitterSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fireEmitter</span><span class="p">.</span><span class="n">renderMode</span> <span class="o">=</span> <span class="n">kCAEmitterLayerAdditive</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CAEmitterCell</span><span class="o">*</span> <span class="n">fire</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAEmitterCell</span> <span class="n">emitterCell</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">birthRate</span>     <span class="o">=</span> <span class="mi">250</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">lifetime</span>      <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">lifetimeRange</span> <span class="o">=</span> <span class="mf">2.06</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">velocity</span>      <span class="o">=</span> <span class="mi">26</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">velocityRange</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">color</span>         <span class="o">=</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">0.0</span> <span class="nl">green:</span><span class="mf">0.0</span> <span class="nl">blue:</span><span class="mf">0.05</span> <span class="nl">alpha:</span><span class="mf">1.0</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">redRange</span>      <span class="o">=</span> <span class="mf">0.12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">greenRange</span>    <span class="o">=</span> <span class="mf">0.12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">blueRange</span>     <span class="o">=</span> <span class="mf">0.12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">contents</span>      <span class="o">=</span> <span class="p">(</span><span class="kt">id</span><span class="p">)[[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;particle.png&quot;</span><span class="p">]</span> <span class="n">CGImage</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">fire</span> <span class="nl">setName:</span><span class="s">@&quot;fire&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">alphaRange</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">scale</span>      <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">scaleRange</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">spin</span>       <span class="o">=</span> <span class="mf">1.56</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">spinRange</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">alphaSpeed</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.33</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">scaleSpeed</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">emissionRange</span>     <span class="o">=</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">emissionLongitude</span> <span class="o">=</span> <span class="mf">1.57</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">emissionLatitude</span>  <span class="o">=</span> <span class="mf">2.33</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">xAcceleration</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">yAcceleration</span> <span class="o">=</span> <span class="o">-</span><span class="mi">80</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">zAcceleration</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fireEmitter</span><span class="p">.</span><span class="n">emitterCells</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObject:</span><span class="n">fire</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer:</span><span class="n">fireEmitter</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とりあえずこれで自分なりの人魂作成に成功しました。
パラメータをいろいろ覚えなければいけないものが沢山あるのでちょっと覚えるの大変だなという印象。
今回その煩雑さをUIEffectDesignerで補完しましたが、それでもパラメータがどのような効果があるのかはある程度理解しておく必要があるようです。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-09-08_01.png" alt="ss" /></p>

<h3>参照</h3>

<p>iOS Developer Library
<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CAEmitterLayer_class/Reference/Reference.html">https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CAEmitterLayer_class/Reference/Reference.html</a></p>

<p>UIEffectDesigner
<a href="http://www.touch-code-magazine.com/uieffectdesigner/">http://www.touch-code-magazine.com/uieffectdesigner/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[update-rails4]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/07/13/update-rails4/"/>
    <updated>2013-07-13T15:13:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/07/13/update-rails4</id>
    <content type="html"><![CDATA[<p>自分のサービスのRailsのversionがまだ<code>3.2</code>だったので地道にRails4にアップデートしました。
その際に必要になった作業をメモっときます。</p>

<h2>attr_accessible is extracted out of Rails into a gem.</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>E, [2013-07-04T09:54:39.926880 #2726] ERROR -- : `attr_accessible` is extracted out of Rails into a gem. Please use new recommended protection model for params(strong_parameters) or add `protected_attributes` to your Gemfile to use old one. (RuntimeError)</span></code></pre></td></tr></table></div></figure>


<p><code>attr_accessible</code>はRailsから省いて<code>strong_parameters</code>を利用してとのこと。
振るいものを利用するなら<code>protected_attributes</code>っていうGem使ってね。
しかし、今回は<code>strong_parameters</code>を記述していきます。</p>

<p>とりあえずModelからの排除を行う。</p>

<h2>DEPRECATION WARNING: config.whiny_nils option is deprecated and no longer works.</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEPRECATION WARNING: config.whiny_nils option is deprecated and no longer works. (called from block in &lt;top (required)&gt; at /private/var/www/frustration/config/environm
</span><span class='line'>ents/development.rb:10)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>whiny_nils

<ul>
<li>初期化されていないオブジェクトが呼び出させたときに、警告を表示する</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">-  # Log error messages when you accidentally call methods on nil</span>
</span><span class='line'><span class="gd">-  config.whiny_nils = true</span>
</span><span class='line'><span class="gd">-</span>
</span></code></pre></td></tr></table></div></figure>


<h2>config.eager_load is set to nil.</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>config.eager_load is set to nil. Please update your config/environments/*.rb files accordingly:
</span><span class='line'>
</span><span class='line'>  * development - set it to false
</span><span class='line'>  * test - set it to false (unless you use a tool that preloads your test environment)
</span><span class='line'>  * production - set it to true
</span></code></pre></td></tr></table></div></figure>


<p>必須の設定項目増えたので<code>rails new</code>して作成された環境ファイルを眺めてみる。</p>

<h2>The provided regular expression</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>E, [2013-07-04T12:00:26.429744 #7376] ERROR -- : The provided regular expression is using multiline anchors (^ or $), which may present a security risk. Did you mean to use \A and \z, or forgot to add the :multiline =&gt; true option? (ArgumentError)
</span></code></pre></td></tr></table></div></figure>


<p>正規表現の処理にもセキュリティが強化されていました。
一行を考慮したデータのチェック<code>^</code>なら<code>\A</code>、<code>$</code>なら<code>\z</code>にすると意図したチェックになるよ。
複数行を考慮してるんだよ！ってときは<code>:multiline =&gt; true</code>にしてね！</p>

<p>自分のValidationは一行のデータを考慮しているので修正します。</p>

<h2>You should not use the <code>match</code> method in your router without specifying an HTTP method.</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>E, [2013-07-04T12:07:42.318503 #7626] ERROR -- : You should not use the `match` method in your router without specifying an HTTP method.
</span><span class='line'>If you want to expose your action to both GET and POST, add `via: [:get, :post]` option.
</span><span class='line'>If you want to expose your action to GET, use `get` in the router:
</span><span class='line'>  Instead of: match &quot;controller#action&quot;
</span><span class='line'>  Do: get &quot;controller#action&quot; (RuntimeError)
</span></code></pre></td></tr></table></div></figure>


<p><code>match</code>の代わりにHTTPメソッドをちゃんと宣言しようぜ！っていうメッセージ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">-  match &#39;home&#39; =&gt; &#39;home#index&#39;, :via =&gt; :get</span>
</span><span class='line'><span class="gi">+  get &#39;home&#39; =&gt; &#39;home#index&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>なかんじで修正。</p>

<p>これで起動はうまくいった。strong_parameterによる警告はあるけどこれは後ほど修正することにする。
その後は、テストを流して全部通す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>bundle exec rspec spec
</span></code></pre></td></tr></table></div></figure>


<h2>DEPRECATION WARNING: Calling #find(:first) is deprecated.</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>DEPRECATION WARNING: Calling #find(:first) is deprecated. Please call #first directly instead. You have also used finder options. These are also deprecated. Please build a scope instead of using finder options. (called from block in create_with_item at /private/var/www/frustration/app/services/service_fuman.rb:51)
</span></code></pre></td></tr></table></div></figure>


<p>以下のような推奨されていない使い方をしていたので修正しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>Hoge.find(:first, condition: {user_id: @user.id})
</span><span class='line'>↓
</span><span class='line'>Hoge.where(user_id: @user.id).first
</span></code></pre></td></tr></table></div></figure>


<h2>strong_parameter</h2>

<p>ここはひたすらcontroller側に制限の内容を記述。</p>

<p>ホワイトリストとして許可するパラメータを記述していきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">category_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:category</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DEPRECATION WARNING: You didn&rsquo;t set config.secret_key_base.</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DEPRECATION</span> <span class="ss">WARNING</span><span class="p">:</span> <span class="no">You</span> <span class="n">didn</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">set</span> <span class="n">config</span><span class="o">.</span><span class="n">secret_key_base</span><span class="o">.</span> <span class="no">Read</span> <span class="n">the</span> <span class="n">upgrade</span> <span class="n">documentation</span> <span class="n">to</span> <span class="n">learn</span> <span class="n">more</span> <span class="n">about</span> <span class="n">this</span> <span class="kp">new</span> <span class="n">config</span> <span class="n">option</span><span class="o">.</span> <span class="p">(</span><span class="n">called</span> <span class="n">from</span> <span class="n">env_config</span> <span class="n">at</span> <span class="sr">/private/</span><span class="n">var</span><span class="o">/</span><span class="n">www</span><span class="o">/</span><span class="n">frustration</span><span class="o">/</span><span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">railties</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">rails</span><span class="o">/</span><span class="n">application</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">141</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>secret_token</code>はもう推奨されていなくて<code>secret_key_base</code>に名前が変更されたようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">if</span> <span class="n">config</span><span class="o">.</span><span class="n">secret_key_base</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>      <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Deprecation</span><span class="o">.</span><span class="n">warn</span> <span class="s2">&quot;You didn&#39;t set config.secret_key_base. &quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s2">&quot;Read the upgrade documentation to learn more about this new config option.&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">config</span><span class="o">.</span><span class="n">secret_token</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>        <span class="k">raise</span> <span class="s2">&quot;You must set config.secret_key_base in your app&#39;s config.&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>これですべてテストがうまくいったのでPull Requestを自分に送ってfin.</p>

<p><a href="https://github.com/nakajijapan/frustrationme_app/pulls">https://github.com/nakajijapan/frustrationme_app/pulls</a></p>

<p>メジャーバージョンが上がってるということで、新しい機能が追加されたり、機能が廃止されたり、名前が変更されていたりと、いろいろと変更するべき点は多かったですがテストを書いていたので実行させては修正、実行させては修正の連続で効率的に修正作業ができたんじゃないかとおもいます（最終的にはWEB上での確認はしましたが）。</p>

<p>あと、今回は規模が小さいし、修正箇所もそんなに多くなかったのでstrong_parametersの部分も変更させてしましましたが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;strong_parameters&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>であらかじめ3系で実装しておくと細かい粒度で修正できて安心かもしれませんね。</p>

<p>さてさて、アップデートできてよかった。。。</p>

<h2>Ref</h2>

<p><a href="http://www.upgradingtorails4.com/">http://www.upgradingtorails4.com/</a>
<a href="http://railscasts.com/episodes/415-upgrading-to-rails-4?language=ja&amp;view=asciicast">http://railscasts.com/episodes/415-upgrading-to-rails-4?language=ja&amp;view=asciicast</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoogleDocsのスプレッドシートを利用してスコアデータを蓄積させる]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/07/02/usinggoogledrive/"/>
    <updated>2013-07-02T22:30:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/07/02/usinggoogledrive</id>
    <content type="html"><![CDATA[<p>サービスの日々の情報を解析するために、普段はDBに解析用のテーブル作成してそこで毎日もしくは毎月バッチを走らせてレコードを追加なんてことするだろうけど、スモールスタートしてる内とか個人のサービスとかはそこまで大げさにしなくてももっと気軽にデータを収集したいなと思いまして日々のデータをGoogleDocsのスプレッドシートにレコードを追加いくことにしました。これならいつでもやめれるし気軽にカラムも増やせるので便利。</p>

<p>便利だったのが<a href="https://github.com/gimite/google-drive-ruby">google-drive-ruby</a>で、中の通信部分の処理をいい感じに抽象化してくれる便利gemです。</p>

<p>実際に<a href="http://www.frustration.me/">www.frustration.me</a>のユーザ数やアイテム数を計測するために使用してみました。</p>

<p>まずは、gemでインストールしてrakeでバッチ処理を実装するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;send score data to google spreadsheet&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;google_drive&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:batches</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="n">total_scores</span><span class="p">:</span> <span class="ss">:environment</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">fail</span> <span class="s1">&#39;no username&#39;</span> <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GOOGLE_USERNAME&#39;</span><span class="o">].</span><span class="n">blank?</span>
</span><span class='line'>    <span class="nb">fail</span> <span class="s1">&#39;no password&#39;</span> <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GOOGLE_PASSWORD&#39;</span><span class="o">].</span><span class="n">blank?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span> <span class="o">=</span> <span class="no">GoogleDrive</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GOOGLE_USERNAME&#39;</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;GOOGLE_PASSWORD&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">spreadsheet</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">spreadsheet_by_key</span><span class="p">(</span><span class="s2">&quot;input key name&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">worksheet</span> <span class="o">=</span> <span class="n">spreadsheet</span><span class="o">.</span><span class="n">worksheet_by_title</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="n">analyze_data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">date</span><span class="p">:</span>           <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m-%d&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="n">users_num</span><span class="p">:</span>      <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">count</span><span class="p">,</span>
</span><span class='line'>      <span class="n">items_num</span><span class="p">:</span>      <span class="no">Item</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">count</span><span class="p">,</span>
</span><span class='line'>      <span class="n">comments_num</span><span class="p">:</span>   <span class="no">Comment</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">count</span><span class="p">,</span>
</span><span class='line'>      <span class="n">categories_num</span><span class="p">:</span> <span class="no">Category</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">worksheet</span><span class="o">.</span><span class="n">list</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">analyze_data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">worksheet</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで<code>rake batches:total_scores</code>で実行すると指定のスプレッドシートに情報が送信され、スプレッドシート側では</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-07-02_01.png" alt="ss" /></p>

<p>な感じでどんどんレコードが追加されていきます。</p>

<p>便利。</p>

<p>ただし、注意点があります。今回は<a href="http://sqale.jp">sqale</a>のcronで動かしているのですがログインで以下のように失敗することがあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake batches:total_scores
</span><span class='line'>WARNING: Nokogiri was built against LibXML version 2.8.0, but has dynamically loaded 2.7.8
</span><span class='line'>rake aborted!
</span><span class='line'>Authentication failed <span class="k">for </span>hogehoge@gmail.com: Response code 403 <span class="k">for </span>post https://www.google.com/accounts/ClientLogin: <span class="nv">Error</span><span class="o">=</span>BadAuthentication
</span><span class='line'><span class="nv">Url</span><span class="o">=</span>https://www.google.com/accounts/ServiceLogin?service<span class="o">=</span>wise#Email<span class="o">=</span>hogehoge%40gmail.com
</span><span class='line'><span class="nv">Info</span><span class="o">=</span>WebLoginRequired
</span><span class='line'>/home/sqale/current/vendor/bundle/ruby/2.0.0/gems/google_drive-0.3.6/lib/google_drive/session.rb:93:in <span class="sb">`</span>rescue in login<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/home/sqale/current/vendor/bundle/ruby/2.0.0/gems/google_drive-0.3.6/lib/google_drive/session.rb:86:in `login&#39;</span>
</span><span class='line'>/home/sqale/current/vendor/bundle/ruby/2.0.0/gems/google_drive-0.3.6/lib/google_drive/session.rb:38:in <span class="sb">`</span>login<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/home/sqale/current/vendor/bundle/ruby/2.0.0/gems/google_drive-0.3.6/lib/google_drive.rb:18:in `login&#39;</span>
</span><span class='line'>/home/sqale/current/lib/tasks/scores.rake:10:in <span class="sb">`</span>block <span class="o">(</span>2 levels<span class="o">)</span> in &lt;top <span class="o">(</span>required<span class="o">)</span>&gt;<span class="err">&#39;</span>
</span><span class='line'>Tasks: <span class="nv">TOP</span> <span class="o">=</span>&gt; batches:total_scores
</span><span class='line'><span class="o">(</span>See full trace by running task with --trace<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これはGoogleがセキュリティ強化のため、変な場所からのログインは自動的に拒否しているためです。なので、通常通りWEBでGoogleにログインしてみてそのログインが大丈夫という設定をすれば問題無く通過できます。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-07-02_02.png" alt="ss" /></p>

<p>あとはグラフツール使って簡単に見やすくできるのでお手軽&amp;便利メソッドでした。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-07-02_03.png" alt="まだ情報はすくないのであれです" />
まだ情報は少ないのであれですがどんどん勝手にグラフ化されていくはず！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSRF Protection for Rails and Backbone.js]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/07/01/csrf-protection/"/>
    <updated>2013-07-01T07:53:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/07/01/csrf-protection</id>
    <content type="html"><![CDATA[<p>欲求不満では内部でBackbone.jsを利用しているのですが、セキュリティ強化のためにCSRF対策を施しました。
Railsを利用しているときはCSRF用のtokenを発行しているのでそれをBackbone.jsで通信するさいに情報を負荷
して送信させるようにしました。</p>

<p>ちなみに以前はModelに<code>toJSON</code>メソッドでtokenを付加させていたのですがPOST,PUTのみの対応だったので
DELETE用にも対応できるよう実装してみた。（<code>Model.destroy</code>時には<code>toJSON()</code>を仲介しない）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span><span class="o">-------------------------------------------</span>
</span><span class='line'><span class="err">#</span> <span class="nx">Sync</span>
</span><span class='line'><span class="err">#</span><span class="o">-------------------------------------------</span>
</span><span class='line'><span class="nx">Backbone</span><span class="p">.</span><span class="nx">_sync</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">sync</span>
</span><span class='line'><span class="nx">Backbone</span><span class="p">.</span><span class="nx">sync</span> <span class="o">=</span> <span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">method</span> <span class="o">==</span> <span class="s1">&#39;create&#39;</span> <span class="o">||</span> <span class="nx">method</span> <span class="o">==</span> <span class="s1">&#39;update&#39;</span> <span class="o">||</span> <span class="nx">method</span> <span class="o">==</span> <span class="s1">&#39;delete&#39;</span>
</span><span class='line'>    <span class="nx">options_csrf</span> <span class="o">=</span>
</span><span class='line'>      <span class="nx">headers</span><span class="o">:</span>
</span><span class='line'>        <span class="s1">&#39;X-CSRF-Token&#39;</span><span class="o">:</span> <span class="nx">BackboneFrustration</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">csrf_token</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">options</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">options_csrf</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">_sync</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>メソッドをオーバーライドしてHEADERに<code>X−CSRF-Token</code>を付加して親処理に渡す。<code>BackboneFrustration.Model.csrf_token()</code>は
単純にフォームからCSRF用のtokenを取得しているだけです。これでajax通信のときはtokenを無視して処理をするようなその場しのぎな実装をせずになりました。</p>

<p>以下のような処理撲滅です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">protect_from_forgery</span> <span class="ss">except</span><span class="p">:</span> <span class="ss">:craete</span>
</span></code></pre></td></tr></table></div></figure>


<p>この修正で問題なく動作しているので適用させました。</p>

<p>ところでRails用のgemで<code>backbone-rails</code>なんてものがありましてそこのコードを
見ていたらだいたい同じことをしていたのであらかじめこれを参考にして勉強すれば良かったと思いました。とほほ。。</p>

<p><a href="https://github.com/codebrew/backbone-rails/blob/master/vendor/assets/javascripts/backbone_rails_sync.js">https://github.com/codebrew/backbone-rails/blob/master/vendor/assets/javascripts/backbone_rails_sync.js</a></p>

<p>とりあえず、これで一安心。</p>

<h2>実際の修正箇所</h2>

<p><a href="https://github.com/nakajijapan/frustrationme_app/pull/25/files">https://github.com/nakajijapan/frustrationme_app/pull/25/files</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jenkinsでcommit statusを操作する]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/06/24/use-commitstatus-at-jenkins/"/>
    <updated>2013-06-24T08:02:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/06/24/use-commitstatus-at-jenkins</id>
    <content type="html"><![CDATA[<p>自分のサービスでテストを行うときはTravisCIに任せて自動で作業させているのですが、基本はソースをオープンにしないといけないので
自社サービスに利用する訳にはいきません。そこでJenkinsを利用して同じような仕組みを作成しました。</p>

<p>仕組みとしは<code>commit status</code>を操作するためのGitHubのAPI利用してPull Requestがきたらジョブを走らせるようにします。</p>

<h2>監視用の親ジョブ作成</h2>

<ul>
<li><p>ソースコード管理</p>

<ul>
<li>Gitを選択</li>
<li>Repository URL(テスト対象のものを入れる)

<ul>
<li>ex) git@github.com:paperboy-petit/user-app.git</li>
</ul>
</li>
<li>Branch Specifier()

<ul>
<li><code>*/master</code>, <code>*/release</code>を記述する</li>
<li>高度な設定のChoosing strategy

<ul>
<li><code>Inverse</code>を選択する</li>
</ul>
</li>
<li>これで<code>master</code>,<code>release</code>意外のブランチを監視対象にできる</li>
</ul>
</li>
</ul>
</li>
<li><p>ビルド環境</p>

<ul>
<li>テストに必要な環境の設定なので適宜設定する</li>
</ul>
</li>
<li><p>ビルド</p>

<ul>
<li>ここでテストする処理を実行</li>
</ul>
</li>
<li><p>ビルド後の処理</p>

<ul>
<li>ビルド後の結果をトリガーにしてパラメータを小ジョブに渡す設定行う。フォームにはいかの用に項目設定する</li>
<li>Build Triggers 1

<ul>
<li>Project to build: <code>CommitSTatusUpdate</code></li>
<li>Trigger when build is <code>stable or unstable but not failed</code></li>
<li>parameters

<ul>
<li><code>commit_status=success</code>を設定</li>
</ul>
</li>
</ul>
</li>
<li>Build Triggers 2

<ul>
<li>Project to build: <code>CommitSTatusUpdate</code></li>
<li>Trigger when build is <code>failed</code></li>
<li>parameters

<ul>
<li><code>commit_status=failure</code>を設定</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>小ジョブ作成(CommitStatusUPdate)</h2>

<ul>
<li><p>ビルドのパラメータ化</p>

<ul>
<li>受け取るパラメータの設定

<ul>
<li>名前：commit_status</li>
<li>デフォルト値：success</li>
</ul>
</li>
</ul>
</li>
<li><p>ソースコード管理
親ジョブと同じ設定にする</p></li>
<li><p>シェルの実行
コミットステータスの変更を行う</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -H <span class="s1">&#39;Authorization: token hogehogehogehogheohogehoge&#39;</span> <span class="se">\</span>
</span><span class='line'>  --data <span class="s2">&quot;{\&quot;state\&quot;:\&quot;${commit_status}\&quot;, \&quot;target_url\&quot;:\&quot;${BUILD_URL}\&quot;}&quot;</span> <span class="se">\</span>
</span><span class='line'>  https://api.github.com/repos/paperboy-petit/user-app/statuses/<span class="k">${</span><span class="nv">GIT_COMMIT</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ビルド後の処理
お好みでIRCに渡します</li>
</ul>


<p>最終的に以下のようにチェックがついてたりしたら出来ています</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-06-24-01.png" alt="commit status" /></p>

<p>これでPull Requestベースでの開発ができて、テスト結果が最新コミットにチェックがつくので安心安全にメインブランチにマージができるようになります。</p>

<ul>
<li>参考

<ul>
<li><a href="http://qiita.com/items/6352b81fc9222e9c23ec">http://qiita.com/items/6352b81fc9222e9c23ec</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bbackbone.js 読書会 第２章]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/06/13/backbone-guidebook03/"/>
    <updated>2013-06-13T10:56:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/06/13/backbone-guidebook03</id>
    <content type="html"><![CDATA[<p>前回の続きです。１章ではBackboneの基礎的な知識を読んでいきましたが、次は実際に使われるオブジェクトの説明。
Backboneで利用される重要な３つのモデルModel, Coolection, Viewの説明（役割・使い方）でした。</p>

<p>概要と話題になったことをメモろうと思います。</p>

<h2>Model</h2>

<p>データを扱う方法を提供するもの。
View側で実際にデータがどう扱われているかは気にしない。 &ndash;> viewとの分離
これがjavascriptで使えちゃう。</p>

<h3>提供するもの</h3>

<ul>
<li>保持</li>
<li>検証</li>
<li>アクセス制御</li>
<li>保存</li>
</ul>


<h3>Validationをどうするか</h3>

<p>サーバサイドでもクライアントサイドでも実装しなくちゃいけなくなるのは大変だよね。って話をした。
場合によりけりだろうけど。そこまでのアクセスを気にしなきゃ。検証はサーバサイドで全て任せて
その結果を画面に表示。は二重管理せずに済むよね。ユーザにリアルタイムに検証結果を表示させたいとき
とかはクライアント側でも利用するよねーという話をした。</p>

<p>ちなみに欲求不満(<a href="http://www.frustration.me">http://www.frustration.me</a>)ではサーバサイドでもチェックできるようクラスを用意して
それを継承して処理が動作するようになっている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span><span class="o">-------------------------------------------</span>
</span><span class='line'><span class="err">#</span> <span class="nx">Model</span>
</span><span class='line'><span class="err">#</span><span class="o">-------------------------------------------</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">BackboneFrustration</span><span class="p">.</span><span class="nx">Model</span> <span class="kr">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">initialize</span><span class="o">:</span> <span class="p">(</span><span class="nx">attributes</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="err">@</span><span class="nx">on</span> <span class="s1">&#39;error&#39;</span><span class="p">,</span>   <span class="err">@</span><span class="nx">defaultErrorHandler</span>
</span><span class='line'>    <span class="err">@</span><span class="nx">on</span> <span class="s1">&#39;invalid&#39;</span><span class="p">,</span> <span class="err">@</span><span class="nx">defaultErrorHandler</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">defaultErrorHandler</span><span class="o">:</span> <span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;object&#39;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">error</span><span class="p">.</span><span class="nx">statusText</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="nx">alert</span> <span class="s1">&#39;Intal Server Error&#39;</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span> <span class="nx">error</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">else</span> <span class="k">if</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;string&#39;</span>
</span><span class='line'>       <span class="k">if</span> <span class="nx">error</span><span class="o">?</span> <span class="nx">or</span> <span class="nx">error</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>         <span class="nx">alert</span> <span class="nx">error</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Collecation</h2>

<p>複数のモデルを管理するためのオブジェクト。それ自体にデータはない。
Underscoreの配列操作に由来した関数群があるのでそれ使うと便利という話。
each(),pluck(),invoke()等のよく使いそうな便利メソッドの紹介があった。</p>

<h2>View</h2>

<p>BackboneにおけるViewは二つの役割を持っているという話。</p>

<ul>
<li>Viewとして、「適切にDOMツリーを構築する」</li>
<li>Controllerとして、「そのDOMツリーで起ったDOMイベントを処理する」</li>
</ul>


<p>前者でいうと</p>

<ul>
<li>Model,Collectionを利用してデータの操作して、保存を行ったり、新しいViewを構築する</li>
</ul>


<p>後者でいうと</p>

<ul>
<li>DOMのイベントハンドリングはView内でちゃんとやろう</li>
</ul>


<p>なのかなと感じた。</p>

<p>あと、Underscoreのテンプレートエンジンの話が出てきて、また記法覚えるの辛かったのでERBの記法に似た<a href="http://embeddedjs.com/">EJS</a>を利用したいのですが余裕があるのでこちらに移行してみるのありだと思いました。</p>

<h2>Router</h2>

<h2>Sync</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでBowerの導入]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/06/09/install-bower/"/>
    <updated>2013-06-09T16:07:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/06/09/install-bower</id>
    <content type="html"><![CDATA[<p>javascriptのパッケージ管理がしたくて<code>bower</code>というパッケージ管理ツールを<a href="http://www.frustration.me">http://www.frustration.me</a> にインストールしてみました。
(ブランチ切って試してみました・・・)</p>

<p>とりあえず、バージョンが古いので最新のものにインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ node -v 
</span><span class='line'>v0.6.19
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>$ brew install node
</span><span class='line'>
</span><span class='line'>==&gt; Upgrading 1 outdated package, with result:
</span><span class='line'>node 0.10.7
</span><span class='line'>==&gt; Upgrading node
</span><span class='line'>Beginning with 0.8.0, this recipe now comes with npm.
</span><span class='line'>It appears you already have npm installed at /usr/local/lib/node_modules/npm.
</span><span class='line'>To use the npm that comes with this recipe, first uninstall npm with
</span><span class='line'>`npm uninstall npm -g`, then run this command again.
</span><span class='line'>
</span><span class='line'>If you would like to keep your installation of npm instead of
</span><span class='line'>using the one provided with homebrew, install the formula with
</span><span class='line'>the `--without-npm` option.
</span><span class='line'>Error: An unsatisfied requirement failed this build.</span></code></pre></td></tr></table></div></figure>


<p>npm をまずアンインストールしてほしいとのこと</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm uninstall npm -g</span></code></pre></td></tr></table></div></figure>


<p>再度実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew upgrade node
</span><span class='line'>$ node -v
</span><span class='line'>v0.10.7</span></code></pre></td></tr></table></div></figure>


<p>これで最新版になった。
次にbowerをインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g bower</span></code></pre></td></tr></table></div></figure>


<p>これでインストール完了。</p>

<p>とりえず、検索でどうなるか確認。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower search backbone
</span><span class='line'>Search results:
</span><span class='line'>
</span><span class='line'>    backbone git://github.com/documentcloud/backbone.git
</span><span class='line'>    backbone-amd git://github.com/amdjs/backbone
</span><span class='line'>    backbone.stickit git://github.com/NYTimes/backbone.stickit.git
</span><span class='line'>    backbone.marionette git://github.com/marionettejs/backbone.marionette
</span><span class='line'>    backbone.wreqr git://github.com/marionettejs/backbone.wreqr.git
</span><span class='line'>・
</span><span class='line'>・
</span><span class='line'>・</span></code></pre></td></tr></table></div></figure>


<p>てな感じでbackboneに関連するプラグインがどどどっと出力される</p>

<p>試しにインストールすると、ホームディレクトリに生成されてしまうので
アプリごとに管理したいところ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower install jquery
</span><span class='line'>bower cloning git://github.com/components/jquery.git
</span><span class='line'>bower cached git://github.com/components/jquery.git
</span><span class='line'>bower fetching jquery
</span><span class='line'>bower checking out jquery#2.0.2
</span><span class='line'>bower copying /Users/pp_kupepo_gattyanmo/.bower/cache/jquery/29cb4373d29144ca260ac7c3997f4381
</span><span class='line'>bower installing jquery#2.0.2</span></code></pre></td></tr></table></div></figure>


<p>ここからRaisに組み込んでいきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower init
</span><span class='line'>name: [frustration]
</span><span class='line'>version: [0.0.0]
</span><span class='line'>main file: []
</span><span class='line'>add current components as dependencies? (y/n): [y] y
</span><span class='line'>add commonly ignored files to ignore list? (y/n): [y]</span></code></pre></td></tr></table></div></figure>


<p>そうするとカレントディレクトリに以下のファイルが作成されます。
このファイルでプラグインの管理を行います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name": "frustration",
</span><span class='line'>  "version": "0.0.0",
</span><span class='line'>  "dependencies": {
</span><span class='line'>    "jquery": "~2.0.2"
</span><span class='line'>  },
</span><span class='line'>  "ignore": [
</span><span class='line'>    "**/.*",
</span><span class='line'>    "node_modules",
</span><span class='line'>    "components"
</span><span class='line'>  ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>現状の設定だとグローバルの設定なのでダウンロードがプロジェクト単位でできないので
<code>.bowerrc</code>ファイルをプロジェクトディレクトリ直下に保存する。
デフォルトは<code>~/.bowerrc</code>を参照するようだ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "directory": "vendor/assets/javascripts/components",
</span><span class='line'>  "json": "bower.json",
</span><span class='line'>  "searchpath": [
</span><span class='line'>    "https://bower.herokuapp.com"
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これで<code>bower install</code>すると指定のディレクトリに保存される。</p>

<h2>Railsの場合</h2>

<p><code>application.rb</code>でパスを通るようにする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># for bower
</span><span class='line'>config.assets.paths &lt;&lt; Rails.root.join('vendor', 'assets', 'javascripts', 'components')</span></code></pre></td></tr></table></div></figure>


<p><code>applicatio.js</code>でパスの再設定を行う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//= require components/jquery/jquery.js
</span><span class='line'>//= require components/jquery-ui/ui/jquery-ui.js</span></code></pre></td></tr></table></div></figure>


<p>これでRailsの場合は完了です。</p>

<h2>所感</h2>

<p>jsもbundlerのように管理できるようになったのは大変便利作業です。
version上がることごとにサイト確認して<code>wget</code>してこないといけないし、コマンド一発でプラグインの削除・検索・バージョンのアップ・ダウングレードもできてしまうのは進化であるのです。</p>

<p>ですが、まだ</p>

<ul>
<li>version 管理されていないプラグインある</li>
<li>本番環境にnodeが入っていない・bowerが使えない</li>
</ul>


<p>ときがあるのでそこは共存なり、一旦保留なりしたほうが良いかもしれません。。。
また、後者のときはいけてないけどパッケージも合わせてコミットするのが良いかもしれない。</p>

<h2>Ref</h2>

<ul>
<li>source

<ul>
<li><a href="https://github.com/bower/bower">https://github.com/bower/bower</a></li>
</ul>
</li>
<li>Bower components

<ul>
<li><a href="http://sindresorhus.com/bower-components/">http://sindresorhus.com/bower-components/</a></li>
</ul>
</li>
</ul>


<p>ここにパッケージが登録されています</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubyhiroba]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/06/05/rubyhiroba/"/>
    <updated>2013-06-05T00:12:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/06/05/rubyhiroba</id>
    <content type="html"><![CDATA[<iframe src="http://www.slideshare.net/slideshow/embed_code/22314337" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/nakajijapan/2013-lt" title="サービスをRailsにした話" target="_blank">サービスをRailsにした話</a> </strong> from <strong><a href="http://www.slideshare.net/nakajijapan" target="_blank">Daichi Nakajima</a></strong> </div></p>

<p>rubyhirobaでLTに参加してきまして自分のサービスのことについて話してきました。
以前はCGIだったものをせっせせっせとRailsにリニューアルしていっていますよ。という内容です。
やはり５分で話すにはちょっと時間が足りなかったように思います。薄い話になってしまったのが
反省点であります。しかし、今回のリニューアルにはいろいろする理由はあると思うけども（そもそもCGIてどうよてなところから）</p>

<p>perlにしろrubyにしろテストがあるのは大変心強いし、安心します。
たとえ、最新のRailsにのせ変えたとしてもテストがない時点でもう技術的負債。前のコードと何ら変わりはない。
まぁ作成した時点負債は負債なんだけどその劣化速度は抑えられるはず。</p>

<p>まだまだリニューアルは続きますが、引き続きがんばります。</p>

<p>そして裏で支えていただいた@hsbt氏には感謝の意を隠しきれないであります。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsガイドブック読書会 第１章 続き]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/05/30/backbone-guidebook01/"/>
    <updated>2013-05-30T00:12:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/05/30/backbone-guidebook01</id>
    <content type="html"><![CDATA[<p>第１章の続き</p>

<p>Eventsあたりのところから</p>

<blockquote><p>Eventsが提供しているインタフェースはオブザーバパターンを駆使してオブジェクト間の結合を「疎」に保たせている</p></blockquote>

<p>と記述されている。</p>

<h2>オブザーバパターンとは</h2>

<p>購読者と発行者と呼ばれるオブジェクトが存在する。
発行者が購読者のメソッドを直接呼び出す代わりに、購読者は発行者
のイベントを購読する。イベントが発生したらそれを購読している
オブジェクトに通知される。</p>

<p>発行者はだれが購読してるのか知らずに済む。</p>

<p>イベント駆動開発の技法。</p>

<p>詳細はここが分かりやすい。
<a href="http://www.techscore.com/tech/DesignPattern/Observer.html/">http://www.techscore.com/tech/DesignPattern/Observer.html/</a></p>

<h3>Backbone.jsでいう購読者と発行者</h3>

<p>これを以下のようにして考えるとわかりやすい</p>

<ul>
<li>購読者: View</li>
<li>発行者 : Model</li>
</ul>


<p>Modelはだれが購読してるかしらなくていい、イベントを通知してあげればいいんです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># viewの中で
</span><span class='line'>var entry = new Entry();
</span><span class='line'>entry.on('change', this.render());</span></code></pre></td></tr></table></div></figure>


<h2>メディエータパターン</h2>

<blockquote><p>複数オブジェクトの間を取り持つ仲介者と鳴るオブジェクトを用意し、オブジェクト間の連動の詳細をその仲介者に持たせる
個々のオブジェクトの独自性を高める</p></blockquote>

<p>内容は理解できたけど、使いどころまだピンときていない。</p>

<p>ここに詳しく記述されていた。
<a href="http://www.techscore.com/tech/DesignPattern/Mediator.html/">http://www.techscore.com/tech/DesignPattern/Mediator.html/</a></p>

<h2>コラムでのまめ知識</h2>

<p>メモリーリークの問題から<code>on() off()</code>ではなくて <code>listenTo() stopListening()</code>を利用するといい
v1.0からはView#remove()内部でstopListening() ViewではlistenToしてるので大丈夫！</p>

<h2>Underscore.js</h2>

<p>便利関数の紹介だった。</p>

<ul>
<li>_.debounce()

<ul>
<li>一定時間イベントが発生しなかったときに処理を実行する</li>
</ul>
</li>
<li>_.throtte()

<ul>
<li>コールバックの実行頻度をさげる</li>
</ul>
</li>
<li>_.delay()

<ul>
<li>処理を遅らせる</li>
</ul>
</li>
<li>_.defer()

<ul>
<li>コールバック関数の中で最後に実行されることを保証する</li>
</ul>
</li>
</ul>


<p>上記二つの関数は今にも使えそうな便利関数だったので導入していきたいな。</p>

<p><a href="http://underscorejs.org/">http://underscorejs.org/</a></p>

<p>見る限り処理を便利＆スマートにしてくれるのでカジュアルにこれだけ導入でもありかもしれない。</p>

<p>さて来週からは第二章ですよ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsガイドブック読書会 第１章 続き]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/05/23/backbone-guidebook00/"/>
    <updated>2013-05-23T00:12:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/05/23/backbone-guidebook00</id>
    <content type="html"><![CDATA[<h2>Backbone.js読書会１日目</h2>

<p>Webも徐々にGUIアプリのような振る舞いが求められていく世の中になってきたし、技術的に可能になってきたと。クライアントでそんな振る舞いをしてくれてるのが現状javascriptです。僕たちはどんどんjavascriiptを利用して多種多様な振る舞いをしていかなければいけないけど、現状のjQueryでばんばん書いていくのにも限界がきてるんじゃないか。そのとき、外国で話題になっていたフレームワークをほそぼそと勉強しはじめ、今や業務にまで導入できることに成功しました。（まだ、いろいろ課題はありますが。。。）</p>

<p>そんなときに、満を持して洋書よりも早く日本の書籍がでてしまったので早速基本に振り返るがてらみんなで知識深めようという目的で読書会はじめました。</p>

<p>「Backbone.js ガイドブック」</p>

<p><a href="http://www.amazon.co.jp/Backbone-js%E3%82%AC%E3%82%A4%E3%83%89%E3%83%96%E3%83%83%E3%82%AF-%E9%AB%98%E6%A9%8B-%E4%BE%91%E4%B9%85/dp/4899773501%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4899773501" target="_blank" title="Backbone.jsガイドブック"><img src="http://ecx.images-amazon.com/images/I/31tI0WaZukL._SL160_.jpg" width="118" height="150" alt="Backbone.jsガイドブック" /></a><br /><a href="http://www.amazon.co.jp/Backbone-js%E3%82%AC%E3%82%A4%E3%83%89%E3%83%96%E3%83%83%E3%82%AF-%E9%AB%98%E6%A9%8B-%E4%BE%91%E4%B9%85/dp/4899773501%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4899773501" target="_blank">Backbone.jsガイドブック</a></p>

<p>はじめは概要なのですらっと。</p>

<p>一つ話題になったのは、基本は「.extend」を利用してインスタンス用のプロパティを作成していくのが基本だけど、クラス用のプロパティってどこで利用するケースがあるかってこと。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">instance_p</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">instance_m</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="s1">&#39;instance_m&#39;</span><span class="p">;}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">class_p</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">class_m</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="s1">&#39;instance_m&#39;</span><span class="p">;}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>サンプルみただけだとふーんですよね。僕もいまのところふーんです。</p>

<p>ケースとしてはクラスプロパティにテンプレートをぶち込んでおくのがよさげなのかしらね。例えば、Viewが管理している内部でモーダルを管理しているとき。モーダルは基本一つなのでクラスプロパティであらかじめ作成しておけば使い回しがきくと。$(&lsquo;modal&rsquo;)とかで毎回DOMを操作しなくて済む。</p>

<p>ふと思った訳です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">instance_p</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">instance_m</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="s1">&#39;instance_m&#39;</span><span class="p">;}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">modal_template</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">class_m</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">this</span><span class="p">.</span><span class="nx">modal_template</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#modal&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんなかんじ。</p>

<p>あと、なんだかんだ実装しながら確認してたら時間かかってしまったので１章の半分くらいで終了。バタリ。</p>

<p>さ。来週もすすめていきますよ。</p>

<h2>追記</h2>

<p>洋書は今月末にでるようだ。</p>

<p><a href="http://www.amazon.co.jp/Developing-Backbone-js-Applications-Addy-Osmani/dp/1449328253%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1449328253" target="_blank" title="Developing Backbone.js Applications"><img src="http://ecx.images-amazon.com/images/I/5171nmxXQdL._SL160_.jpg" width="114" height="150" alt="Developing Backbone.js Applications" /></a><br /><a href="http://www.amazon.co.jp/Developing-Backbone-js-Applications-Addy-Osmani/dp/1449328253%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1449328253" target="_blank">Developing Backbone.js Applications</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/03/03/hello/"/>
    <updated>2013-03-03T10:23:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/03/03/hello</id>
    <content type="html"><![CDATA[<p>こちらでいろいろ記述していくことにしました。</p>

<p>mkdownはなによりたのもしいです。
さよならwordpress&hellip;</p>

<h1>Title</h1>

<h2>Sub</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hoge</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">message</span><span class="p">:</span> <span class="s1">&#39;hello world nakajijapan&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
