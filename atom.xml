<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nakajijapan]]></title>
  <link href="http://nakajijapan.github.io/atom.xml" rel="self"/>
  <link href="http://nakajijapan.github.io/"/>
  <updated>2014-06-01T23:51:16-07:00</updated>
  <id>http://nakajijapan.github.io/</id>
  <author>
    <name><![CDATA[nakajijapan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[app道場#3 「よくある動画アプリのあれを実装したい」を発表した]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/06/01/app-doujou3/"/>
    <updated>2014-06-01T20:05:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/06/01/app-doujou3</id>
    <content type="html"><![CDATA[<p>２回目の参加となるiPhone and Android勉強会の<a href="http://atnd.org/events/50499">「app道場#3」</a>に参加してきました。</p>

<p>今回は、自分が酔った勢いで以下のような発言をしてしまい、大変誤解を招くような発言をしてしまいました。この場を借りて陳謝したいと思います。
そんなこんながありまして、弊社で勉強会を開催する運びとなりました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>mixiさんに喧嘩売ってきた。</p>&mdash; nakajijapan (@nakajijapan) <a href="https://twitter.com/nakajijapan/statuses/458961908943446016">2014, 4月 23</a></blockquote>


<script async src="http://nakajijapan.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>詳細は<a href="http://www.vagrantup.jp/entry/2014/05/31/234116">「喧嘩を売る」</a>を参照すると良いでしょう。</p>

<blockquote><p>お分かりの通り、ここでいう「喧嘩を売る」は「次の勉強会を企画・開催する」と解釈されます。
「app道場」という字面的に少し物騒ではありますが「喧嘩」というフレーズは意外にも正鵠を射ているのではないかと思う次第です。（さすが、@nakajijapan）</p></blockquote>

<p>いいこといっています。</p>

<h2>本題</h2>

<p>さて、今回は「よくある動画アプリのあれを実装したい」というタイトルで、またもやAV Foundationの話になります。自分も動画周りの勉強してる身として、VineとかInstagramとかの動画のインターフェースの実装ってどうやるんだろうなと疑問に思っていました。
気になって気になってしょうがなかったのでちょっと実装してみようかなという想い、自分なりに考えて実装してみました。</p>

<script async class="speakerdeck-embed" data-id="52a36f80c901013130852e590c444dc4" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>仕様自体は以下のようになっています。</p>

<ul>
<li>タッチが開始したら動画の保存を開始する</li>
<li>タッチが終了したら動画の保存を終了する</li>
<li>動画はファイルに保存する</li>
<li>それぞれ保存した動画を結合して一つの動画ファイルに結合する。</li>
</ul>


<p>詳細はスライドを見ていただくことにして、実際にいい感じにできたのでCocoaPodsに登録しました。</p>

<p><a href="https//github.com/nakajijapan/NKJMultiMovieCaptureView.git">NKJMultiMovieCaptureView</a></p>

<p>これが今回公開したpodで、SessionCaptureView部分にタッチして動画を保存するところまでの処理を提供しています。
実際の保存処理は前回作成したpod, <a href="https//github.com/nakajijapan/NKJMovieComposer.git">NKJMovieComposer</a>を利用することで簡単に実装することができます。</p>

<p>しかし、まだまだまだまだ汎用性に欠ける部分が多々あるので粛々と時間を見つけて改善していこうと思います。</p>

<h4>課題</h4>

<ul>
<li>現在は正方形のビデオサイズを主にテスト対象にしているのでいろんなサイズに対応できるようにする</li>
<li>動画を結合したときに最初の0.1?0.2?だけ真っ黒になる部分がでてしまう。</li>
</ul>


<h2>懇親会</h2>

<p>今回の勉強会にSlideStoryさんの中の人が来てくださって、動画周りのことでやんややんやお話を聞くとができたので大変勉強なりやした。
実装してみてやはり同じ課題にぶつかっていたそうです。あと何個か動画関連のpodを紹介してもらえたので時間を見つけて実装して見ようと思います。</p>

<ul>
<li><a href="https://github.com/rFlex/SCRecorder">SCRecorder</a></li>
<li><a href="https://github.com/BradLarson/GPUImage">GPUImage</a></li>
</ul>


<p>また、今回の勉強会の裏側で違う勉強会が開催されていた模様で自分と同じような内容の発表があり、大変シンクロを感じましたので紹介させていただきます。かなり驚きました！！！！w</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35199041" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/himaratsu/6-vine" title="6秒動画アプリ Vineの作り方" target="_blank">6秒動画アプリ Vineの作り方</a> </strong> from <strong><a href="http://www.slideshare.net/himaratsu" target="_blank">Hiramatsu Ryosuke</a></strong> </div></p>

<p>最後に、勉強会準備で手伝ってくださったみなさん、app道場関係者のみなさん、本当にお疲れ様でした。また次も参加します！！</p>

<p>だれかに喧嘩売らねば！！！！！（売りません買わないでださい）</p>

<h2>Ref</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureVideoDataOutput_Class/Reference/Reference.html">AVCaptureVideoDataOutput</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureVideoDataOutputSampleBufferDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/AVCaptureVideoDataOutputSampleBufferDelegate/captureOutput:didOutputSampleBuffer:fromConnection:">AVCaptureVideoDataOutputSampleBufferDelegate</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/AVFoundation/Reference/AVCaptureAudioDataOutputSampleBufferDelegate_Protocol/Reference/Reference.html">AVCaptureAudioDataOutputSampleBufferDelegate</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAssetWriter_Class/Reference/Reference.html">AVAssetWriter</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/AVFoundation/Reference/AVAssetWriterInput_Class/Reference/Reference.html">AVAssetWriterInput</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/CoreMedia/Reference/CMSampleBuffer/Reference/reference.html">CMSampleBuffer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[動画からサムネイル画像を生成する]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/05/25/creating-thumbnailimage-from-the-movie/"/>
    <updated>2014-05-25T22:02:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/05/25/creating-thumbnailimage-from-the-movie</id>
    <content type="html"><![CDATA[<p>動画のある一部分を画像として取り出したいときがあったので調べてみたら、ドキュメントにそれっぽい記述があったので実装してみました。</p>

<p>方法としては、以下のメソッドを利用してCMTimeを利用して指定された時間に対する画像を生成します。</p>

<blockquote><p>copyCGImageAtTime:actualTime:error:</p></blockquote>

<p>実際に、メソッドにして動くようにしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UIImage*)createThumbnailImageWithURL:(NSURL *)movieURL
</span><span class='line'>{
</span><span class='line'>    AVAsset *asset = [[AVURLAsset alloc] initWithURL:[movieURL objectAtIndex:index] options:nil];
</span><span class='line'>
</span><span class='line'>    if ([asset tracksWithMediaCharacteristic:AVMediaTypeVideo]) {
</span><span class='line'>        AVAssetImageGenerator *imageGenerator = [[AVAssetImageGenerator alloc] initWithAsset:asset];
</span><span class='line'>
</span><span class='line'>        Float64 durationSeconds = CMTimeGetSeconds([asset duration]);
</span><span class='line'>        CMTime midpoint         = CMTimeMakeWithSeconds(durationSeconds/2.0, 600);
</span><span class='line'>        NSError* error          = nil;
</span><span class='line'>        CMTime actualTime;
</span><span class='line'>
</span><span class='line'>        CGImageRef halfWayImageRef = [imageGenerator copyCGImageAtTime:midpoint actualTime:&actualTime error:&error];
</span><span class='line'>
</span><span class='line'>        if (halfWayImageRef != NULL) {
</span><span class='line'>            UIImage* image = [[UIImage alloc]initWithCGImage:halfWayImageRef];
</span><span class='line'>
</span><span class='line'>            // 明示的にリリースしておきます
</span><span class='line'>            CGImageRelease(halfWayImageRef);
</span><span class='line'>            return image;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return nil;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>動画を取り終わった後に、一時的に一覧として残しておきたいときなどに利用できますね。</p>

<h2>p.s.</h2>

<p>これは試していないのですが、以下のメソッドがあってブロックの中で複数の画像が生成できるようです。</p>

<blockquote><p>generateCGImagesAsynchronouslyForTimes:completionHandler::^(CMTime requestedTime, CGImageRef image, CMTime actualTime, AVAssetImageGeneratorResult result, NSError
*error)</p></blockquote>

<h2>ref</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/AVFoundationPG.pdf">AV Foundation Programming Guide</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVAudioMixでオーディオの調節を行う]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/05/01/about-audiomix/"/>
    <updated>2014-05-01T11:56:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/05/01/about-audiomix</id>
    <content type="html"><![CDATA[<p>先日、<a href="https://itunes.apple.com/jp/app/the-ghost-movie-app-look-again/id696530211?mt=8">心霊動画アプリ「もう一度ご覧いただこう」</a>のアップデートしました。
その修正内容を書き綴ろうと思います。この動画アプリでは、録画した動画の同じタイムライン上にナレーションが入るのですが、あまりに録画した動画がにぎやかすぎるとナレーションがほとんど聞き取れない問題がありました。
対策としては、ナレーションの音声はそのままにして録画した動画の音声を小さくするように調整すること。<code>AVAudioMix</code>、<code>AVMutableAudioMixInputParameters</code>をうまく利用することで解決しました。</p>

<h2>実装</h2>

<p>基本的には対象のメディア情報に対して、オーディオを制御する用の<code>AVMutableAudioMixInputParameters</code>を利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVMutableComposition</span> <span class="n">avComposition</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">snip</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// movie sound</span>
</span><span class='line'><span class="n">AVMutableCompositionTrack</span><span class="o">*</span> <span class="n">compositionAudioTrack</span> <span class="o">=</span> <span class="p">[</span><span class="n">avComposition</span> <span class="nl">addMutableTrackWithMediaType:</span><span class="n">AVMediaTypeAudio</span>
</span><span class='line'>                                                                              <span class="nl">preferredTrackID:</span><span class="n">kCMPersistentTrackID_Invalid</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// オーディオのメディア情報をもとにオーディオミックス用のパラメータを生成する</span>
</span><span class='line'><span class="n">AVMutableAudioMixInputParameters</span> <span class="o">*</span><span class="n">mixInputParameters</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableAudioMixInputParameters</span>
</span><span class='line'>                                                        <span class="nl">audioMixInputParametersWithTrack:</span><span class="n">audioTrack</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 音量の調整</span>
</span><span class='line'><span class="p">[</span><span class="n">mixInputParameters</span> <span class="nl">setVolumeRampFromStartVolume:</span><span class="mf">0.2f</span> <span class="nl">toEndVolume:</span><span class="mf">0.2f</span>
</span><span class='line'>                                  <span class="nl">timeRange:</span><span class="n">CMTimeRangeMake</span><span class="p">(</span><span class="n">kCMTimeZero</span><span class="p">,</span> <span class="n">videoAsset</span><span class="p">.</span><span class="n">duration</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 入力パラメータをオーディオミックスに渡す。</span>
</span><span class='line'><span class="n">mutableAudioMix</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableAudioMix</span> <span class="n">audioMix</span><span class="p">];</span>
</span><span class='line'><span class="n">mutableAudioMix</span><span class="p">.</span><span class="n">inputParameters</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="n">mixInputParameters</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>&ndash; (BOOL)getVolumeRampForTime:(CMTime)time startVolume:(float <em>)startVolume endVolume:(float </em>)endVolume timeRange:(CMTimeRange *)timeRange</h4>

<p>これでどの時間からどのくらいの間、音量をどのくらいにするのかの設定を行えるので、ここでその制御を行います。自分の場合はずっと音量を低くできればよかったので上記のような設定になっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVAssetExportSession</span> <span class="o">*</span><span class="n">assetExportSession</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">snip</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 音声の制御</span>
</span><span class='line'><span class="n">assetExportSession</span><span class="p">.</span><span class="n">audioMix</span> <span class="o">=</span> <span class="n">mutableAudioMix</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定が終われば、<code>AVAssetExportSession</code>の<code>audioMix</code>に格納すれば、設定が反映されているはずです。
これでナレーションが動画がうるさくてもしっかり聞こえるようになったので、よりテレビ番組のような感じに近づけられたかと思います！！！</p>

<h2>Resources</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVMutableAudioMix_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40009740">AVMutableAudioMix Class</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAudioMixInputParameters_Class/Reference/Reference.html#//apple_ref/occ/cl/AVAudioMixInputParameters">AVAudioMixInputParameters Class</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVCompositionDebugVieweriOS使ってみた]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/04/23/debug-of-a-video-editing/"/>
    <updated>2014-04-23T10:50:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/04/23/debug-of-a-video-editing</id>
    <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="e6b31510ad7401311d323e814ed3dd4c" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>先日ですが、mixiさんで開催されたスマホアプリ開発勉強会 <a href="http://atnd.org/events/49386">app道場 #2</a>に参加して、LTしてきました。</p>

<p>今回は、WWDC 2013 Session Videosの<code>Advanced Editing with AV Foundation</code>をみていたときにまだ試していないサンプルがあったのと、ビデオ編集時に使えそうなテストプログラムだったので試しに使ってみたときの話をしてきました。
「Debug of a video editing」です。サンプルプログラムのタイトルは<code>AVCompositionDebugVieweriOS</code>です。</p>

<p>これは、ビデオ編集時に大きく<code>AVComposition</code>,<code>AVVideoComposition</code>,<code>AVAudioMix</code>なるクラスを利用するのですが、その構造を可視化してくれるプログラムでした。
普段は、生成した後に単純に目的の動画が完成しているかをただ <strong>目視</strong> しているだけだったのでサンプレプログラムなのに大変助かるプログラムでした。なので少しカスタマイズして自分で作った動画アプリ<a href="https://itunes.apple.com/jp/app/xin-ling-dong-huaapuri-mou/id696530211?mt=8&amp;ign-mpt=uo%3D4">「もう一度ご覧いただこう」</a>に組み込んでおきました。</p>

<p>発表がすべて終了した後の反省会なる飲み会が、参加者全員？といろいろおしゃべりもできて大変有意義な時間を過ごさせていただきました。
mixiさん、@punchdrunkerさん、参加された皆さん楽しい時間をありがとうございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メディアキャプチャの出力先の実装について]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/04/07/about-avcaptureinput/"/>
    <updated>2014-04-07T02:10:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/04/07/about-avcaptureinput</id>
    <content type="html"><![CDATA[<p><code>AV Foundation</code>を利用して写真の撮影やはたまた動画の撮影を行う場合は、カメラデバイスに接続して映像をリアルタイムに表示させたい場合があるかと思います。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2014-04-06-01.png" alt="AV Foundation" /></p>

<p>そんなときは<code>AVCaptureSession</code>を利用してメディアキャプチャの実装の準備をを行い、入力先・出力先はどうするかという設定を行うのですが、今回はその出力部分について何パターンか方法があったので調べてみました。</p>

<h3>Video Output</h3>

<ul>
<li>AVCaptureMovieFileOutput

<ul>
<li>ムービーファイルを出力するときに利用する</li>
</ul>
</li>
<li>AVCaptureVideoDataOutput

<ul>
<li>キャプチャ中のビデオフレームを処理するときに利用する</li>
</ul>
</li>
<li>AVCaptureStillImageOutput

<ul>
<li>付随するメタデータを使用して静止画像をキャプチャするときに利用する</li>
</ul>
</li>
</ul>


<h3>Audio Output</h3>

<ul>
<li>AVCaptureAudioDataOutput

<ul>
<li>キャプチャ中のオーディオフレームを処理するときに利用する</li>
</ul>
</li>
</ul>


<h2>使い方</h2>

<h3>AVCaptureMovieFileOutput</h3>

<p>ムービーファイルを保存するのに必要な処理を提供してくれるクラス。</p>

<p>録画するときは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//録画開始</span>
</span><span class='line'><span class="p">[</span><span class="n">captureMovieFileOutput</span> <span class="nl">startRecordingToOutputFileURL:</span><span class="n">outputURL</span> <span class="nl">recordingDelegate:</span><span class="n">self</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように始めることができます。</p>

<p>必要に応じて<code>AVCaptureFileOutputRecordingDelegate</code>オプションを利用して、各タイミングに応じた処理を行います。</p>

<ul>
<li>AVCaptureFileOutputRecordingDelegate</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">Delegate</span> <span class="n">Methods</span>
</span><span class='line'>
</span><span class='line'><span class="err">–</span> <span class="nl">captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:</span>
</span><span class='line'><span class="err">–</span> <span class="nl">captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:</span>
</span></code></pre></td></tr></table></div></figure>


<p>前者は録画を開始したときに、後者は終了したときに呼び出されるメソッドです。例えば、<code>captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:</code>の時に録画したムービーファイルをデバイスに保存する等の処理が行えることができます。</p>

<h4>AVCaptureStillImageOutput</h4>

<p>画像をキャプチャするときに利用して、出力は以下のように実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVCaptureConnection</span> <span class="o">*</span><span class="n">connection</span> <span class="o">=</span> <span class="p">[[</span><span class="n">captureStillImageOutput</span> <span class="n">connections</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">captureStillImageOutput</span> <span class="nl">captureStillImageAsynchronouslyFromConnection:</span><span class="n">connection</span>
</span><span class='line'>                                                     <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">CMSampleBufferRef</span> <span class="n">imageDataSampleBuffer</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                                         <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVCaptureStillImageOutput</span> <span class="nl">jpegStillImageNSDataRepresentation:</span><span class="n">imageDataSampleBuffer</span><span class="p">];</span>
</span><span class='line'>                                                         <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageWithData:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>                                                         <span class="n">ALAssetsLibrary</span> <span class="o">*</span><span class="n">library</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ALAssetsLibrary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>                                                         <span class="p">[</span><span class="n">library</span> <span class="nl">writeImageToSavedPhotosAlbum:</span><span class="n">image</span><span class="p">.</span><span class="n">CGImage</span>
</span><span class='line'>                                                                                   <span class="nl">orientation:</span><span class="n">image</span><span class="p">.</span><span class="n">imageOrientation</span>
</span><span class='line'>                                                                               <span class="nl">completionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="n">assetURL</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                                                                   <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;saved&quot;</span><span class="p">);</span>
</span><span class='line'>                                                                               <span class="p">}];</span>
</span><span class='line'>                                                     <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AVCaptureVideoDataOutput, AVCaptureAudioDataOutput</h3>

<p>デリゲートメソッドを利用して非圧縮状態のビデオフレーム情報を提供します。
そのフレーム情報は<code>CMSampleBufferRef</code>という形式で送信されてきてそれを利用して動画の保存やら編集やらを行うことができます。
このときにビデオとオーディオは別で処理しないといけません。（デリゲートメソッドが分かれているように）
主にビデオもオーディオも両方扱うときは<code>– captureOutput:didOutputSampleBuffer:fromConnection:</code>でどちらのメディアなのか区別して処理を行うような実装になります。
さらに細かい処理を行っていく場合はこちらのクラスを実装しないといけないですね。例えば、リアルタイムに動画を編集したりだとか、Vineみたいにタッチしているときは動画の保存し続けるような処理でしょうか。</p>

<ul>
<li>AVCaptureVideoDataOutputSampleBufferDelegate</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">Managing</span> <span class="n">Sample</span> <span class="n">Buffer</span> <span class="n">Behavior</span>
</span><span class='line'><span class="err">–</span> <span class="nl">captureOutput:didOutputSampleBuffer:fromConnection:</span>
</span><span class='line'><span class="err">–</span> <span class="nl">captureOutput:didDropSampleBuffer:fromConnection:</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>AVCaptureAudioDataOutputSampleBufferDelegat</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">Delegate</span> <span class="n">Methods</span>
</span><span class='line'><span class="err">–</span> <span class="nl">captureOutput:didOutputSampleBuffer:fromConnection:</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>メディアキャプチャの出力先の実装について調べてみました。目的に応じてどれを使うかは選択していけばいいのですが、よりユーザにインタラクティブなインタフェースや体験をさせるにはそれ相応に細かい実装していかなければいけないこともわかりました。何度も言っているかもしれないけどメディア系の実装は大変です。。。</p>

<h2>ref</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/AVFoundationPG.pdf">AV Foundation公式ドキュメント</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureMovieFileOutput_Class/Reference/Reference.html#//apple_ref/occ/cl/AVCaptureMovieFileOutput">AVCaptureMovieFileOutput</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureFileOutputRecordingDelegate_Protocol/Reference/Reference.html">AVCaptureFileOutputRecordingDelegate</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureVideoDataOutput_Class/Reference/Reference.html">AVCaptureVideoDataOutput</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureVideoDataOutputSampleBufferDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/AVCaptureVideoDataOutputSampleBufferDelegate/captureOutput:didOutputSampleBuffer:fromConnection:">AVCaptureVideoDataOutputSampleBufferDelegate</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/AVFoundation/Reference/AVCaptureAudioDataOutputSampleBufferDelegate_Protocol/Reference/Reference.html">AVCaptureAudioDataOutputSampleBufferDelegate</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRKit + iBeacon]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/03/29/irkit-plus-ibeacon/"/>
    <updated>2014-03-29T16:32:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/03/29/irkit-plus-ibeacon</id>
    <content type="html"><![CDATA[<p>先日IRKitとEstimote Beaconsを購入しまして、せっかくなんでこの二つ合わせてなにかできないかなーと思いまして
自宅で活用できるものを作ってみました。</p>

<h4>IRKit</h4>

<p><a href="http://www.amazon.co.jp/IRKit-001-IRKit-iPhone-iPad%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E5%A4%96%E5%87%BA%E5%85%88%E3%81%8B%E3%82%89%E3%82%A8%E3%82%A2%E3%82%B3%E3%83%B3%E7%AD%89%E3%81%AE%E5%AE%B6%E9%9B%BB%E3%82%92%E6%93%8D%E4%BD%9C%E3%81%A7%E3%81%8D%E3%82%8B%E5%AD%A6%E7%BF%92%E3%83%AA%E3%83%A2%E3%82%B3%E3%83%B3/dp/B00H91KK26%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00H91KK26" target="_blank" title="IRKit - iPhone,iPadを使って外出先からエアコン等の家電を操作できる学習リモコン"><img src="http://ecx.images-amazon.com/images/I/31HuSy3ACXL.jpg" width="500" height="356" alt="IRKit - iPhone,iPadを使って外出先からエアコン等の家電を操作できる学習リモコン" /></a></p>

<h4>Estimote Beacons</h4>

<iframe src="http://nakajijapan.github.io//instagram.com/p/iDTqkYMR1I/embed/" width="612" height="710" frameborder="0" scrolling="no" allowtransparency="true"></iframe>


<p>仕様としては、</p>

<ul>
<li>beaconに近づいたら（家に帰ってきたら）テレビをつける</li>
<li>beaconから離れたら（外出したら）テレビを消す</li>
</ul>


<p>ってことを試してみました。</p>

<h2>下準備</h2>

<p>まずはそれぞれのライブラリを追加して<code>pod install</code>する。</p>

<p>SDKのインストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target "irkit_ibeacon" do
</span><span class='line'>  pod 'IRKit', :git =&gt; 'https://github.com/irkit/ios-sdk.git'
</span><span class='line'>  pod 'EstimoteSDK'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>frameworkの追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CoreLocation.framework
</span><span class='line'>CoreBluetooth.framework</span></code></pre></td></tr></table></div></figure>


<h2>IRKit</h2>

<p>ここでは、IRKit SDKを利用してシグナルを登録してテーブルのセルにボタンを追加する処理を行います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">snip</span><span class="p">..)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// find IRKit</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">IRKit</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">countOfReadyPeripherals</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">IRNewPeripheralViewController</span> <span class="o">*</span><span class="n">vc</span> <span class="o">=</span> <span class="p">[[</span><span class="n">IRNewPeripheralViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">vc</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">vc</span>
</span><span class='line'>                           <span class="nl">animated:</span><span class="n">YES</span>
</span><span class='line'>                         <span class="nl">completion:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                             <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;presented&quot;</span><span class="p">);</span>
</span><span class='line'>                         <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IRSignals</span> <span class="o">*</span><span class="n">tmpSignals</span> <span class="o">=</span> <span class="p">[[</span><span class="n">IRSignals</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// and add a signal to the collection</span>
</span><span class='line'>    <span class="p">[</span><span class="n">tmpSignals</span> <span class="nl">loadFromStandardUserDefaultsKey:</span><span class="s">@&quot;xxxxxxxxxxxxxxxxxxxxxx&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">[[</span><span class="n">tmpSignals</span> <span class="n">signals</span><span class="p">]</span> <span class="n">count</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">tmpSignals</span> <span class="n">signals</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>IRNewPeripheralViewControllerDelegate</code>で信号の登録が終了したときに呼ばれるメソッドの実装を行います。
ここでは、ハード側で学習が完了した信号を<code>NSUserDefault</code>側でも保存させるようにしておきます。（実際にはそのシグナルを識別できるようにするためのハッシュ値のようなもの）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cp">#pragma mark - IRNewPeripheralViewControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">newSignalViewController:</span><span class="p">(</span><span class="n">IRNewSignalViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span>
</span><span class='line'>            <span class="nf">didFinishWithSignal:</span><span class="p">(</span><span class="n">IRSignal</span> <span class="o">*</span><span class="p">)</span><span class="nv">signal</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span> <span class="s">@&quot;signal: %@&quot;</span><span class="p">,</span> <span class="n">signal</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_datasource</span> <span class="nl">addSignalsObject:</span><span class="n">signal</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_datasource</span><span class="p">.</span><span class="n">signals</span> <span class="nl">saveToStandardUserDefaultsWithKey:</span><span class="s">@&quot;SIGNALS&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span>
</span><span class='line'>                             <span class="nl">completion:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                                 <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;dismissed&quot;</span><span class="p">);</span>
</span><span class='line'>                             <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - IRNewSignalViewControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">newPeripheralViewController:</span><span class="p">(</span><span class="n">IRNewPeripheralViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span>
</span><span class='line'>            <span class="nf">didFinishWithPeripheral:</span><span class="p">(</span><span class="n">IRPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span> <span class="s">@&quot;peripheral: %@&quot;</span><span class="p">,</span> <span class="n">peripheral</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span>
</span><span class='line'>                             <span class="nl">completion:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                                 <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;dismissed&quot;</span><span class="p">);</span>
</span><span class='line'>                             <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>登録した信号を実行するときは以下のような実装で呼び出せるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;indexPath: %@&quot;</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">tableView</span> <span class="nl">deselectRowAtIndexPath:</span><span class="n">indexPath</span>
</span><span class='line'>                             <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IRSignal</span> <span class="o">*</span><span class="n">signal</span> <span class="o">=</span> <span class="p">[</span><span class="n">_datasource</span> <span class="nl">objectAtIndex:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">signal</span> <span class="nl">sendWithCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;sent error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>iBeacon</h2>

<p>ここでは、ビーコンで領域を観測し出たか入ったかを監視して、IRKitに信号を送る処理を行います。</p>

<p>まず、<code>ESTBeaconManager</code>をインスタンス化して<code>startMonitoringForRegion:</code> で監視を開始します。
<code>startRangingBeaconsInRegion:</code>で距離の観測を開始します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">snip</span><span class="p">...)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">beaconManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ESTBeaconManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">beaconManager</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ESTBeaconRegion</span> <span class="o">*</span><span class="n">region</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ESTBeaconRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProximityUUID:</span><span class="n">MY_ESTIMOTE_PROXIMITY_UUID</span>
</span><span class='line'>                                                                       <span class="nl">major:</span><span class="mi">36605</span>
</span><span class='line'>                                                                       <span class="nl">minor:</span><span class="mi">43679</span>
</span><span class='line'>                                                                  <span class="nl">identifier:</span><span class="s">@&quot;EstimoteSampleRegion&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">beaconManager</span> <span class="nl">startMonitoringForRegion:</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">beaconManager</span> <span class="nl">startRangingBeaconsInRegion:</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>位置情報を利用した領域観測の方法と同様に、ビーコン領域の出入りのイベントをハンドリングします。その処理内でIRKitへ信号の送信する処理を実行します。
メソッドとしては、<code>locationManager:didEnterRegion:</code>と、<code>locationManager:didExitRegion:</code>をハンドリングして処理を行います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">beaconManager:</span><span class="p">(</span><span class="n">ESTBeaconManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didEnterRegion:</span><span class="p">(</span><span class="n">ESTBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IRSignals</span> <span class="o">*</span><span class="n">signals</span> <span class="o">=</span> <span class="p">[[</span><span class="n">IRSignals</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">signals</span> <span class="nl">loadFromStandardUserDefaultsKey:</span><span class="s">@&quot;SIGNALS&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">IRSignal</span> <span class="o">*</span><span class="n">signal</span> <span class="o">=</span> <span class="p">[</span><span class="n">signals</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">signal</span> <span class="nl">sendWithCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="nl">say:</span><span class="p">[</span><span class="n">NSString</span>  <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@を実行しました。&quot;</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">name</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;beaconの近くに入りました。&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">beaconManager:</span><span class="p">(</span><span class="n">ESTBeaconManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didExitRegion:</span><span class="p">(</span><span class="n">ESTBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IRSignals</span> <span class="o">*</span><span class="n">signals</span> <span class="o">=</span> <span class="p">[[</span><span class="n">IRSignals</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">signals</span> <span class="nl">loadFromStandardUserDefaultsKey:</span><span class="s">@&quot;SIGNALS&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">IRSignal</span> <span class="o">*</span><span class="n">signal</span> <span class="o">=</span> <span class="p">[</span><span class="n">signals</span> <span class="nl">objectAtIndex:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">signal</span> <span class="nl">sendWithCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="nl">say:</span><span class="p">[</span><span class="n">NSString</span>  <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@を実行しました。&quot;</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">name</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;beaconから離れました。&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>これで上記の仕様が実現できます。
今回の実装はまだIRKitにしてもEstimote Beaconsにしてもさわりの部分しか実装していないのですが、他の仕様も合わせたりするとまだまだ面白いことでできるかと思います。
最近、生活が変わるような技術がどんどんでてきていて楽しいですね♪（ただハードを購入しなきゃいけないのでお金がかかってしまいますがw）
まだまだこれからも、生活を変えるような技術がでてくると思うのでそれキャッチアップして試せるものは試していこうと思います！！</p>

<p>Enjoy Technology!!!</p>

<h2>Ref</h2>

<ul>
<li><a href="http://getirkit.com/">IRKit</a></li>
<li><a href="http://estimote.com/">Estimote Beacons</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第５回 #potatotips に参加してきた。]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/03/17/potetotips5-nkjmoviecomposer/"/>
    <updated>2014-03-17T03:37:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/03/17/potetotips5-nkjmoviecomposer</id>
    <content type="html"><![CDATA[<p>先日ですが、#potatetips　（第五回）に参加させていただきました。
持ち時間一人５分のtips共有会なのですが、自分はAVFoundation周りの話をしてきました。
本当は実装しているときにこんなメソッド使うと便利だよとかこうすると迷走するからこうしたしたほうがいいよとかあればよかったのですが
いまいち思いつかなくて、自分でプラグイン作成して、これ使うと便利だよっ、知らなかったでしょう！！という感じに強制的にもっていった発表内容でした。
内容としては前回の発表のつづきで、以前作成したアプリの機能を切り出して、動画関連の処理を簡単に実装できるようにした（CocoaPods化）した話をしました。</p>

<script async class="speakerdeck-embed" data-id="f675b2008c7e013162b85e7a2e8ee0d7" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p><a href="https://github.com/nakajijapan/NKJMovieComposer">NKJMovieComposer</a></p>

<p>インストール方法は至って簡単で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod "NKJMovieComposer"</span></code></pre></td></tr></table></div></figure>


<p>でオッケーです。後は実装するファイルに<code>#import 'NKJMovieComposer.h'を追加すればOKです。</code></p>

<p>機能としては以下の機能が実装できます。</p>

<ul>
<li>動画結合</li>
<li>ワイプ</li>
<li>フェードイン・アウト</li>
</ul>


<p>詳しいことは<a href="https://github.com/nakajijapan/NKJMovieComposer">GitHub</a>をみていただくことにして、
まだエラー処理とかデバイス・OSに応じたカスタマイズがまだまだできていないので地道に実装していこうと思います。</p>

<p>最後に、発表者のみなさん、クックパッドさんおつかれさまでした！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant勉強会でLTした]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/02/28/vagrant-tips/"/>
    <updated>2014-02-28T20:34:00-08:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/02/28/vagrant-tips</id>
    <content type="html"><![CDATA[<p>社内でVagrant勉強会があったので参加・発表してきました。</p>

<p>あるサービスのVagrant化を進めていて、エンジニアは当然のことデザイナさんでもローカルで開発できるように環境をそろえていた時に苦労したちょっとしたTipsを発表しました。まぁちょっとしたことなのですが、はまると何時間もはまるときあるのでこういう機会があると大変助かります。。。</p>

<script async class="speakerdeck-embed" data-id="dc857f2082a0013107e95ea41e86eac8" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>僕の他にも公開しているメンバーがいるのでご紹介します。
こちらのブログにもリンクがあるので他の人の資料にもたどりつけると思います。</p>

<h3>うづら(udzura)さん</h3>

<p><a href="http://udzura.hatenablog.jp/entry/2014/02/28/140957">http://udzura.hatenablog.jp/entry/2014/02/28/140957</a>
(アフェリエイトおじさんです。。。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【iOS勉強会】ヤフー vs クラスメソッド に参加してきた]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/02/26/yxcm-epilogue/"/>
    <updated>2014-02-26T21:44:00-08:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/02/26/yxcm-epilogue</id>
    <content type="html"><![CDATA[<p>面白そうな勉強会が開催されると耳にして<a href="http://connpass.com/event/5159/">【iOS勉強会】ヤフー vs クラスメソッド</a> に参加してきました。</p>

<ul>
<li><p>ヤフーさん発表資料
<a href="http://techblog.yahoo.co.jp/ios/yxcm/">http://techblog.yahoo.co.jp/ios/yxcm/</a></p></li>
<li><p>クラスメソッドさん発表資料
<a href="http://dev.classmethod.jp/study_meeting/yxcm-epilogue/">http://dev.classmethod.jp/study_meeting/yxcm-epilogue/</a></p></li>
</ul>


<p>形式的にはYahoo!さんとクラスメソッドさんが交互にiOS開発に関連するテーマに対して発表してどちらグッドだったか競う会になっていました。よかったらその場でボタンを連打して投票する仕組みがあるのですが、リアルタイムにFacebook風ないいねの花火みたいなのでがドーンと別画面で表示されてわかるのはかなり面白かったです（Node.jsかな&hellip;）。</p>

<p>そのなかで便利そうなものをpickupして自分でもやってみました。</p>

<h2>code snippet</h2>

<h3><code>Code Snippet Library</code>を開いた状態にする</h3>

<p><img src="http://nakajijapan.github.io/images/posts/2014-02-28_02.png" alt="01" /></p>

<h3>対象のコードを選択しといてそれLibrary側にドラッグアンドドロップ</h3>

<p><img src="http://nakajijapan.github.io/images/posts/2014-02-28_01.png" alt="01" /></p>

<p>そうすると<code>My Code Snippet</code>が出来上がるのでそれを適当に編集すると終わりです。
作成されたSnippetは<code>/Users/username/Library/Developer/Xcode/UserData/CodeSnippets/</code>いかに保存されます。</p>

<p>試しにUIAlertViewをいれてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alertView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithTitle</span> <span class="o">:</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Title&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                                                    <span class="n">message</span> <span class="o">:</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Message&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                                                   <span class="n">delegate</span> <span class="o">:</span> <span class="n">self</span>
</span><span class='line'>                                          <span class="n">cancelButtonTitle</span> <span class="o">:</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                                          <span class="n">otherButtonTitles</span> <span class="o">:</span> <span class="nb">nil</span>
</span><span class='line'>                          <span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">alertView</span> <span class="nl">setTag:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">alertView</span> <span class="n">show</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Objective-Cって結構冗長になりがちなので、よく利用するものは登録しておくとよさそう。</p>

<h2>code template</h2>

<p>よくファイルを作成するときにはデフォルトでその親クラスに合わせたコードなりヘッダコメントなりテンプレートを作成してくれるのですが、カスタマイズしたくなったときは<code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates</code>にいっぱいテンプレートが用意されています。これを自分のディレクトリにコピーして利用するといいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">mkdir</span> <span class="o">-</span><span class="n">p</span> <span class="o">~/</span><span class="n">Library</span><span class="o">/</span><span class="n">Developer</span><span class="o">/</span><span class="n">Xcode</span><span class="o">/</span><span class="n">Templates</span><span class="o">/</span><span class="n">File</span> <span class="n">Templates</span>
</span><span class='line'><span class="n">cd</span>    <span class="o">~/</span><span class="n">Library</span><span class="o">/</span><span class="n">Developer</span><span class="o">/</span><span class="n">Xcode</span><span class="o">/</span><span class="n">Templates</span><span class="o">/</span><span class="n">File</span> <span class="n">Templates</span>
</span><span class='line'><span class="n">cp</span> <span class="o">/</span><span class="n">Applications</span><span class="o">/</span><span class="n">Xcode</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span><span class="n">Developer</span><span class="o">/</span><span class="n">Platforms</span><span class="o">/</span><span class="n">iPhoneOS</span><span class="p">.</span><span class="n">platform</span><span class="o">/</span><span class="n">Developer</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Xcode</span><span class="o">/</span><span class="n">Templates</span><span class="o">/</span><span class="n">File</span> <span class="n">Templates</span><span class="o">/*</span> <span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>File Templates</code>いかに<code>Cocoa Touch</code>ディレクトリがあるのですが自分がカスタマイズしたものだよとわかるように<code>My Cocoa Touch</code>とか作成してみる。</p>

<p>ファイルを作成するときにオプションで以下のような設定をするとオプションでテンプレートを利用するかしないか決定できるようです。<code>Objective-C class.xctemplate/TemplateInfo.plist</code>ファイルで設定するのですがXML形式なっているのでそこの<code>Options</code>以下に新しい設定を追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">Default</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">false</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">Identifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">Nakajijapan</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">Name</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">Nakajijapan</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">RequiredOptions</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">cocoaTouchSubclass</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">array</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">NSObject</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">UIViewController</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">array</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">Type</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">checkbox</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NSObject/___FILENAME___.h</code>を上書きしてもよいのですが、念のため自分用に作成しておきましょう。<code>NSObjectNakajijapan/___FILENAME___.h</code>な感じで。（suffixは適当です。。。）</p>

<h4>NSObjectNakajijapan/<strong><em>FILENAME</em></strong>.h</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  ___FILENAME___</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by ___FULLUSERNAME___.</span>
</span><span class='line'><span class="c1">//  Copyright ___YEAR___ ___FULLUSERNAME___. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="n">___IMPORTHEADER_cocoaTouchSubclass___</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">___FILEBASENAMEASIDENTIFIER___</span> : <span class="nc">___VARIABLE_cocoaTouchSubclass___</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>NSObjectNakajijapan/<strong><em>FILENAME</em></strong>.m</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  ___FILENAME___</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by ___FULLUSERNAME___.</span>
</span><span class='line'><span class="c1">//  Copyright ___YEAR___ ___FULLUSERNAME___. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;___FILEBASENAME___.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">___FILEBASENAMEASIDENTIFIER___</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">___FILEBASENAMEASIDENTIFIER___</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithNibName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">nibNameOrNil</span> <span class="nf">bundle:</span><span class="p">(</span><span class="n">NSBundle</span> <span class="o">*</span><span class="p">)</span><span class="nv">nibBundleOrNil</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithNibName:</span><span class="n">nibNameOrNil</span> <span class="nl">bundle:</span><span class="n">nibBundleOrNil</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Custom initialization</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Do any additional setup after loading the view.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで自分好みの設定にできました。</p>

<h3>参加してみて</h3>

<p>吉田 一星さんの発表が印象的で</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31669085" width="510" height="420" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/issaymk2/apple-31669085" title="Appleの先を行くポストタッチインターフェース" target="_blank">Appleの先を行くポストタッチインターフェース</a> </strong> from <strong><a href="http://www.slideshare.net/issaymk2" target="_blank">issaymk2</a></strong> </div></p>

<blockquote><p>既存のAPIをそのまま使うアイディアは他の誰かに実現されている
Appleが未だ実現されていない機能を先に作れ</p></blockquote>

<p>あえてブログでも書くようなものじゃなくてごくごく当たり前のことなのですが、これおもろくね？って思ったものはだいたいというかしょっちゅう世の中に出ちゃってるんですよね。その度に落胆しているnakajijapanですが。。。
まぁ、自分もまだAPIを利用してなんとかアプリを作っているレベルなのでドキュメントにものどこにもないような「え、そんなんできんの！！」っていわれるもの作っていきたいですね。もちろん、アプリのアイディアとか企画は別にして。技術的な観点からのはなしでした。まだまだ頑張りまっしゅ。</p>

<p>あと、自分でも使えそうなTipsが、今回のエントリ以外にたくさんあったのでちょこちょこ利用していこうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developers Summit 2014]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/02/15/developers-summit-2014/"/>
    <updated>2014-02-15T01:51:00-08:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/02/15/developers-summit-2014</id>
    <content type="html"><![CDATA[<p>先週ではありますが、Developers Summit 2014に参加してきました。
サミットが平日だったので全部はみれていませんが、いくつかのステージをみること
はできたのでそのメモを記します。</p>

<ul>
<li>Developers Summit 2014

<ul>
<li><a href="http://event.shoeisha.jp/devsumi/20140213/">http://event.shoeisha.jp/devsumi/20140213/</a></li>
</ul>
</li>
</ul>


<h2>iOSアプリケーションの継続的デリバリー</h2>

<ul>
<li>発表者

<ul>
<li><a href="https://event.shoeisha.jp/devsumi/20140213/session/430">https://event.shoeisha.jp/devsumi/20140213/session/430</a></li>
</ul>
</li>
<li>発表資料

<ul>
<li><a href="http://www.slideshare.net/numeha/ios-31199969">http://www.slideshare.net/numeha/ios-31199969</a></li>
</ul>
</li>
</ul>


<h3>どのくらいスピードが必要なのか</h3>

<ul>
<li>iOS１ヶ月で約四回リリース</li>
<li>ネックは申請降りるのに７日間必要。。。</li>
<li>1年で１２回のリリース</li>
<li>自分たちのリリースのリズムできてますか？

<ul>
<li>いつもリリースできる状態にしときましょう!!</li>
</ul>
</li>
<li>継続的デリバリー

<ul>
<li>ビジネスの主導権を握る為にCIやるんだ!!!</li>
</ul>
</li>
</ul>


<blockquote><p>価値のあるソフトウェアをはやく継続的にリリースする</p></blockquote>

<h3>徹底的に自動化してきた</h3>

<h4>コード品質のパイプライン</h4>

<ol>
<li>コード取得 &ndash;> Git</li>
<li>ビルド &ndash;> Xcode</li>
<li>コード行数 &ndash;> SLOCCount</li>
<li>重複コード &ndash;> DRY</li>
<li><p>警告 &ndash;> Warnnings</p></li>
<li><p>テストにはGHUnitを利用している</p></li>
<li>カバレッジはgcovr</li>
</ol>


<h3>製品品質のパイプライン</h3>

<ul>
<li>実記でのテストが必要</li>
<li>テストフレームワークを同封してビルドしている</li>
<li>自動でipaファイル作成</li>
<li>複数のデバイスに自動でインストール

<ul>
<li>fruitstrap or Instruments</li>
</ul>
</li>
<li>特定の端末のピンポイントでデプロイする</li>
<li>Frankというテストフレーム</li>
<li>httpで外部から複数代のios端末を操作</li>
<li>ios7からのTouch問うの操作API禁止</li>
</ul>


<p>どうしよう。。。</p>

<ul>
<li>解決策としてiOS6専用にしよう</li>
<li>iOS7はInstruments経由で操作</li>
<li>ビルドマシン一代につきiOS一代にいれよう</li>
<li>テストフレームワークを複数いれられない

<ul>
<li>シングルプロセスでしか動作しないらしい</li>
</ul>
</li>
</ul>


<p>どうしよう。。。</p>

<ul>
<li>MacサーバでVMサーバ作って複数台での端末で実装してみたよ

<ul>
<li>実機のテストにはさまざまなシリーズ・OSバージョンのiPhone,iPadを用意してるらしい</li>
</ul>
</li>
</ul>


<p>エンタープライズすごい！</p>

<h2>Tokyo MotionControl Network</h2>

<ul>
<li>Facebook

<ul>
<li><a href="https://www.facebook.com/TokyoMotioncontrolNetwork">https://www.facebook.com/TokyoMotioncontrolNetwork</a></li>
</ul>
</li>
</ul>


<p>モーションキャプチャを利用したさまざまなコンテンツの紹介をされていました。</p>

<h4>VIRTUAL FASHION</h4>

<ul>
<li><code>Kinect/PrimeSence</code>で作成</li>
<li>ボーントラッキングの技術をもちいてCGノ衣装をマッピング</li>
<li>360度マッピングしてる</li>
</ul>


<h4>TRANSSHOME</h4>

<ul>
<li>ポーズをとったその陰で家を自動生成してくれる</li>
<li>子供受けがいい</li>
</ul>


<h4>AIR SHODOU</h4>

<ul>
<li><code>Kinect</code>で作成</li>
<li>書道をモーションキャプチャを通して描くシステム</li>
</ul>


<h4>執事力</h4>

<ul>
<li>執事のようにきれいな姿勢で入れるか検定する</li>
<li>ボーントラッキングで検査している</li>
</ul>


<h4>うるしずく</h4>

<h4>nt-kinesys</h4>

<ul>
<li><code>PrimeSense</code>で作成</li>
</ul>


<h4>ゲゲゲの鬼太郎</h4>

<ul>
<li>近づくと全身がネズミ男になるらしいです</li>
</ul>


<h3>メモ</h3>

<p>他にもの以下のセッションが行われていました。</p>

<ul>
<li>モーションコントロールコンテンツの実装からみえてきたもの

<ul>
<li><a href="http://www.slideshare.net/NaojiTaniguchi/developer-summit-2014naojitaniguchi">http://www.slideshare.net/NaojiTaniguchi/developer-summit-2014naojitaniguchi</a></li>
</ul>
</li>
<li>モーションセンサーの現状と2014年の予測

<ul>
<li><a href="http://www.slideshare.net/kaorun55/devsumi-201414c5">http://www.slideshare.net/kaorun55/devsumi-201414c5</a></li>
</ul>
</li>
</ul>


<h2>所感</h2>

<p>今回一番勉強になったのはメインでリコーさんのiOSの発表で、いろいろ勉強させていただきました。
そこでいくつかのツールがでてきたので今度利用してみようと思います。
大企業もCIでやることはだいたいかわらないけど、実機数十台用意してそこにデプロイしてテストするとこは大企業だなと感じました。</p>

<ul>
<li>Frank

<ul>
<li><a href="http://www.testingwithfrank.com/">http://www.testingwithfrank.com/</a></li>
</ul>
</li>
<li>fruitstrap

<ul>
<li><a href="https://github.com/ghughes/fruitstrap">https://github.com/ghughes/fruitstrap</a></li>
<li><code>This project is no longer maintained.</code>が気になりました。。。</li>
</ul>
</li>
<li>Instruments

<ul>
<li>Xcodeに付属しているプロファイラツール</li>
<li>どの処理・メソッドが遅いのか、どこでメモリを消費しているのか調査する</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Confrence With Developer2に参加してLTしてきた]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/02/02/conference-with-developers-2014/"/>
    <updated>2014-02-02T23:32:00-08:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/02/02/conference-with-developers-2014</id>
    <content type="html"><![CDATA[<p>今回、Confrence With Developer2に参加してきました。
iOSに携わる、すべての開発者に向けたカンファレンスイベントだったのですが
いろいろ収穫があり、たくさん勉強させていただきました。</p>

<p>そんな僕もここでLTをしてきたのでのせときます。以前は、MA9でも発表している
ですがあくまでプロダクトとして発表だったのと今回は技術的なカンファレンス
なので技術的側面に焦点をあてて発表させていただきました。</p>

<p>話した内容はアプリでがんがん利用していた<code>AV Foundation</code>の話をしてきました。</p>

<script async class="speakerdeck-embed" data-id="ebaab3406d820131c6665e5071095c76" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>(発表時にディスプレイコネクタが認識しなくて発狂していたところ<code>@tamotamago</code>さんにパソコンを貸していただき大変感謝です！)</p>

<p>自分でもいろいろとメモっていたのですが以下のサイトがよく纏められていたのでご参照ください。</p>

<h3>Developers.IO</h3>

<ul>
<li><a href="http://dev.classmethod.jp/smartphone/ios-confwd2/">http://dev.classmethod.jp/smartphone/ios-confwd2/</a></li>
</ul>


<h3>Togetter</h3>

<ul>
<li><a href="http://togetter.com/li/623779">http://togetter.com/li/623779</a></li>
</ul>


<h3>Ustream録画</h3>

<ul>
<li><a href="http://www.ustream.tv/recorded/43319245">http://www.ustream.tv/recorded/43319245</a></li>
<li><a href="http://www.ustream.tv/recorded/43323576">http://www.ustream.tv/recorded/43323576</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVMutableVideoCompositionLayerInstructionの使い方]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/01/19/how-to-avmutablevideocompositionlayerinstruction/"/>
    <updated>2014-01-19T19:32:00-08:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/01/19/how-to-avmutablevideocompositionlayerinstruction</id>
    <content type="html"><![CDATA[<p>ビデオ用の<code>AVMutableCompositionTrack</code>にレイヤーを持たせることができます。
それが<code>AVMutableVideoCompositionLayerInstruction</code>なんですがこれが意外と
簡単に動画に対して<code>CGAffineTransform</code>を指定することで動画の移動・回転・拡大縮小
ができたりフェードイン・アウトの設定ができたのでメモ。</p>

<p>まずは対象のトラックをもとにして、レイヤーをインスタンス化します。</p>

<p><code>+ (AVMutableVideoCompositionLayerInstruction *)videoCompositionLayerInstructionWithAssetTrack:(AVAssetTrack *)track</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVMutableVideoCompositionLayerInstruction</span> <span class="o">*</span><span class="n">layerInstruction</span><span class="p">;</span>
</span><span class='line'><span class="n">layerInstruction</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableVideoCompositionLayerInstruction</span>
</span><span class='line'>                    <span class="nl">videoCompositionLayerInstructionWithAssetTrack:</span><span class="n">compositionVideoTrack</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>TransForm</h3>

<p><code>- (void)setTransformRampFromStartTransform:(CGAffineTransform)startTransform toEndTransform:(CGAffineTransform)endTransform timeRange:(CMTimeRange)timeRange</code></p>

<p>この例だと、３秒間左から動画が移動してきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// transition</span>
</span><span class='line'><span class="n">CGAffineTransform</span> <span class="n">rotateStart</span><span class="p">,</span> <span class="n">rotateEnd</span><span class="p">;</span>
</span><span class='line'><span class="n">startTime</span>    <span class="o">=</span> <span class="n">kCMTimeZero</span><span class="p">;</span>
</span><span class='line'><span class="n">timeDuration</span> <span class="o">=</span> <span class="n">CMTimeMake</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">rotateStart</span>  <span class="o">=</span> <span class="n">CGAffineTransformMakeScale</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">rotateStart</span>  <span class="o">=</span> <span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="o">-</span><span class="mi">720</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">rotateEnd</span>    <span class="o">=</span> <span class="n">CGAffineTransformTranslate</span><span class="p">(</span><span class="n">rotateStart</span><span class="p">,</span> <span class="mi">720</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">layerInstruction</span> <span class="nl">setTransformRampFromStartTransform:</span><span class="n">rotateStart</span>
</span><span class='line'>                                      <span class="nl">toEndTransform:</span><span class="n">rotateEnd</span>
</span><span class='line'>                                           <span class="nl">timeRange:</span><span class="n">CMTimeRangeMake</span><span class="p">(</span><span class="n">startTime</span><span class="p">,</span> <span class="n">timeDuration</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Opacity</h3>

<p><code>- (void)setOpacityRampFromStartOpacity:(float)startOpacity toEndOpacity:(float)endOpacity timeRange:(CMTimeRange)timeRange</code></p>

<p>この例だと最初から３秒間動画がフェードインしてきて最後の３秒間動画をフェードアウトします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// fade in</span>
</span><span class='line'><span class="n">CMTime</span> <span class="n">startTime</span><span class="p">,</span> <span class="n">timeDuration</span><span class="p">;</span>
</span><span class='line'><span class="n">startTime</span>    <span class="o">=</span> <span class="n">kCMTimeZero</span><span class="p">;</span>
</span><span class='line'><span class="n">timeDuration</span> <span class="o">=</span> <span class="n">CMTimeMake</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">layerInstruction</span> <span class="nl">setOpacityRampFromStartOpacity:</span><span class="mf">0.0</span>
</span><span class='line'>                                    <span class="nl">toEndOpacity:</span><span class="mf">1.0</span>
</span><span class='line'>                                       <span class="nl">timeRange:</span><span class="n">CMTimeRangeMake</span><span class="p">(</span><span class="n">startTime</span><span class="p">,</span> <span class="n">timeDuration</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// fade out</span>
</span><span class='line'><span class="n">startTime</span>    <span class="o">=</span> <span class="n">CMTimeSubtract</span><span class="p">(</span><span class="n">videoComposition</span><span class="p">.</span><span class="n">currentTimeDuration</span><span class="p">,</span> <span class="n">CMTimeMake</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="n">timeDuration</span> <span class="o">=</span> <span class="n">CMTimeMake</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">layerInstruction</span> <span class="nl">setOpacityRampFromStartOpacity:</span><span class="mf">1.0</span>
</span><span class='line'>                                    <span class="nl">toEndOpacity:</span><span class="mf">0.0</span>
</span><span class='line'>                                       <span class="nl">timeRange:</span><span class="n">CMTimeRangeMake</span><span class="p">(</span><span class="n">startTime</span><span class="p">,</span> <span class="n">timeDuration</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>Appleのドキュメントでこのクラスの説明をみると動画処理にしては結構シンプルだったので何個か試してみたのでした。
ただ、<code>CMTime</code>関連・<code>CGAffineTransform</code>関連の知識はないと結構何がなんだかわからなくなるのであらかじめ知識として
蓄えておくことはは必須ですね。</p>

<h2>Ref</h2>

<p><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVMutableVideoCompositionLayerInstruction_Class/Reference/Reference.html#//apple_ref/occ/instm/AVMutableVideoCompositionLayerInstruction/setTransformRampFromStartTransform:toEndTransform:timeRange:">https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVMutableVideoCompositionLayerInstruction_Class/Reference/Reference.html#//apple_ref/occ/instm/AVMutableVideoCompositionLayerInstruction/setTransformRampFromStartTransform:toEndTransform:timeRange:</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[動画関連の処理をする上で注意すること]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/01/19/avfoundation-checkpoint/"/>
    <updated>2014-01-19T19:32:00-08:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/01/19/avfoundation-checkpoint</id>
    <content type="html"><![CDATA[<p>以前の記事でも書いたのですが、<a href="https://itunes.apple.com/jp/app/the-ghost-movie-app-look-again/id696530211?mt=8">心霊動画アプリ「もう一度ご覧いただこう」</a>というアプリを作成したときにいろいろと苦労したことがあったので、それを書き留めておこうと思います。</p>

<h3>回転問題</h3>

<p>そのまま動画を保存すると270度になってしまっているので回転する必要があった</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CGAffineTransform transformVideo       = CGAffineTransformMakeTranslation(videoTrack.naturalSize.height, 0.0);
</span><span class='line'>CGAffineTransform transformVideoRotate = CGAffineTransformRotate(transformVideo, M_PI * 0.5);
</span><span class='line'>CGAffineTransform transformVideoMove   = CGAffineTransformTranslate(transformVideoRotate, -300, 0);
</span><span class='line'>[layerInstruction setTransform: transformVideoMove atTime:kCMTimeZero];</span></code></pre></td></tr></table></div></figure>


<p>結構、簡単で地味なことだったのですが、こういうことが原因で数日迷走していた日があったのでもう迷走しない為に。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy New Year]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/01/02/happy-new-year/"/>
    <updated>2014-01-02T20:22:00-08:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/01/02/happy-new-year</id>
    <content type="html"><![CDATA[<p>明けましておめでとうございます。</p>

<p>時が経つが年々早くなるのがだんだんと早く感じる今日この頃ですが、去年は自分がもう
３０年も生きたことになり、仕事にプライベートに考えさせられる一年だったと思います。</p>

<p>いかがおすごしでしょうか。
nakajijapanです。</p>

<p>去年を振り返ってみると、とにかく自分の可能性を信じつつ自分が未開拓な領域
をガンガン攻めた年ではありました。しかし、まだスタート地点に立ったところ
というか物足りないと感じてる次第です。もっとイケル！</p>

<p>殻を打ち破る日はまだ分からないですが、あきらめず自分のケツを叩きながら
一歩づつ前に突き進んでいこうと思います。</p>

<p>今年も仕事にプライベートにがんばるぞ！</p>

<p>今年もよろしくお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS勉強会 iBeaconでできること　に参加してきた]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/12/12/study-ibeacon/"/>
    <updated>2013-12-12T19:06:00-08:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/12/12/study-ibeacon</id>
    <content type="html"><![CDATA[<p>Developer&rsquo;s IOさんが主催する勉強会に参加してきました。
<a href="http://connpass.com/event/4225/">http://connpass.com/event/4225/</a></p>

<p>iOS7の発表がでてから<code>iBeacon</code>に興味を持ち出して、このにゅ〜てくのろじ〜を面白いことにつかえないかと調査していたのですが、今回もっと知識を深めるべく勉強会にさんかしてきました。そのメモを残しておこうと思います。</p>

<h1>【初級】iBeaconの基礎のキ</h1>

<p>開発者以外にひとでも分かるようにiBeaconというものをざっくり説明してました。</p>

<h2>iBeaconとは</h2>

<ul>
<li>BLEを利用している</li>
<li>Bluetooth onにしないといけない</li>
<li>CoreLocation.framework</li>
<li>iOS7がインストールされるからってBLEが利用されるわけではない

<ul>
<li>iOS7 + BLEが利用できるっていうのが重要</li>
</ul>
</li>
</ul>


<p>ざっくり定義すると</p>

<p><code>BLEを利用したAppleの距離と領域観測のサービス</code></p>

<p>です。</p>

<h2>利用したサービス</h2>

<ul>
<li>AppleStore

<ul>
<li>テーブルに近づくとiPhoneの紹介や下取りの情報が表示される</li>
</ul>
</li>
<li>Macy&rsquo;s

<ul>
<li>入店検知してクーポンの取得、おすすめ商品の紹介</li>
<li>O2O施策としてだいぶ確率されているようです</li>
</ul>
</li>
<li>スマポ

<ul>
<li>来店ポイントがたまる</li>
<li>日本でしっかりベジネスにしているサービスですね</li>
</ul>
</li>
<li>MLB

<ul>
<li>入場用のバーコード</li>
<li>point</li>
<li>クーポン</li>
<li>本日の対戦情報を表示してくれる</li>
<li>自分の座席情報を教えてくれる</li>
<li>とはいえ、現在まだベータ運用しているらしく、本番運用はまだのようですね</li>
</ul>
</li>
</ul>


<h2>よく利用される用語</h2>

<ul>
<li>Beacon

<ul>
<li>電子情報を受信して現在情報を知る電子機器のことをいうらしい

<ul>
<li><a href="http://e-words.jp/w/E38393E383BCE382B3E383B3.html">http://e-words.jp/w/E38393E383BCE382B3E383B3.html</a></li>
</ul>
</li>
</ul>
</li>
<li>BLE

<ul>
<li>2.4GHz の無線を使った近距離無線通信規格</li>
<li>少ない電池でもいままでよりも長くバッテリーが持つようにつくられている</li>
</ul>
</li>
<li>Advertise

<ul>
<li>アドバタイズ：ある機器が別の機器に管理情報を伝達すること</li>
<li>proximity UUID（企業）</li>
<li>major（建物）</li>
<li>minor（フロア）</li>
</ul>
</li>
<li>リージョン監視

<ul>
<li>領域の入出チェック（虜域観測）</li>
<li>リージョン=UUID</li>
<li>出るイベントはドキュメント情報は２０秒っぽいが実際は３０秒かかるっぽい</li>
</ul>
</li>
<li>Ranging

<ul>
<li>エリア内のBeaconの情報を取得（距離推定）</li>
<li>Beacon距離

<ul>
<li>proximity

<ul>
<li>距離判定は４つとれる</li>
<li>相対的に変わる</li>
</ul>
</li>
<li>accuracy

<ul>
<li>位置情報取得の精度を指定</li>
<li>もちろん精度が良いほど正確だが電池の量も多い</li>
<li>領域はだいたいのもの</li>
</ul>
</li>
<li>rssi

<ul>
<li>Received Signal Strength Indication</li>
<li>無線通信機器が受信する信号の強度を測定するための回路または信号</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>電波法！！！！

<ul>
<li>技適マークがついていない無線機は電波法違反らしい</li>
<li>estimoteのビーコン端末は日本実運用すると電波法違反になるぽいですね</li>
</ul>
</li>
</ul>


<h2>iBeaconを使ってみよう</h2>

<p>iBeaconアプリの作り方を二つのキーワードで説明しています。
以下の二つをもとに実装を行っていく</p>

<ul>
<li>距離観測（Ranging）

<ul>
<li>各Beaconとの距離を約１秒おきに監視する</li>
<li>それぞれの領域をみる</li>
</ul>
</li>
<li><p>領域観測のた仕様</p>

<ul>
<li>Beaconグループで作成される領域</li>
</ul>
</li>
<li><p>uuidgen
ビーコン端末に固有のID振らないといけないのでコマンドを利用して生成したりできます</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ uuidgen
</span><span class='line'>8649794A-0C6C-4D82-99F2-7084D6C231B1</span></code></pre></td></tr></table></div></figure>


<h1>Beaconアプリの作り方</h1>

<p>具体的にコードレベルでどんな風に作成されるのか、ハマりどころを説明していただきました。</p>

<ul>
<li>具体的に実装がでてきたコード

<ul>
<li><a href="https://github.com/suwa-yuki/BeaconSample">https://github.com/suwa-yuki/BeaconSample</a></li>
</ul>
</li>
<li>ハマりどころ

<ul>
<li>startMonitoringForRegionはバックグラウンドおk</li>
</ul>
</li>
</ul>


<h1>LTで話されたことメモ</h1>

<ul>
<li>Androidでの確認はほぼできない

<ul>
<li>Nexus5だと大丈夫</li>
<li>あとは海外の端末を輸入する</li>
<li>iPhoneは無論OK</li>
</ul>
</li>
</ul>


<h1>まとめ</h1>

<p>今回はiBeaconを使って開発する為の基本知識をベースとした勉強会でたくさん学ばしていいただきました。
まだまだ勉強不足なところはあるけれど、今回の勉強会でだいぶもやもやしていたところが解消したので次の開発に活かそうと思います。
しかし、つい先日estimoteのbeacon端末を購入したのですが技適マークがついていないのは残念です。。。ビジネスで
利用するとしたらまた別の端末（日本の電波法に準拠したハード製品）を購入してやらないとだめですね。。。</p>

<h1>参考スライド</h1>

<p><a href="http://www.slideshare.net/RikitakeOohashi/i-beacon-29135007">http://www.slideshare.net/RikitakeOohashi/i-beacon-29135007</a>
<a href="http://www.slideshare.net/yuki0211s/i-beacon-29135560">http://www.slideshare.net/yuki0211s/i-beacon-29135560</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AV Foundation Frameworkを利用して動画の結合を行う]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/10/22/how-to-combine-some-movies-with-avfoundation/"/>
    <updated>2013-10-22T19:06:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/10/22/how-to-combine-some-movies-with-avfoundation</id>
    <content type="html"><![CDATA[<p>こんにちはあのnakajijapanです。 以前、心霊動画アプリで「もう一度ご覧いただこう」 というアプリをリリースしました。 心霊動画アプリなので動画と動画を結合したり動画の上に動画を重ねて実装したりといろいろ やるわけですが今回はじめてということもあり沢山勉強になったのでここいらで自分の頭の整理 がてら情報をまためようと思います。</p>

<p>今回主に利用したのが「AV Foundation」です。</p>

<p>ざっくりいうとメディア情報（動画）を細かく制御できるようにしたフレームワークで、メタ情報の 取得、作成、編集、再エンコードができたりできます。</p>

<p>階層的には以下のような階層に存在して、簡単に動画とか写真の処理をしたい場合は</p>

<ul>
<li>Media Player Framework(MPMoviePlayerController, MPMoviePlayerViewController)</li>
<li>UIKit(UIIMagePickerController)</li>
</ul>


<p>を実装すれば難なく実装できちゃいます。ただ、今回は動画にいろんなエフェクトをいれたいのでもっと細かく制御 できる下の階層のフレームワークを使いました。感覚的に細かい制御できるようになるのでそのぶん面倒くさいのは いうまでもありません。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-10-22_01.png" alt="layer" /></p>

<p><a href="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html">https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html</a></p>

<p>では実際にどう実装していけばいいかなのですが、そのために結構なクラスを利用するのでそれぞれざっくり説明していきます。</p>

<h3>AVAsset</h3>

<p>iPodや写真ライブラリのメディア情報をオブジェクトとして保持することができ、これからいろんなの情報を切り出して取得すること ができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVAsset</span><span class="o">*</span>                   <span class="n">videoAsset</span><span class="p">;</span>
</span><span class='line'><span class="n">videoAsset</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVURLAsset</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="n">movieUrl</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AVAssetTrack</h3>

<p>アセットの情報からトラックレベルで切り出した情報。（うまく翻訳できなかった・・・） 例えば、アセットから動画と音声に切り分ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVAsset</span><span class="o">*</span>                   <span class="n">videoAsset</span><span class="p">;</span>
</span><span class='line'><span class="n">AVAssetTrack</span><span class="o">*</span>              <span class="n">videoTrack</span><span class="p">;</span>
</span><span class='line'><span class="n">AVAssetTrack</span><span class="o">*</span>              <span class="n">audioTrack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">videoAsset</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVURLAsset</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL:</span><span class="n">movieUrl</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// アセットからトラックを取得</span>
</span><span class='line'><span class="n">videoTrack</span> <span class="o">=</span> <span class="p">[[</span><span class="n">videoAsset</span> <span class="nl">tracksWithMediaType:</span><span class="n">AVMediaTypeVideo</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">audioTrack</span> <span class="o">=</span> <span class="p">[[</span><span class="n">videoAsset</span> <span class="nl">tracksWithMediaType:</span><span class="n">AVMediaTypeAudio</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AVMutableCompositionTrack</h3>

<p>様々なメディア情報を結合したものです。このクラスで様々に編集された動画や音声を結合したり、時間の制御をしたり するクラスです。最終的にAVAssetExportSessionに渡してエキスポート処理（実際にファイルに保存する）します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVMutableComposition</span><span class="o">*</span>      <span class="n">mixComposition</span><span class="p">;</span>
</span><span class='line'><span class="n">AVMutableCompositionTrack</span><span class="o">*</span> <span class="n">compositionVideoTrack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// コンポジション作成</span>
</span><span class='line'><span class="n">mixComposition</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableComposition</span> <span class="n">composition</span><span class="p">];</span>
</span><span class='line'><span class="n">compositionVideoTrack</span> <span class="o">=</span> <span class="p">[</span><span class="n">mixComposition</span> <span class="nl">addMutableTrackWithMediaType:</span><span class="n">AVMediaTypeVideo</span> <span class="nl">preferredTrackID:</span><span class="n">kCMPersistentTrackID_Invalid</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AVMutableVideoComposition</h3>

<p>AVMutableCompositionで新しいトラックを追加したときに返り値としてとれるもです。追加されたオブジェクトの参照で空のトラックって感じなんでしょうか。 ここに実際のメディア情報を入れていきます。メディアタイプで動画とか音声とか格納することができます。あと、この動画の何秒 から何秒間を何秒目に結合させるとかできたりします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">compositionVideoTrack</span> <span class="o">=</span> <span class="p">[</span><span class="n">mixComposition</span> <span class="nl">addMutableTrackWithMediaType:</span><span class="n">AVMediaTypeVideo</span> <span class="nl">preferredTrackID:</span><span class="n">kCMPersistentTrackID_Invalid</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">compositionVideoTrack</span> <span class="nl">insertTimeRange:</span><span class="n">CMTimeRangeMake</span><span class="p">(</span><span class="n">kCMTimeZero</span><span class="p">,</span> <span class="n">timeDuration</span><span class="p">)</span>
</span><span class='line'>                               <span class="nl">ofTrack:</span><span class="n">_videoTrack</span>
</span><span class='line'>                                <span class="nl">atTime:</span><span class="n">kCMTimeZero</span>
</span><span class='line'>                                 <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">compositionVideoTrack</span> <span class="nl">setPreferredTransform:</span><span class="p">[</span><span class="n">videoTrack</span> <span class="n">preferredTransform</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AVMutableVideoCompositionLayerInstruction</h3>

<p>アセットのトラックに対して回転、透過度、クロッピングができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// ここでは動画を小さくして指定の位置へ移動させてます。</span>
</span><span class='line'><span class="n">CGAffineTransform</span> <span class="n">scale</span>      <span class="o">=</span> <span class="n">CGAffineTransformMakeScale</span><span class="p">(</span><span class="mf">0.30f</span><span class="p">,</span> <span class="mf">0.30f</span><span class="p">);</span>
</span><span class='line'><span class="n">CGAffineTransform</span> <span class="n">trnsration</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">406</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">AVMutableVideoCompositionLayerInstruction</span><span class="o">*</span> <span class="n">_layerInstruction</span><span class="p">;</span>
</span><span class='line'><span class="n">_layerInstruction</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableVideoCompositionLayerInstruction</span> <span class="nl">videoCompositionLayerInstructionWithAssetTrack:</span><span class="n">_compositionVideoTrack</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">_layerInstruction</span> <span class="nl">setTransform:</span><span class="n">CGAffineTransformConcat</span><span class="p">(</span><span class="n">scale</span><span class="p">,</span> <span class="n">trnsration</span><span class="p">)</span> <span class="nl">atTime:</span><span class="n">kCMTimeZero</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>AVAssetExportSession</h3>

<p>さまざまなアセット情報を利用して指定されたフォーマットに変換したり動画のトリミングを行います。 例えば、mov形式、720x720サイズでファイルに保存させたりで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">videoComp</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableVideoComposition</span> <span class="n">videoComposition</span><span class="p">];</span>
</span><span class='line'><span class="n">videoComp</span><span class="p">.</span><span class="n">renderSize</span>    <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">720</span><span class="p">,</span> <span class="mi">720</span><span class="p">);</span>
</span><span class='line'><span class="n">videoComp</span><span class="p">.</span><span class="n">frameDuration</span> <span class="o">=</span> <span class="n">CMTimeMake</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span> <span class="c1">// framerate</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// AVCompositionをベースにAVAssetExportを生成</span>
</span><span class='line'><span class="n">assetExportSession</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVAssetExportSession</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAsset:</span><span class="n">mixComposition</span> <span class="nl">presetName:</span><span class="n">AVAssetExportPreset1280x720</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 合成用のVideoCompositionを設定</span>
</span><span class='line'><span class="n">assetExportSession</span><span class="p">.</span><span class="n">videoComposition</span> <span class="o">=</span> <span class="n">videoComp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// エクスポートファイルの設定</span>
</span><span class='line'><span class="n">NSURL</span> <span class="o">*</span><span class="n">composedMovieUrl</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">fileURLWithPath:</span><span class="n">composedMoviePath</span><span class="p">];</span>
</span><span class='line'><span class="n">assetExportSession</span><span class="p">.</span><span class="n">outputFileType</span> <span class="o">=</span> <span class="n">AVFileTypeQuickTimeMovie</span><span class="p">;</span>
</span><span class='line'><span class="n">assetExportSession</span><span class="p">.</span><span class="n">outputURL</span> <span class="o">=</span> <span class="n">composedMovieUrl</span><span class="p">;</span>
</span><span class='line'><span class="n">assetExportSession</span><span class="p">.</span><span class="n">shouldOptimizeForNetworkUse</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// エキスポート処理</span>
</span><span class='line'><span class="p">[</span><span class="n">assetExportSession</span> <span class="nl">exportAsynchronouslyWithCompletionHandler:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">([</span><span class="n">exportSession</span> <span class="n">status</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">AVAssetExportSessionStatusFailed:</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Export failed: %@&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">exportSession</span> <span class="n">error</span><span class="p">]</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">AVAssetExportSessionStatusCancelled:</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Export canceled&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>主に利用するクラスを説明しました。これらを駆使して実装すれば簡単な動画の結合ができるようになります。</p>

<p>だいたいの大枠は以下の図を見ると何となくわかるかもしれませんね。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-10-22_02.png" alt="layer" /></p>

<p><a href="https://developer.apple.com/library/ios/DOCUMENTATION/AudioVideo/Conceptual/AVFoundationPG/Articles/03_Editing.html">https://developer.apple.com/library/ios/DOCUMENTATION/AudioVideo/Conceptual/AVFoundationPG/Articles/03_Editing.html</a></p>

<h2>まとめ</h2>

<p>どうでしょう。ざっくりとですが動画を結合するのに必要なクラスの説明とどのように実装されていくのかをざっくり 説明しました。本当に最初の方は？？？となってしまうと思いますが実装していくうちに分かってくるようになります。 あとこれ系の情報はあんまりネット上にはないのでしっかりと学びたいもっと動画カスタマイズしたという人がいれば やはり<code>AV Foundation Programming Guide</code>をじっくり読むのが最短だししっかり理解できるとおもいました。あと困った ことがあったら <a href="http://stackoverflow.com/">http://stackoverflow.com/</a> で同じ人が困っているかもしれないのでみるといいです。</p>

<p>応用編としては動画をスローモーションにさせたり、ワイプのような動画を作成したり、画像をアニメーションさせたりと いろいろありますが説明していこうと思います。というか時間がたったら忘れそうな知識なのでやります。。。</p>

<h2>Reference</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/AVFoundationPG.pdf">AV Foundation Programming Guide</a></li>
<li><a href="https://developer.apple.com/wwdc/videos/">Moving to AV Kit and AV Foundation – 606</a></li>
<li><a href="https://developer.apple.com/wwdc/videos/">Core Image Effects and Techniques – 509</a></li>
<li><a href="https://developer.apple.com/wwdc/videos/">Advanced Editing with AV Foundation – 612</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[心霊動画アプリ 「もう一度ご覧いただこう」をリリースしました。]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/09/30/released-iphone-app-ghost-movie/"/>
    <updated>2013-09-30T02:17:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/09/30/released-iphone-app-ghost-movie</id>
    <content type="html"><![CDATA[<p><img src="http://a1745.phobos.apple.com/us/r30/Purple6/v4/88/a2/77/88a27754-3407-af16-2c8d-2bfec9c508f0/mzl.llawgtne.png" alt="心霊動画アプリ もう一度ご覧いただこう" /></p>

<p><a href="https://itunes.apple.com/jp/app/the-ghost-movie-app-look-again/id696530211?mt=8" target="_blank"><img src="http://nakajijapan.github.io/images/apple_store.png" /></a></p>

<p>先日ではありますがnakajijapan所属するチーム「恥知らず」で次なるアプリをリリースしました。
その名も</p>

<h3>心霊動画アプリ 「もう一度ご覧いただこう」</h3>

<p><a href="http://owkr.info/movie">http://owkr.info/movie</a></p>

<p>です。</p>

<p>構想は３年前からあったのですが僕の技術力不足で無理！とか言って、最初はその前進となる</p>

<h3>心霊写真アプリ「おわかりいただけただろうか」</h3>

<p><a href="http://owkr.info">http://owkr.info</a></p>

<p>を作成しました。その後時を経て、そろそろできるんじゃねという根拠ない自信がありまして
作成するにいたった次第です。今回はそのリリースが出来ましたよっていうご報告であります！</p>

<p>今回動画アプリを作成してみて、自分としてグッドっだったのは</p>

<ul>
<li>AVFoundationガリガリガリガリいじったし（未知の領域への挑戦）

<ul>
<li>動画動詞の結合</li>
<li>動画内でのアニメーション</li>
<li>動画のスローモーション</li>
<li>動画内に動画をいれる（ワイプ）</li>
</ul>
</li>
<li>いろんなTips学んだ

<ul>
<li>シュミレータで効率的に開発していく方法</li>
<li>iOSのバージョンのデザインの差異（主に位置によるずれ）の直し方</li>
</ul>
</li>
<li>キャンペーンの出し方

<ul>
<li>以前にリリースアプリと連携デザインに統一感をもたせた</li>
</ul>
</li>
</ul>


<p>失敗や改善した方がいいなというのも何個かあって</p>

<p>iOS7でチェックしとけばよかった。しかもガンガンみんなiOS7にしてしまったのでこれはつらかった・・
iOS7でテストして仮に問題が発生したときにその対応でリリースが遅れるのは避けたかったのでちょっと
最後まで避けてたのが仇となりました。無念。やりかたとしては、新しいバージョンがリリース間近に
なった場合はかならず確認を行うことをマストにしたほうがいいですね。これ勉強！</p>

<p>リリースタイミングを逃しました。本当は夏にリリースすれば良かったのですが僕の技術力不足であえなく断念して
しまいました。。。</p>

<p>あとは、デザイナの確認作業についてです。デザイナにはある程度できあがらないとテストや確認出来ない状態でしたし、
毎回自分のPCでビルドして渡すのはかなり面倒でした。（のでこの作業はほとんどやってない・・・）なので自分が修正
したらすぐに自分の実機やシミュレータでがんがん確認出来るような状況を作ればなと思っていました。会社だとjenkins
でビルドしてそれをダウンロードできる基盤があるのでそれ参考に個人でも作成してみようと思う。</p>

<p>肝心のiOS7でのおばけが表示されないバグがありますが先日修正したものを申請しましたのでもう少しでiOS7にした人も
使えることでしょう！！</p>

<p>とりあえず、リリースできてよかったのです。</p>

<p>また、いろんなことに挑戦していきたい。</p>

<p>今後はもう一度の使い方なり、AVFoundationのTipsをちょこちょこ書いていこうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIButtonのカスタマイズ - ライトON/OFFを制御するボタンを作成してみた]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/09/18/customize-uibutton/"/>
    <updated>2013-09-18T20:19:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/09/18/customize-uibutton</id>
    <content type="html"><![CDATA[<p>iPhoneについているライトのON/OFFを制御したいのですが、ボタンをそのまま流量できるのかなと思いきや
UIImagePickerControllerを利用しないで実装する場合はイベントしか用意されておらずデザインも自分で実装
しないといけないようです。</p>

<p>なので自分なりにそれっぽいのを実装してみました。
（とりあえず手動でon/offで切り替えるUIにしてます）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// ライトが利用できたら表示</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">device</span><span class="p">.</span><span class="n">torchAvailable</span> <span class="o">==</span> <span class="n">YES</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIButton</span><span class="o">*</span> <span class="n">toggleLightButton</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIButton</span> <span class="nl">buttonWithType:</span><span class="n">UIButtonTypeCustom</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toggleLightButton</span> <span class="nl">setFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">55</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toggleLightButton</span> <span class="nl">setTitle:</span><span class="s">@&quot;ON&quot;</span> <span class="nl">forState:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// レイヤー内でボタンデザインの編集を行う</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setCornerRadius:</span><span class="mf">25.0f</span><span class="p">];</span><span class="c1">// 角丸</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setMasksToBounds:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBorderWidth:</span><span class="mf">2.5f</span><span class="p">];</span><span class="c1">// 枠線の太さ</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBorderColor:</span><span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">1.0</span> <span class="nl">green:</span><span class="mf">1.0</span> <span class="nl">blue:</span><span class="mf">1.0</span> <span class="nl">alpha:</span><span class="mf">0.7</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]];</span><span class="c1">// 枠線の色</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBackgroundColor:</span><span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">1.0</span> <span class="nl">green:</span><span class="mf">1.0</span> <span class="nl">blue:</span><span class="mf">1.0</span> <span class="nl">alpha:</span><span class="mf">0.3</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]];</span><span class="c1">// 背景色</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toggleLightButton</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">toggleChangeTorchMode:</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 画像を左側に埋め込む</span>
</span><span class='line'>    <span class="n">UIImage</span><span class="o">*</span> <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;light.png&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CALayer</span><span class="o">*</span> <span class="n">imgLayer</span> <span class="o">=</span> <span class="p">[</span><span class="n">CALayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>    <span class="n">imgLayer</span><span class="p">.</span><span class="n">contents</span> <span class="o">=</span> <span class="n">CFBridgingRelease</span><span class="p">([</span><span class="n">image</span> <span class="n">CGImage</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">imgLayer</span><span class="p">.</span><span class="n">frame</span>    <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toggleLightButton</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer:</span><span class="n">imgLayer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 文字列のpaddingを設定する</span>
</span><span class='line'>    <span class="n">UIEdgeInsets</span> <span class="n">insets</span> <span class="o">=</span> <span class="n">toggleLightButton</span><span class="p">.</span><span class="n">contentEdgeInsets</span><span class="p">;</span>
</span><span class='line'>    <span class="n">insets</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="mf">20.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">toggleLightButton</span><span class="p">.</span><span class="n">contentEdgeInsets</span> <span class="o">=</span> <span class="n">insets</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">toggleLightButton</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際できたのがこんな感じ。
なんかそれっぽくできました。（アイコンは当てなのであしからず）</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-09-18_01.png" alt="ss" /></p>

<p>基本は<code>CALayer</code>でデザインの修正をおこなう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'>    <span class="c1">// レイヤー内でボタンデザインの編集を行う</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setCornerRadius:</span><span class="mf">25.0f</span><span class="p">];</span><span class="c1">// 角丸</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setMasksToBounds:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBorderWidth:</span><span class="mf">2.5f</span><span class="p">];</span><span class="c1">// 枠線の太さ</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBorderColor:</span><span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">1.0</span> <span class="nl">green:</span><span class="mf">1.0</span> <span class="nl">blue:</span><span class="mf">1.0</span> <span class="nl">alpha:</span><span class="mf">0.7</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]];</span><span class="c1">// 枠線の色</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">toggleLightButton</span> <span class="n">layer</span><span class="p">]</span> <span class="nl">setBackgroundColor:</span><span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">1.0</span> <span class="nl">green:</span><span class="mf">1.0</span> <span class="nl">blue:</span><span class="mf">1.0</span> <span class="nl">alpha:</span><span class="mf">0.3</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]];</span><span class="c1">// 背景色</span>
</span><span class='line'>    <span class="p">[</span><span class="n">toggleLightButton</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">toggleChangeTorchMode:</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>画像を組み込んだ場合は文字と被るといけないので文字の表示位置をずらします。
XIBの場合はIBの左側のメニューで設定できるのですが、それを実装で行うときは<code>UIEdgeInsets</code>クラスを
利用します。CSSのイメージでいうとpaddingをイメージして設定すると想像できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'>    <span class="c1">// 文字列のpaddingを設定する</span>
</span><span class='line'>    <span class="n">UIEdgeInsets</span> <span class="n">insets</span> <span class="o">=</span> <span class="n">toggleLightButton</span><span class="p">.</span><span class="n">contentEdgeInsets</span><span class="p">;</span>
</span><span class='line'>    <span class="n">insets</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="mf">20.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">toggleLightButton</span><span class="p">.</span><span class="n">contentEdgeInsets</span> <span class="o">=</span> <span class="n">insets</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>UIButton</code>でいろいろカスタマイズしてみました。ほとんどはUIViewを親にもっていて、そのなかにCALayerをもっているのです。
そのCALayerをうまく使ってデザインすればいい感じにカスタマイズができますよって話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIKitで人魂つくってみた]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/09/07/create-hitodama-with-uikit/"/>
    <updated>2013-09-07T07:42:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/09/07/create-hitodama-with-uikit</id>
    <content type="html"><![CDATA[<p>お化けアプリを絶賛作成中なのですが、そのなかで世界観を少しでも作るべくいろいろ試行錯誤しているのですが、ちょっとトップに
人魂でもいれてみようじゃないかと思い立って作ってみました。</p>

<p>iOS5からCore AnimationなるものがサポートされていてパーティクルエフェクトがUIKitでも作成できるようになったので実装してみました。
以前はCocos2Dのフレームワーク情報で作成していたのですがそれを利用しないのは初めて。</p>

<p>まずはフレームワークをインポートする</p>

<h2>1</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;QuartzCore/QuartzCore.h&gt;</span></code></pre></td></tr></table></div></figure>


<h2>2</h2>

<p>あとは表現したものを想像して実装するのみ！！！！っていってもパラメータが沢山あるので
感覚的にGUIで設定できてその状態のパラメータをみれるツールをつかいました。</p>

<ul>
<li>UIEffectDesigner

<ul>
<li><a href="http://www.touch-code-magazine.com/uieffectdesigner/">http://www.touch-code-magazine.com/uieffectdesigner/</a></li>
</ul>
</li>
</ul>


<p>これにfire ballっていのがあったのでそれを参考にしつつ自分なりに調整してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CAEmitterLayer</span><span class="o">*</span> <span class="n">fireEmitter</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAEmitterLayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>    <span class="n">fireEmitter</span><span class="p">.</span><span class="n">emitterPosition</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fireEmitter</span><span class="p">.</span><span class="n">emitterSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fireEmitter</span><span class="p">.</span><span class="n">renderMode</span> <span class="o">=</span> <span class="n">kCAEmitterLayerAdditive</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CAEmitterCell</span><span class="o">*</span> <span class="n">fire</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAEmitterCell</span> <span class="n">emitterCell</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">birthRate</span>     <span class="o">=</span> <span class="mi">250</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">lifetime</span>      <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">lifetimeRange</span> <span class="o">=</span> <span class="mf">2.06</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">velocity</span>      <span class="o">=</span> <span class="mi">26</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">velocityRange</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">color</span>         <span class="o">=</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">0.0</span> <span class="nl">green:</span><span class="mf">0.0</span> <span class="nl">blue:</span><span class="mf">0.05</span> <span class="nl">alpha:</span><span class="mf">1.0</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">redRange</span>      <span class="o">=</span> <span class="mf">0.12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">greenRange</span>    <span class="o">=</span> <span class="mf">0.12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">blueRange</span>     <span class="o">=</span> <span class="mf">0.12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">contents</span>      <span class="o">=</span> <span class="p">(</span><span class="kt">id</span><span class="p">)[[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;particle.png&quot;</span><span class="p">]</span> <span class="n">CGImage</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">fire</span> <span class="nl">setName:</span><span class="s">@&quot;fire&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">alphaRange</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">scale</span>      <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">scaleRange</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">spin</span>       <span class="o">=</span> <span class="mf">1.56</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">spinRange</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">alphaSpeed</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.33</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">scaleSpeed</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">emissionRange</span>     <span class="o">=</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">emissionLongitude</span> <span class="o">=</span> <span class="mf">1.57</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">emissionLatitude</span>  <span class="o">=</span> <span class="mf">2.33</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">xAcceleration</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">yAcceleration</span> <span class="o">=</span> <span class="o">-</span><span class="mi">80</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fire</span><span class="p">.</span><span class="n">zAcceleration</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fireEmitter</span><span class="p">.</span><span class="n">emitterCells</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObject:</span><span class="n">fire</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer:</span><span class="n">fireEmitter</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とりあえずこれで自分なりの人魂作成に成功しました。
パラメータをいろいろ覚えなければいけないものが沢山あるのでちょっと覚えるの大変だなという印象。
今回その煩雑さをUIEffectDesignerで補完しましたが、それでもパラメータがどのような効果があるのかはある程度理解しておく必要があるようです。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2013-09-08_01.png" alt="ss" /></p>

<h3>参照</h3>

<p>iOS Developer Library
<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CAEmitterLayer_class/Reference/Reference.html">https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CAEmitterLayer_class/Reference/Reference.html</a></p>

<p>UIEffectDesigner
<a href="http://www.touch-code-magazine.com/uieffectdesigner/">http://www.touch-code-magazine.com/uieffectdesigner/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update To Rails4]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/07/13/update-rails4/"/>
    <updated>2013-07-13T15:13:00-07:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/07/13/update-rails4</id>
    <content type="html"><![CDATA[<p>自分のサービスのRailsのversionがまだ<code>3.2</code>だったので地道にRails4にアップデートしました。
その際に必要になった作業をメモっときます。</p>

<h2>attr_accessible is extracted out of Rails into a gem.</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>E, [2013-07-04T09:54:39.926880 #2726] ERROR -- : `attr_accessible` is extracted out of Rails into a gem. Please use new recommended protection model for params(strong_parameters) or add `protected_attributes` to your Gemfile to use old one. (RuntimeError)</span></code></pre></td></tr></table></div></figure>


<p><code>attr_accessible</code>はRailsから省いて<code>strong_parameters</code>を利用してとのこと。
振るいものを利用するなら<code>protected_attributes</code>っていうGem使ってね。
しかし、今回は<code>strong_parameters</code>を記述していきます。</p>

<p>とりあえずModelからの排除を行う。</p>

<h2>DEPRECATION WARNING: config.whiny_nils option is deprecated and no longer works.</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEPRECATION WARNING: config.whiny_nils option is deprecated and no longer works. (called from block in &lt;top (required)&gt; at /private/var/www/frustration/config/environm
</span><span class='line'>ents/development.rb:10)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>whiny_nils

<ul>
<li>初期化されていないオブジェクトが呼び出させたときに、警告を表示する</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">-  # Log error messages when you accidentally call methods on nil</span>
</span><span class='line'><span class="gd">-  config.whiny_nils = true</span>
</span><span class='line'><span class="gd">-</span>
</span></code></pre></td></tr></table></div></figure>


<h2>config.eager_load is set to nil.</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>config.eager_load is set to nil. Please update your config/environments/*.rb files accordingly:
</span><span class='line'>
</span><span class='line'>  * development - set it to false
</span><span class='line'>  * test - set it to false (unless you use a tool that preloads your test environment)
</span><span class='line'>  * production - set it to true
</span></code></pre></td></tr></table></div></figure>


<p>必須の設定項目増えたので<code>rails new</code>して作成された環境ファイルを眺めてみる。</p>

<h2>The provided regular expression</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>E, [2013-07-04T12:00:26.429744 #7376] ERROR -- : The provided regular expression is using multiline anchors (^ or $), which may present a security risk. Did you mean to use \A and \z, or forgot to add the :multiline =&gt; true option? (ArgumentError)
</span></code></pre></td></tr></table></div></figure>


<p>正規表現の処理にもセキュリティが強化されていました。
一行を考慮したデータのチェック<code>^</code>なら<code>\A</code>、<code>$</code>なら<code>\z</code>にすると意図したチェックになるよ。
複数行を考慮してるんだよ！ってときは<code>:multiline =&gt; true</code>にしてね！</p>

<p>自分のValidationは一行のデータを考慮しているので修正します。</p>

<h2>You should not use the <code>match</code> method in your router without specifying an HTTP method.</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>E, [2013-07-04T12:07:42.318503 #7626] ERROR -- : You should not use the `match` method in your router without specifying an HTTP method.
</span><span class='line'>If you want to expose your action to both GET and POST, add `via: [:get, :post]` option.
</span><span class='line'>If you want to expose your action to GET, use `get` in the router:
</span><span class='line'>  Instead of: match &quot;controller#action&quot;
</span><span class='line'>  Do: get &quot;controller#action&quot; (RuntimeError)
</span></code></pre></td></tr></table></div></figure>


<p><code>match</code>の代わりにHTTPメソッドをちゃんと宣言しようぜ！っていうメッセージ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">-  match &#39;home&#39; =&gt; &#39;home#index&#39;, :via =&gt; :get</span>
</span><span class='line'><span class="gi">+  get &#39;home&#39; =&gt; &#39;home#index&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>なかんじで修正。</p>

<p>これで起動はうまくいった。strong_parameterによる警告はあるけどこれは後ほど修正することにする。
その後は、テストを流して全部通す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>bundle exec rspec spec
</span></code></pre></td></tr></table></div></figure>


<h2>DEPRECATION WARNING: Calling #find(:first) is deprecated.</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>DEPRECATION WARNING: Calling #find(:first) is deprecated. Please call #first directly instead. You have also used finder options. These are also deprecated. Please build a scope instead of using finder options. (called from block in create_with_item at /private/var/www/frustration/app/services/service_fuman.rb:51)
</span></code></pre></td></tr></table></div></figure>


<p>以下のような推奨されていない使い方をしていたので修正しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>Hoge.find(:first, condition: {user_id: @user.id})
</span><span class='line'>↓
</span><span class='line'>Hoge.where(user_id: @user.id).first
</span></code></pre></td></tr></table></div></figure>


<h2>strong_parameter</h2>

<p>ここはひたすらcontroller側に制限の内容を記述。</p>

<p>ホワイトリストとして許可するパラメータを記述していきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">category_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:category</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DEPRECATION WARNING: You didn&rsquo;t set config.secret_key_base.</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DEPRECATION</span> <span class="ss">WARNING</span><span class="p">:</span> <span class="no">You</span> <span class="n">didn</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">set</span> <span class="n">config</span><span class="o">.</span><span class="n">secret_key_base</span><span class="o">.</span> <span class="no">Read</span> <span class="n">the</span> <span class="n">upgrade</span> <span class="n">documentation</span> <span class="n">to</span> <span class="n">learn</span> <span class="n">more</span> <span class="n">about</span> <span class="n">this</span> <span class="kp">new</span> <span class="n">config</span> <span class="n">option</span><span class="o">.</span> <span class="p">(</span><span class="n">called</span> <span class="n">from</span> <span class="n">env_config</span> <span class="n">at</span> <span class="sr">/private/</span><span class="n">var</span><span class="o">/</span><span class="n">www</span><span class="o">/</span><span class="n">frustration</span><span class="o">/</span><span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">railties</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">rails</span><span class="o">/</span><span class="n">application</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">141</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>secret_token</code>はもう推奨されていなくて<code>secret_key_base</code>に名前が変更されたようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">if</span> <span class="n">config</span><span class="o">.</span><span class="n">secret_key_base</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>      <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Deprecation</span><span class="o">.</span><span class="n">warn</span> <span class="s2">&quot;You didn&#39;t set config.secret_key_base. &quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s2">&quot;Read the upgrade documentation to learn more about this new config option.&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">config</span><span class="o">.</span><span class="n">secret_token</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>        <span class="k">raise</span> <span class="s2">&quot;You must set config.secret_key_base in your app&#39;s config.&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>これですべてテストがうまくいったのでPull Requestを自分に送ってfin.</p>

<p><a href="https://github.com/nakajijapan/frustrationme_app/pulls">https://github.com/nakajijapan/frustrationme_app/pulls</a></p>

<p>メジャーバージョンが上がってるということで、新しい機能が追加されたり、機能が廃止されたり、名前が変更されていたりと、いろいろと変更するべき点は多かったですがテストを書いていたので実行させては修正、実行させては修正の連続で効率的に修正作業ができたんじゃないかとおもいます（最終的にはWEB上での確認はしましたが）。</p>

<p>あと、今回は規模が小さいし、修正箇所もそんなに多くなかったのでstrong_parametersの部分も変更させてしましましたが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;strong_parameters&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>であらかじめ3系で実装しておくと細かい粒度で修正できて安心かもしれませんね。</p>

<p>さてさて、アップデートできてよかった。。。</p>

<h2>Ref</h2>

<p><a href="http://www.upgradingtorails4.com/">http://www.upgradingtorails4.com/</a>
<a href="http://railscasts.com/episodes/415-upgrading-to-rails-4?language=ja&amp;view=asciicast">http://railscasts.com/episodes/415-upgrading-to-rails-4?language=ja&amp;view=asciicast</a></p>
]]></content>
  </entry>
  
</feed>
