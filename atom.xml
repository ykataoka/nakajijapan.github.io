<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nakajijapan]]></title>
  <link href="http://nakajijapan.github.io/atom.xml" rel="self"/>
  <link href="http://nakajijapan.github.io/"/>
  <updated>2014-12-15T00:10:41+09:00</updated>
  <id>http://nakajijapan.github.io/</id>
  <author>
    <name><![CDATA[nakajijapan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS X Advent Calendar 2014 - OSXアプリ初心者の域を脱するためにしたこと]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/12/14/osx-advent-calendar-2014/"/>
    <updated>2014-12-14T23:56:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/12/14/osx-advent-calendar-2014</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://qiita.com/advent-calendar/2014/osx">OS X Advent Calendar 2014</a>の15日目の記事になります。</p>

<p><img src="https://devimages.apple.com.edgekey.net/osx/images/osx-whats-new-hero.png" alt="" /></p>

<p>AppleがSwiftという言語をサポートしてから半年が経とうとしています。
このほかにも今年はAppleに驚かせる一年になったのではないでしょうか。
みなさんこんにちは<a href="https://twitter.com/nakajijapan">@nakajijapan</a>です。</p>

<p>Swiftが出た当初はコードの書きやすさに驚き、ドキュメントを読んでは
サンプルコードを書いたり、はたまた<a href="http://limu.xyz/">Limu</a>というサービスを作成するようになりました。ちなみにこのサービスはいまだに地道に開発しています。。。</p>

<p>そして、私は新たな興味を持ちました。OSXアプリも頑張れば開発できるのではないかと。</p>

<p>とにかく、なにも考えずOSXプロジェクトを作成して初期起動してみる。
とりあえずなにもできないWindowが起動できる。
あとは、iOS開発でしたノウハウである程度のカスタマイズができるのではないかと。
しかし、そこまでで終わりでUIKitやiOSの開発知識である程度流用できるものはありますが
それ以上にCocoaプログラミングする上での仕様を学ぶ必要がありました。</p>

<p>そこで今回は、ある程度開発できる？(いや、まだまだであります)ようになってきたのでここでちょっとまとめようと思います。</p>

<h2>OSXアプリ開発ができるようになるまでに行ったこと</h2>

<ul>
<li>とにかくサンプルを読む</li>
<li>思ったことは駄目元で試してみる</li>
<li>公式ドキュメントを読む</li>
<li>本を読む</li>
</ul>


<h3>とにかくサンプルを読む</h3>

<p>大体のサンプルはObjective-Cで書いてあります。最初からSwiftで書いていてほしいのですが、まだ昔のサンプルのままで更新されていないので、それをみるようになりますがObjective-CからSwiftに変えるのはそこまで難しくないです。ただより、下のレイヤーにを実装するとなると少し考える事が増えるでしょうが。。。そこにヒントが隠されているので気になるソースを落としてはサンプルを眺めてビルドしてみましょう。</p>

<p>自分は10個くらい眺めてなんとなくこんな書き方すればいいんだと若干ながら理解して
いきました。</p>

<h3>思ったことは駄目元でためしてみる</h3>

<p>iOS以上に情報が少ないので自分で解決しなきゃいけないことが多くなってきます。
実装が滞るのであれば、ソースをミクロな状態にしてそれができるかこうやったらどうなるんだろうと試行錯誤をしてみることが大切です。</p>

<h3>公式ドキュメントを読む</h3>

<p>ネットの情報に自分の疑問の答えがあっても、仕様は確認するといいです。それより便利なプロパティやメソッドが用意されているかもしれませんし、そもそも使い方が間違っているかもしれません。</p>

<h3>本を読む</h3>

<p>日本語の情報がない中、以下の本を参考にしました。</p>

<div class="booklog_html"><table><tr><td class="booklog_html_image"><a href="http://www.amazon.co.jp/MAC-OS-X-COCOA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E7%AC%AC4%E7%89%88/dp/4501552700%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4501552700" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41bAmGQ-ljL._SL160_.jpg" width="119" height="150" style="border:0;border-radius:0;" /></a></td><td class="booklog_html_info" style="padding-left:20px;"><div class="booklog_html_title" style="margin-bottom:10px;font-size:14px;font-weight:bold;"><a href="http://www.amazon.co.jp/MAC-OS-X-COCOA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E7%AC%AC4%E7%89%88/dp/4501552700%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4501552700" target="_blank">MAC OS X COCOAプログラミング 第4版</a></div><div style="margin-bottom:10px;"><div class="booklog_html_author" style="margin-bottom:15px;font-size:12px;;line-height:1.2em">著者 : <a href="http://booklog.jp/author/%E3%82%A2%E3%83%BC%E3%83%AD%E3%83%B3%E3%83%BB%E3%83%92%E3%83%AC%E3%82%AC%E3%82%B9" target="_blank">アーロン・ヒレガス</a></div><div class="booklog_html_manufacturer" style="margin-bottom:5px;font-size:12px;;line-height:1.2em">東京電機大学出版局</div><div class="booklog_html_release" style="font-size:12px;;line-height:1.2em">発売日 : 2014-05-20</div></div><div class="booklog_html_link_amazon"><a href="http://booklog.jp/item/1/4501552700" style="font-size:12px;" target="_blank">ブクログでレビューを見る»</a></div></td></tr></table></div>


<p>情報はかなり古いのですが、Cocoaプログラミングの基本がわかるというところまではいいのですが、ある程度iOSで学んだことが記述されているので分厚いわりにはそこまで自分にとって優良な情報は少なかったイメージがあります。</p>

<div class="booklog_html"><table><tr><td class="booklog_html_image"><a href="http://www.amazon.co.jp/Mac-OS-iPhone%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AECocoa%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E8%97%A4%E6%9C%AC-%E8%A3%95%E4%B9%8B/dp/4881666967%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4881666967" target="_blank"><img src="http://ecx.images-amazon.com/images/I/519bb6t6VoL._SL160_.jpg" width="117" height="150" style="border:0;border-radius:0;" /></a></td><td class="booklog_html_info" style="padding-left:20px;"><div class="booklog_html_title" style="margin-bottom:10px;font-size:14px;font-weight:bold;"><a href="http://www.amazon.co.jp/Mac-OS-iPhone%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AECocoa%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E8%97%A4%E6%9C%AC-%E8%A3%95%E4%B9%8B/dp/4881666967%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4881666967" target="_blank">Mac OS X/iPhoneのためのCocoaプログラミング入門</a></div><div style="margin-bottom:10px;"><div class="booklog_html_author" style="margin-bottom:15px;font-size:12px;;line-height:1.2em">著者 : <a href="http://booklog.jp/author/%E8%97%A4%E6%9C%AC%E8%A3%95%E4%B9%8B" target="_blank">藤本裕之</a></div><div class="booklog_html_manufacturer" style="margin-bottom:5px;font-size:12px;;line-height:1.2em">ソーテック社</div><div class="booklog_html_release" style="font-size:12px;;line-height:1.2em">発売日 : 2009-07-04</div></div><div class="booklog_html_link_amazon"><a href="http://booklog.jp/item/1/4881666967" style="font-size:12px;" target="_blank">ブクログでレビューを見る»</a></div></td></tr></table></div>


<p>他にもう一冊読もうかなと思って購入した一冊なのですが関西弁？と微妙な例えに苦しんで読みにくかった。。。</p>

<h4>余談</h4>

<div class="booklog_html"><table><tr><td class="booklog_html_image"><a href="http://www.amazon.co.jp/Cocoa-Programming-OS-Edition-Guides/dp/0134076958%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0134076958" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51CF44RQryL._SL160_.jpg" width="105" height="150" style="border:0;border-radius:0;" /></a></td><td class="booklog_html_info" style="padding-left:20px;"><div class="booklog_html_title" style="margin-bottom:10px;font-size:14px;font-weight:bold;"><a href="http://www.amazon.co.jp/Cocoa-Programming-OS-Edition-Guides/dp/0134076958%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0134076958" target="_blank">Cocoa Programming for OS X: The Big Nerd Ranch Guide (5th Edition) (Big Nerd Ranch Guides)</a></div><div style="margin-bottom:10px;"><div class="booklog_html_author" style="margin-bottom:15px;font-size:12px;;line-height:1.2em">著者 : <a href="http://booklog.jp/author/Aaron+Hillegass" target="_blank">Aaron Hillegass</a></div><div class="booklog_html_manufacturer" style="margin-bottom:5px;font-size:12px;;line-height:1.2em">Big Nerd Ranch Guides</div><div class="booklog_html_release" style="font-size:12px;;line-height:1.2em">発売日 : 2015-04-10</div></div><div class="booklog_html_link_amazon"><a href="http://booklog.jp/item/1/0134076958" style="font-size:12px;" target="_blank">ブクログでレビューを見る»</a></div></td></tr></table></div>


<p>来年発売される第五版の本はSwift、Xcode6に対応しているので勉強しがいがあります。</p>

<p><font color="red">熱い!!!!!!!</font></p>

<h2>まとめ</h2>

<p>自分がどうやってCocoaプログラミングの勉強してきたかをまとめてみました。
なにあともあれ自分は何が作成したいかだと思うので、それありきの勉強じゃないと長続きはしないと思うのでそれを見つけるのが何より重要かもしれませんし、
僕も作りたいものがあって勉強してます。</p>

<p>来年の目標としては自分でもCocoa勉強会開催できるようになるまでいけたらいいすね。</p>

<p>これからも自分が作成したいものを作成できるようになりたいものです。</p>

<h2>余談</h2>

<p>次がないのですが @shu223 さんの記事が楽しみだ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[お産合宿2014に参加してきた。]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/09/17/osan2014/"/>
    <updated>2014-09-17T00:06:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/09/17/osan2014</id>
    <content type="html"><![CDATA[<p>夏も終わろうかとしている今日このごろ皆さんいかがお過ごしでしょうか。
僕はパンパンです。中島です。</p>

<p>先日、弊社で<a href="http://osan.pepabo.com/2014/">お産合宿2014</a>という開発合宿的なイベントが開催されたので参加してきました。</p>

<p>今回は、別なチームで組んだことと、参加締め切りまでそんなに時間がなかったので適当に<code>nakajijapan</code>というチームで応募(自分のtwitter idです&hellip;)しました。
結果的にも自分の価値観を押し出す感じにはなりましたが、それでもみんな意見をいろいろだしてくれていい感じに開発できたと思います。</p>

<p><img src="http://osan.pepabo.com/2014/wp-content/uploads/2014/08/tokyo_05_nakajijapan1000x800.png" width="400" /></p>

<p>ほいで今年はこんなアプリを作成しました。</p>

<h2>音楽位置情報アプリ 「Limu」</h2>

<h3><a href="limu.xyz">limu.xyz</a></h3>

<p><a href="http://limu.xyz">
<img src="http://nakajijapan.github.io/images/posts/2014-09-17-01.png" alt="" />
</a></p>

<p>コンセプトは新しい音楽の出会い方です！</p>

<p>詳細は後々公開していきます。
完成度としては、まだ５割ほどでいろいろ試行錯誤が必要なところが結構あるのですが１０月くらいにはリリースできるようにメンバー全員
頑張っておりますのでぜひご期待ください！！！！！！！！！！！</p>

<p>以下にお産合宿発表した資料を載せておきます。（一部修正しました）</p>

<script async class="speakerdeck-embed" data-id="dd60f3a020540132fa3f463cb3105589" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing CloudKit]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/08/23/introducing-cloudkit/"/>
    <updated>2014-08-23T21:06:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/08/23/introducing-cloudkit</id>
    <content type="html"><![CDATA[<p><img src="https://developer.apple.com/icloud/images/cloudkit.png" alt="" /></p>

<p><a href="https://developer.apple.com/icloud/documentation/cloudkit-storage/">CloudKit Strage</a></p>

<p>WWDC2014でiOS8からの新しい機能であるCloudKitについて調べたよという話です。</p>

<p>次に自分がリリースするプロダクトのバックエンドを実験がてらParseでやろうとしていたのですが、
CloudKitのほうが便利そうだったのと、何かときめきを感じるものがあったのでCloudKitを選定して実装する方向
にはなったのです。しかし、情報はというとサンプルプログラムとただドキュメントがあるんだけでした
ので自分なりに調べてどういう実装をしたらいいのかというのを調査して、一部まとめたお話です。</p>

<p>せっかくなので<a href="https://github.com/potatotips/potatotips/wiki/potatotips-8">potatotips #8</a>でも共有させていただきました。</p>

<script async class="speakerdeck-embed" data-id="8680d4d00aa80132acd15e86903014cd" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>簡単に話すと以下のような内容になっています。</p>

<ul>
<li>簡単にCloudKitの説明</li>
<li>CRUDで実装した場合、どんな実装になるのか</li>
<li>ページング処理の話</li>
<li>要調査内容</li>
<li>感想</li>
</ul>


<p>補足なのですが<code>CKSubscription</code>も試してみたのでご参考までに。</p>

<h2>CKSubscription</h2>

<p>サーバ上での変更を追跡するのに利用されます。
例えば、何かのレコードに変更があった場合にPush通知を送信できたりします。
実際のコードは以下のようなもの。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>// #1
</span><span class='line'>        let truePredicate = NSPredicate(value: true)
</span><span class='line'>        let itemSubscription = CKSubscription(
</span><span class='line'>            recordType: "Items",
</span><span class='line'>            predicate: truePredicate,
</span><span class='line'>            options: CKSubscriptionOptions.FiresOnRecordCreation
</span><span class='line'>        )
</span><span class='line'>// #2
</span><span class='line'>        let notification = CKNotificationInfo()
</span><span class='line'>        notification.alertBody = "Item Add"
</span><span class='line'>        itemSubscription.notificationInfo = notification
</span><span class='line'>
</span><span class='line'>// #3
</span><span class='line'>        self.publicDatabase.saveSubscription(
</span><span class='line'>            itemSubscription,
</span><span class='line'>            completionHandler: { (subscription:CKSubscription!, error:NSError!) -&gt; Void in
</span><span class='line'>
</span><span class='line'>                if error != nil {
</span><span class='line'>                    println("An error occured in \(error.description)")
</span><span class='line'>                }
</span><span class='line'>
</span><span class='line'>                // do something
</span><span class='line'>
</span><span class='line'>            }
</span><span class='line'>        )</span></code></pre></td></tr></table></div></figure>


<h3>＃1</h3>

<p>CKSubscriptionを指定されたレコードタイプに条件(NSPredicate)を指定してインスタンス化します。
CKQueryぽいですね。</p>

<h3>＃2</h3>

<p>ここでは通知メッセージの設定を行っています。</p>

<h3>＃3</h3>

<p>ここでSubscriptionの変更をサーバにリクエストします。
これで完了です。削除したい場合は<code>deleteSubscriptionWithID</code>を利用すれば削除が適用されます。</p>

<p>こんな感じで実装は完了です。</p>

<h2>CloudKitを使ってみての感想</h2>

<p>爆速でバックエンドが構築されるのでアプリに集中したい人にとってはかなりおすすめですね。
だいたいの機能は揃っているので簡単なアプリを作成するんであればこれでいいかもしれません。
引き続きwatchしていきます。</p>

<p>ちなみに、スレイドにも書いたんですが、Macで使うとMacデベロッパープログラムを契約しないと
利用できなかったので発表が終わった瞬間に購入しました。。。。</p>

<blockquote class="twitter-tweet" lang="ja"><p>Mac Developer Program 購入しました。 <a href="https://twitter.com/hashtag/potatotips?src=hash">#potatotips</a> <a href="http://t.co/lbYe8FYzJc">pic.twitter.com/lbYe8FYzJc</a></p>&mdash; nakajijapan (@nakajijapan) <a href="https://twitter.com/nakajijapan/statuses/502072810622054400">2014, 8月 20</a></blockquote>


<script async src="http://nakajijapan.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>そんな夏休みの自由研究話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年夏に読んだ本]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/08/19/read-books-in-2014-summer/"/>
    <updated>2014-08-19T03:49:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/08/19/read-books-in-2014-summer</id>
    <content type="html"><![CDATA[<p>この夏に読んだ本をメモライズ。</p>

<h2>Mac App</h2>

<p>この２冊でMac周りの勉強をざっくりしました。</p>

<div style="margin-bottom:5px;"><a href="http://www.amazon.co.jp/MAC-OS-X-COCOA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E7%AC%AC4%E7%89%88/dp/4501552700%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4501552700" target="_blank" title="MAC OS X COCOAプログラミング 第4版"><img src="http://ecx.images-amazon.com/images/I/41bAmGQ-ljL._SL160_.jpg" width="119" height="150" alt="MAC OS X COCOAプログラミング 第4版" style="border:0;border-radius:0" /></a></div>


<p><a href="http://www.amazon.co.jp/MAC-OS-X-COCOA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E7%AC%AC4%E7%89%88/dp/4501552700%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4501552700" target="_blank">MAC OS X COCOAプログラミング 第4版</a></p>

<div style="margin-bottom:5px;"><a href="http://www.amazon.co.jp/Mac-OS-iPhone%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AECocoa%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E8%97%A4%E6%9C%AC-%E8%A3%95%E4%B9%8B/dp/4881666967%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4881666967" target="_blank" title="Mac OS X/iPhoneのためのCocoaプログラミング入門"><img src="http://ecx.images-amazon.com/images/I/519bb6t6VoL._SL160_.jpg" width="117" height="150" alt="Mac OS X/iPhoneのためのCocoaプログラミング入門" style="border:0;border-radius:0" /></a></div>


<p><a href="http://www.amazon.co.jp/Mac-OS-iPhone%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AECocoa%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E8%97%A4%E6%9C%AC-%E8%A3%95%E4%B9%8B/dp/4881666967%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4881666967" target="_blank">Mac OS X/iPhoneのためのCocoaプログラミング入門</a></p>

<h2>Core Data</h2>

<p>CloudKitと合わせて使いたかったので読みました。</p>

<div style="margin-bottom:5px;"><a href="http://www.amazon.co.jp/iOS-Core-Data%E5%BE%B9%E5%BA%95%E5%85%A5%E9%96%80-%E5%9C%8B%E5%B1%85-%E8%B2%B4%E6%B5%A9/dp/4798039799%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798039799" target="_blank" title="iOS Core Data徹底入門"><img src="http://ecx.images-amazon.com/images/I/41l4NOjbb8L._SL160_.jpg" width="106" height="150" alt="iOS Core Data徹底入門" style="border:0;border-radius:0" /></a></div>


<p><a href="http://www.amazon.co.jp/iOS-Core-Data%E5%BE%B9%E5%BA%95%E5%85%A5%E9%96%80-%E5%9C%8B%E5%B1%85-%E8%B2%B4%E6%B5%A9/dp/4798039799%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798039799" target="_blank">iOS Core Data徹底入門</a></p>

<h2>Objective-C</h2>

<div style="margin-bottom:5px;"><a href="http://www.amazon.co.jp/Effective-Objective-C-2-0-Matt-Galloway/dp/4798134198%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798134198" target="_blank" title="Effective Objective-C 2.0"><img src="http://ecx.images-amazon.com/images/I/51BbaG2KA1L._SL160_.jpg" width="120" height="150" alt="Effective Objective-C 2.0" style="border:0;border-radius:0" /></a></div>


<p><a href="http://www.amazon.co.jp/Effective-Objective-C-2-0-Matt-Galloway/dp/4798134198%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798134198" target="_blank">Effective Objective-C 2.0</a></p>

<div style="margin-bottom:5px;"><a href="http://www.amazon.co.jp/iOS%E4%BD%8D%E7%BD%AE%E6%83%85%E5%A0%B1%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E2%80%95iBeacon-GeoFence-Navi-CoreMotion-M7%E3%81%AE%E7%90%86%E8%A7%A3%E3%81%A8%E5%AE%9F%E8%B7%B5/dp/4798040703%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798040703" target="_blank" title="iOS位置情報プログラミング―iBeacon/GeoFence/Navi/CoreMotion/M7の理解と実践"><img src="http://ecx.images-amazon.com/images/I/41IrAamsuEL._SL160_.jpg" width="113" height="150" alt="iOS位置情報プログラミング―iBeacon/GeoFence/Navi/CoreMotion/M7の理解と実践" style="border:0;border-radius:0" /></a></div>


<p><a href="http://www.amazon.co.jp/iOS%E4%BD%8D%E7%BD%AE%E6%83%85%E5%A0%B1%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E2%80%95iBeacon-GeoFence-Navi-CoreMotion-M7%E3%81%AE%E7%90%86%E8%A7%A3%E3%81%A8%E5%AE%9F%E8%B7%B5/dp/4798040703%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798040703" target="_blank">iOS位置情報プログラミング―iBeacon/GeoFence/Navi/CoreMotion/M7の理解と実践</a></p>

<h2>About Apple</h2>

<p>スティーブ・ジョブズ亡き後ののアップルがどうなるんだろうか本</p>

<div style="margin-bottom:5px;"><a href="http://www.amazon.co.jp/%E6%B2%88%E3%81%BF%E3%82%86%E3%81%8F%E5%B8%9D%E5%9B%BD-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%96%E3%83%BB%E3%82%B8%E3%83%A7%E3%83%96%E3%82%BA%E4%BA%A1%E3%81%8D%E3%81%82%E3%81%A8%E3%80%81%E3%82%A2%E3%83%83%E3%83%97%E3%83%AB%E3%81%AF%E5%81%89%E5%A4%A7%E3%81%AA%E4%BC%81%E6%A5%AD%E3%81%A7%E3%81%84%E3%82%89%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B-%E3%82%B1%E3%82%A4%E3%83%B3%E5%B2%A9%E8%B0%B7%E3%82%86%E3%81%8B%E3%82%8A-ebook/dp/B00KMVHZE6%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00KMVHZE6" target="_blank" title="沈みゆく帝国 スティーブ・ジョブズ亡きあと、アップルは偉大な企業でいられるのか"><img src="http://ecx.images-amazon.com/images/I/51CePaw6ywL._SL160_.jpg" width="102" height="150" alt="沈みゆく帝国 スティーブ・ジョブズ亡きあと、アップルは偉大な企業でいられるのか" style="border:0;border-radius:0" /></a></div>


<p><a href="http://www.amazon.co.jp/%E6%B2%88%E3%81%BF%E3%82%86%E3%81%8F%E5%B8%9D%E5%9B%BD-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%96%E3%83%BB%E3%82%B8%E3%83%A7%E3%83%96%E3%82%BA%E4%BA%A1%E3%81%8D%E3%81%82%E3%81%A8%E3%80%81%E3%82%A2%E3%83%83%E3%83%97%E3%83%AB%E3%81%AF%E5%81%89%E5%A4%A7%E3%81%AA%E4%BC%81%E6%A5%AD%E3%81%A7%E3%81%84%E3%82%89%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B-%E3%82%B1%E3%82%A4%E3%83%B3%E5%B2%A9%E8%B0%B7%E3%82%86%E3%81%8B%E3%82%8A-ebook/dp/B00KMVHZE6%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00KMVHZE6" target="_blank">沈みゆく帝国 スティーブ・ジョブズ亡きあと、アップルは偉大な企業でいられるのか</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Core Foudation in Working with Cocoa Data Types]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/07/26/core-foudation-for-swift/"/>
    <updated>2014-07-26T16:44:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/07/26/core-foudation-for-swift</id>
    <content type="html"><![CDATA[<p>AV Foundation関連のプログラムをSwiftで書き直しているときに、単純に変換できないところがあったので
一旦でキュメントに振り返って読み直してみました。</p>

<p>参照先はAppleの<a href="https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/BuildingCocoaApps/WorkingWithCocoaDataTypes.html">公式ドキュメント</a>に記載してあるのを自分なりに翻訳してみました。</p>

<h1>Core Foundation</h1>

<p><code>Core Foundation</code>型は自動的に<code>full-fledged</code>なSwiftクラスとしてインポートされる。
メモリ管理が提供されるときはいつでも、Swiftは自動的に<code>Core Foundation objects</code>のメモリを管理し、
自身をインスタンス化した<code>Core Foundation objects</code>をインクルードして管理します。Swift内で、
あなたは<code>toll-free bridged</code>な<code>Foundation</code>と<code>Core Foundation</code>の両方を相互に変換できる。
あなたはブリッジしている<code>Foundation</code>型をキャストするならSwiftの標準ライブラリに対して<code>toll-free bridged</code>な
<code>Core Foundation</code>型をブリッジすることができる</p>

<ul>
<li>toll-free bridged

<ul>
<li>オブジェクトを変換することなくキャストすることで相互変換可能な仕組みのことを指すらしいです</li>
</ul>
</li>
</ul>


<h2>Remapped Types</h2>

<p>Swiftは<code>Core Foundation</code>型をインポートするとき、コンパイラはそれらの型名を再配置する
コンパイラは各型の最後に記述されている<code>Ref</code>を削除する、なぜならSwiftクラスのすべては参照型、
それゆえにサフィックスはいらない</p>

<p><code>CFTypeRef</code>は<code>AnyObject</code>に再配置されるよ。<code>CFTypeRef</code>をつかうときは<code>AnyObject</code>を利用すべきだ！</p>

<h2>Memory Managed Objects</h2>

<p>APIから返却された<code>Core Foundation objects</code>はSwiftで自動的にメモリ管理される。
CFRetain、CFRelease、CFAutoreleaseを自動で呼び出す必要はない。独自のCの関数から<code>Core Foundation objects</code>
を返すのなら、それらを<code>CF_RETURNS_RETAINED</code>と<code>CF_RETURNS_NOT_RETAINED</code>のいずれかを使ってアノテートする。
上記のAPIを呼び出すSwiftコードをコンパイルするとき、コンパイラは自動的ににメモリ管理用の呼び出しを行う。
<code>Core Foundation objects</code>を返さないAPIを利用するときは、このセクションをスキップしてね。
でないのなら<code>unmanaged Core Foundation objects</code>の操作について学んでね。</p>

<h2>Unmanaged Objects</h2>

<p>Swiftが提供されているAPIをimportするときに、コンパイラは自動的に返却された<code>Core Foundation Objects</code>をメモリ管理できないよ
Swiftは<code>Unmanaged&lt;T&gt;</code>構造体内でこれらの返却された<code>Core Foundation objects</code>を内包する
間接的に返却された<code>Core Foundation objects</code>のすべては管理されい。例えば以下のように宣言できる</p>

<h3>Objective-C</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CFStringRef StringByAddingTwoStrings(CFStringRef string1, CFStringRef string2)</span></code></pre></td></tr></table></div></figure>


<h3>Swift</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func StringByAddingTwoStrings(CFString!, CFString!) -&gt; Unmanaged&lt;CFString&gt;!</span></code></pre></td></tr></table></div></figure>


<p>非管理のオブジェクトを受け取るとき、あなたは直接メモり管理されたオブジェクトに変換すべきです、非管理のオブジェクトを受け取る前に。
この方法でSwiftは手動でメモリ管理を行うことができる。
Unmanaged<T>構造体は非管理オブジェクトをメモリ管理されたobjectに<code>takeUnretainedValue()</code>に変換したり、<code>takeRetainedValue()</code>に変換したりと２つの方法を提供する。
あなたは自分が呼びだだしているAPIがunretained objectやretained objectを返すかどうかを基本に利用するためにどちらかのメソッドを選べる。</p>

<h3>Swift</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let memoryManagedResult = StringByAddingTwoStrings(str1, str2).takeUnretainedValue()
</span><span class='line'>// memoryManagedResult is a memory managed CFString</span></code></pre></td></tr></table></div></figure>


<p>非管理のオブジェクトであるretain() release() autorelease() メソッドを呼び出すことができます、しかしこのアプローチは推奨されないよ</p>

<h2>まとめ</h2>

<p>どうもSwiftでもARC非対応のものがあるので<code>Unmanaged&lt;T&gt;</code>構造体を利用して<code>takeUnretainedValue()</code>、<code>takeRetainedValue()</code>経由でメモリ管理されたオブジェクトにしなければならないようだ。
とはいえまだ完全理解というわけではないので引き続き調べていこうと思う。</p>

<h2>参考文献</h2>

<div style="margin-bottom:5px;"><a href="http://www.amazon.co.jp/%E8%A9%B3%E8%A7%A3-Objective-C-2-0-%E7%AC%AC3%E7%89%88-%E8%8D%BB%E5%8E%9F/dp/4797368276%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797368276" target="_blank" title="詳解 Objective-C 2.0 第3版"><img src="http://ecx.images-amazon.com/images/I/41VdFg9YqsL._SL160_.jpg" width="115" height="150" alt="詳解 Objective-C 2.0 第3版" style="border:0;border-radius:0" /></a></div>


<p><a href="http://www.amazon.co.jp/%E8%A9%B3%E8%A7%A3-Objective-C-2-0-%E7%AC%AC3%E7%89%88-%E8%8D%BB%E5%8E%9F/dp/4797368276%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797368276" target="_blank">詳解 Objective-C 2.0 第3版</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift勉強会を開催して話してきました。]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/07/19/swift-shibuya-01/"/>
    <updated>2014-07-19T20:08:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/07/19/swift-shibuya-01</id>
    <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="a9200910f163013106da6eb14261a8ef" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>先日、小さい規模ながらSwfit勉強会を開催しました。</p>

<p><a href="http://atnd.org/events/52641">Swift勉強会 hosted by @nakajijapan from ペパボ</a></p>

<p>そんななか、自分も「Swiftに慣れるまで行ったこと」を発表しました。</p>

<p>ざっくり言うSwiftに慣れるのに以下のことをしてみた献じたことを話しました。</p>

<ol>
<li>公式ドキュメント（を読んだ後に）</li>
<li>サンプルアプリをTableViewControllerベースで作成してみたこと</li>
<li>自分のプラグイン(NKJMovieComposer)をSwiftで書き換えてみたこと</li>
<li>気分高ぶってMac OS Xも作成してみたこと</li>
</ol>


<p>詳しくはスライドをご覧ください。</p>

<p>Swiftが出たときにSan Franciscoで一心不乱にサンプルアプリプログラム書いてブログ上げようかと思ったけど
いろんな人が既にブログに上げていたのでただただGitHubにあげるだけでした。そんなんか
いろいろ勉強していくうちにMacアプリもつくれんじゃねーかwで脳内麻痺して書籍を購入してSwiftで作成
してみました。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2014-07-19-01.png" alt="swift" /></p>

<p>起動しとけば単純に画像を定期的に保存するアプリです。
（そのうちに１日で保存した画像をGifアニメのような動画にしてソーシャルにアップする機能作ろうかと計画中）
ある程度できたらGeHubにアップ仕様と思います。</p>

<p>ちなみにこちらの書籍を購入しました。</p>

<p><a href="http://frustration.me/items/5171">
  <img src="http://ecx.images-amazon.com/images/I/41bAmGQ-ljL.jpg" />
</a></p>

<p>Macアプリ、知識が溜まって来たらまた記事にします。</p>

<p>とにかく、Swift勉強会が無事終えてよかったです。
参加してくれたみなさん、そして発表してくれた、<a href="http://twitter.com/misyobun">@misyobun</a> <a href="http://twitter.com/hypermkt">@hypermkt</a> <a href="http://twitter.com/kurotaky">@kurotaky</a> ありがとうございました！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcodeのフォルダ参照]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/07/11/xcode-folder-references/"/>
    <updated>2014-07-11T00:37:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/07/11/xcode-folder-references</id>
    <content type="html"><![CDATA[<p>なにげに今まで知らなかったんですが結構便利だってことに最近気づいたのでメモ。
普段リソースをXcodeに関連づけさせるためにドラッグアンドドロップさせていたのですが、
一旦以下のチェック項目でディレクトリ参照にしてしまえば、これ以降リソースファイルを追加したときに毎度
ドラッグアンドドロップさせなくてよく、自動的に追加されます。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2014-07-11-01.png" alt="nakajijapan" /></p>

<p><img src="http://nakajijapan.github.io/images/posts/2014-07-11-02.png" alt="nakajijapan" /></p>

<p>他と違うのは対象のディレクトリは色が青になっています。</p>

<p>実際に呼び出すときには通常の呼び出し方法と異なります。リソースファイルの前に指定のディレクトリ名を宣言
する必要があります。</p>

<p>今回だと以下の感じになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let soundFilePath = NSBundle.mainBundle().pathForResource("music/sound001", ofType: "mp3")</span></code></pre></td></tr></table></div></figure>


<p><code>music</code>がディレクトリにあたりますね。</p>

<p>これ、何気に便利で、デザイナさんにXcode立ち上げなくても指定のディレクトリおいておくだけで、余計なところを実装せずに済むので
仕事が捗るのではないかと気づいた今日このごろでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[録画時にブラックシーンができてしまう問題]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/06/15/study-avassetwriter/"/>
    <updated>2014-06-15T18:26:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/06/15/study-avassetwriter</id>
    <content type="html"><![CDATA[<p><a href="http://nakajijapan.github.io/blog/2014/06/08/wwdc2014/">WWDC2014に行って来た</a>の話になるのですが、
プライベートでアプリ作成しているときにAV Foundation絡みでわからないところがあったのでAppleのエンジニアさんに質問してきました。</p>

<h2>現象</h2>

<p>問題は、自分が作成した<a href="https://github.com/nakajijapan/NKJMultiMovieCaptureView">NKJMultiMovieCaptureView</a>でその現象が発生しました。
作成したときの話は<a href="http://nakajijapan.github.io/blog/2014/06/01/app-doujou3/">こちら</a>になります。
Vine動画のようにタッチしたら録画し、タッチが終了したら(指を離したら)録画を終了し、録画した複数の動画を一つにする仕組みを作成したのですが、
実際作成した動画を見てみると最初のほんの一瞬だけなぜかブラックシーンができてしまいます。</p>

<p>現状の処理として以下のようなことをしています。</p>

<h3>1. 録画開始</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesBegan:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span></code></pre></td></tr></table></div></figure>


<p>タッチイベントで録画の処理を開始します。このときにファイルに対しての書き込み処理を開始します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">assetWriter</span> <span class="n">startWriting</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">assetWriter</span> <span class="nl">startSessionAtSourceTime:</span><span class="n">self</span><span class="p">.</span><span class="n">recordStartTime</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 録画</h3>

<p><code>AVCaptureVideoDataOutputSampleBufferDelegate</code>, <code>AVCaptureAudioDataOutputSampleBufferDelegate</code>をプロトコルとして指定して、
以下のメソッドで録画の処理を行います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">captureOutput:</span><span class="p">(</span><span class="n">AVCaptureOutput</span> <span class="o">*</span><span class="p">)</span><span class="nv">captureOutput</span> <span class="nf">didOutputSampleBuffer:</span><span class="p">(</span><span class="n">CMSampleBufferRef</span><span class="p">)</span><span class="nv">sampleBuffer</span> <span class="nf">fromConnection:</span><span class="p">(</span><span class="n">AVCaptureConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span>
</span></code></pre></td></tr></table></div></figure>


<p>ざっくりですが、内部でやっていることはCMSampleBufferというフレーム情報が取得でき、それを１秒間に何回も実行されるこのメソッドで<code>AVAssetWriterInput</code>オブジェクトに
追加処理をしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">CFRetain</span><span class="p">(</span><span class="n">sampleBuffer</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRetain</span><span class="p">(</span><span class="n">formatDescription</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">movieWritingQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_assetWriter</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">AVAssetWriterStatusWriting</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">assetWriterInput</span><span class="p">.</span><span class="n">readyForMoreMediaData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">assetWriterInput</span> <span class="nl">appendSampleBuffer:</span><span class="n">sampleBuffer</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,[</span><span class="n">self</span><span class="p">.</span><span class="n">assetWriter</span> <span class="n">error</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">sampleBuffer</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">formatDescription</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 録画終了</h3>

<p>タッチが終了したら録画終了の処理を行います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesEnded:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span></code></pre></td></tr></table></div></figure>


<h2>問題</h2>

<p>どうやらスレッドを利用しての保存方法に問題があったようです。</p>

<h3>修正前</h3>

<p><img src="http://nakajijapan.github.io/images/posts/2014-06-15_01_avassetwriter.jpg" alt="AVAssetWriter" /></p>

<p>録画開始とフレーム情報を保存する処理が別スレッドで行われているせいで微妙にタイミングがずれたフレーム情報を取得してしまっている。
ここっだと、開始した時間よりも一瞬だけ先のフレーム情報を取得してしまうので最初の一瞬はブラックシーンになります。</p>

<h3>修正後</h3>

<p><img src="http://nakajijapan.github.io/images/posts/2014-06-15_02_avassetwriter.jpg" alt="AVAssetWriter" /></p>

<p>なので録画開始も同じスレッドで順次処理させるようにし、時間の誤差を最小限にしました。こうすることで無事ブラックシーンが無くなりました。</p>

<p>実際には以下のように修正しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'> // Record
</span><span class='line'> NSLog(@&quot;[Starting to record]&quot;);
</span><span class='line'><span class="gd">-    [self.assetWriter startWriting];</span>
</span><span class='line'><span class="gd">-    [self.assetWriter startSessionAtSourceTime:self.recordStartTime];</span>
</span><span class='line'><span class="gi">+    dispatch_async(self.movieWritingQueue, ^{</span>
</span><span class='line'><span class="gi">+        [self.assetWriter startWriting];</span>
</span><span class='line'><span class="gi">+        [self.assetWriter startSessionAtSourceTime:self.recordStartTime];</span>
</span><span class='line'><span class="gi">+    });</span>
</span><span class='line'><span class="gi">+</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>とはいえ、この実装も完璧というわけではなくてタイミングがずれることはあるとおっしゃっていましたが、
今のところ発生していないので安心しています。</p>

<h2>参考</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAssetWriter_Class/Reference/Reference.html">AVAssetWriter Class Reference</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/Multithreading.pdf">Threading Programming Guide</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091">Concurrency Programming Guide</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift勉強会をした]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/06/10/study-swift-01/"/>
    <updated>2014-06-10T18:25:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/06/10/study-swift-01</id>
    <content type="html"><![CDATA[<p>社内で早速Swift勉強会を開きました。
流れとしては、あのときの動画（クレイグがSwiftを発表したところ）をみんなで１０分程鑑賞してテンションあげてから公式のドキュメントを見ながら、みんなでぺちゃくちゃ話す会をしました。</p>

<h2>はじめに</h2>

<p>以下の動画をみてまずざっくりどんなものか概要をつかむ</p>

<p><a href="https://developer.apple.com/videos/wwdc/2014/?id=101">https://developer.apple.com/videos/wwdc/2014/?id=101</a></p>

<h1>A Swift Tour</h1>

<h2>About Swift</h2>

<ul>
<li>Objective-C without the C</li>
<li>iOSとOS Xで開発するための開発言語</li>
<li>Ccoa and Cocoa Touch</li>
<li>Build with LLVM compiler</li>
<li>Optimizer and Autovectorizer</li>
<li>ARC memory management</li>
<li>Same runtime as Objective-C</li>
</ul>


<h2>Simple Value</h2>

<ul>
<li><code>let</code>,<code>var</code>で宣言</li>
<li><code>let</code>は定数、<code>var</code>は変数</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var foo = 33
</span><span class='line'>let foo = 33</span></code></pre></td></tr></table></div></figure>


<ul>
<li>格納する値が明白であれば自動できに方が決定される</li>
<li>十分でなければ明示的に指定することも可能</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let total = 30
</span><span class='line'>let total = 30.0
</span><span class='line'>let total:Double = 0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>初期化に以下のような宣言ができる</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let emptyArray = String[]()
</span><span class='line'>let emptyDictionary = Dictionary&lt;String, Float&gt;()
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>単純な初期化は<code>[] and [:]</code>で省略できる</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>let emptyArray = []
</span><span class='line'>let emptyDictionary = [:]</span></code></pre></td></tr></table></div></figure>


<h3>Control Flow</h3>

<ul>
<li>どこかでみたような記述でif,switch,for-in,for,while,do-whileできるよ</li>
<li><code>..</code>で数値の範囲を決定できることができる</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var total = 0;
</span><span class='line'>for i in 0..10 {
</span><span class='line'>    total += 2
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>total</span></code></pre></td></tr></table></div></figure>


<h2>Functions and Closures</h2>

<ul>
<li>考え方は他の言語と同じ。引数があって返り値がある</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func greet(name: String, day: String) -&gt; String {
</span><span class='line'>  return "Hello \(name), today is \(day)"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>greet("Bob", "Tuesday")</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Touple

<ul>
<li>複数の返り値を返す</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func getGasPrices() -&gt; (Double, Double, Double) {
</span><span class='line'>    return (3.59, 3.69, 3.79)
</span><span class='line'>}
</span><span class='line'>getGasPrices()
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>引数を任意で指定することもできます</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func sumOf(numbers:Int...) -&gt; Int
</span><span class='line'>{
</span><span class='line'>    var sum = 0
</span><span class='line'>    for number in numbers {
</span><span class='line'>        sum += number
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return sum
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>sumOf()
</span><span class='line'>
</span><span class='line'>sumOf(10, 20, 33)</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>{}</code>でクロージャを記述</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>numbers.map({
</span><span class='line'>    (number: Int) -&gt; Int in
</span><span class='line'>    let result = 3 * number
</span><span class='line'>    return result
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>以下の記述も同じ意味</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>numbers.map({ number in 3 * number })</span></code></pre></td></tr></table></div></figure>


<h2>Objects and Classes</h2>

<ul>
<li><code>class</code>で定義</li>
<li><code>init()</code>はコンストラクタ</li>
</ul>


<p>継承は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Squre : NamedShape {
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>overrideはfuncの前に<code>override</code>を宣言する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override func init() {
</span><span class='line'>    super.init()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>インスタンス変数をカスタマイズできる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var perimeter: Double {
</span><span class='line'>    get {
</span><span class='line'>        return 3.0 * sideLength
</span><span class='line'>    }
</span><span class='line'>    set {
</span><span class='line'>        sideLength = newValue / 3.0
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>メンバ変数に以下の記述,<code>willSet</code>,<code>didSet</code>をすることであらかじめ、前処理後処理ができるようになる</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class {
</span><span class='line'>    var triangle: EquilateralTriangle {
</span><span class='line'>    willSet {
</span><span class='line'>        square.sideLength = newValue.sideLength
</span><span class='line'>    }
</span><span class='line'>    didSet {
</span><span class='line'>        square.sideLength *= 2
</span><span class='line'>    }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>引数に別名を持たせられる</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Counter {
</span><span class='line'>    var count: Int = 0
</span><span class='line'>    func incrementBy(amount: Int, numberOfTimes times: Int) {
</span><span class='line'>        count += amount * times
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>var counter = Counter()
</span><span class='line'>counter.incrementBy(2, numberOfTimes: 7)
</span></code></pre></td></tr></table></div></figure>


<h2>Enumerations and Structures</h2>

<ul>
<li>メソッドも作成できる</li>
<li>最初に数値を入れておかなければならない</li>
<li>後はインクリメントされる</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>enum Rank: Int {
</span><span class='line'>    case Ace = 1
</span><span class='line'>    case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten
</span><span class='line'>    case Jack, Queen, King
</span><span class='line'>    func simpleDescription() -&gt; String {
</span><span class='line'>        switch self {
</span><span class='line'>        case .Ace:
</span><span class='line'>            return "ace"
</span><span class='line'>        case .Jack:
</span><span class='line'>            return "jack"
</span><span class='line'>        case .Queen:
</span><span class='line'>            return "queen"
</span><span class='line'>        case .King:
</span><span class='line'>            return "king"
</span><span class='line'>        default:
</span><span class='line'>            return String(self.toRaw())
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>let ace = Rank.Ace
</span><span class='line'>let aceRawValue = ace.toRaw() # 1
</span><span class='line'>let name = ace.simpleDescription() # "Ace"
</span></code></pre></td></tr></table></div></figure>


<p>enumの方で比較しないとだめ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>        if ace == Rank.Ace {
</span><span class='line'>            NSLog("-- ace!!!")
</span><span class='line'>        }
</span><span class='line'>// NG
</span><span class='line'>//        else if ace == 1 {
</span><span class='line'>//            NSLog("-- no ace...")
</span><span class='line'>//        }
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h5>structure</h5>

<ul>
<li>classとほぼ同じ振る舞いをする</li>
<li>処理するときは必ずコピーされる, クラスは参照によって処理される</li>
</ul>


<h2>Protocols and Extensions</h2>

<ul>
<li>基本的なところはObjective-Cと変わらない</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protocol ExampleProtocol {
</span><span class='line'>    var simpleDescription: String { get } # readonly
</span><span class='line'>    mutating func adjust()
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>クラスにも構造体にも組み込める</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class SimpleClass: ExampleProtocol {
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>struct SimpleStructure: ExampleProtocol {
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Generics</h2>

<ul>
<li>型に汎用性を持たせて同じロジックを処理させることができる</li>
<li><code>classes</code>, <code>enumerations</code>, <code>structures</code>で利用できる</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func repeat&lt;T&gt;(item: T, times: Int) -&gt; T[] {
</span><span class='line'>    var result = T[]()
</span><span class='line'>    for i in 0..times {
</span><span class='line'>        result += item
</span><span class='line'>    }
</span><span class='line'>    return result
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>repeat("knock", 4)
</span><span class='line'>repeat(333, 3)
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>何よりシンプルでモダンな作りになっているのでアプリを作ることがよりいっそう楽しくなること間違い無しですな。
ただ、いくつか説明できないところがあったので、次の会まで宿題にすることにします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC2014に参加してきました - 番外編(暮らし)]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/06/09/wwdc2014-life/"/>
    <updated>2014-06-09T07:43:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/06/09/wwdc2014-life</id>
    <content type="html"><![CDATA[<p><img src="http://nakajijapan.github.io/images/posts/2014-06-09-01.jpg" alt="サンフランシスコ" /></p>

<p><a href="http://nakajijapan.github.io/blog/2014/06/08/wwdc2014/">前回の記事(WWDC2014に参加してきました)</a>の番外編です。</p>

<p>初めてのサンフランシスコだったり、そこに一週間もいたのでブログにそのときの記録を記します。</p>

<h2>前準備</h2>

<ul>
<li>予約

<ul>
<li>ホテルと飛行機は早めに撮った方がいいです。全世界から人が集まるのでホテルは早く予約しないと結構遠くになって毎日いくのが大変、飛行機当然日程が迫るにつれて高くなるのでお早めに。</li>
</ul>
</li>
<li>服

<ul>
<li>会場の近くにはユニクロがあるのでパンツも靴下もパーカーも服はすべて現地調達できるので問題ありません！！！！</li>
</ul>
</li>
<li>携帯

<ul>
<li>バッテリーは必ず持っていきましょう！！いじってると絶対なくなります。</li>
</ul>
</li>
</ul>


<h2>空港＆飛行機</h2>

<ul>
<li>空港には余裕をもって３時間前に到着するといいでしょう。

<ul>
<li>40前に来たらいろいろ手続きがあるので時間がかかってしまうせいか空港の人にかなり急かされました。</li>
</ul>
</li>
<li>成田空港には第一ターミナル、第二ターミナルがあって降りる場所間違うとバスか電車で移動しないといけないので時間のロスになります。</li>
<li>飛行機は９時間ものっているのですごい暇になります。絶対暇つぶしになるものを用意しておくといいです。
自分はだいたいMacでブログ書いていたりプログラミングしていました。
やばそうな気流がぶつかることが何回かあって、多少ジェットコースター気分が味わえてしまいます。酔ってしまう人は注意してください。</li>
</ul>


<h2>電車</h2>

<ul>
<li>Moscone Centerまでは<a href="http://www.bart.gov/stations">地下鉄BART</a>を利用して行きます。電光掲示板が無いので毎回確認したほうがいいです。</li>
<li>お金をチャージして乗る形式っぽいです。</li>
</ul>


<h2>生活</h2>

<ul>
<li>インターネット

<ul>
<li>自分はソフトバンクなので<a href="http://www.softbank.jp/mobile/service/global/overseas/web/packet-flat-late/">海外パケットし放題</a></li>
</ul>
</li>
<li>だいたいのお店は袋が有料なので袋が必要ないのにOK!っていうと何セントかよけいに請求されます。</li>
<li>チャージが含まれているお店とそうでないお店があるので注意

<ul>
<li>相場は15-20%の間?</li>
<li>ベッドメイキングは<code>$1</code>が相場？</li>
</ul>
</li>
<li>物価は日本とそんな変わらないのですがチップのこと考えると高いですね。</li>
<li>タクシーは怖くて使わなかった</li>
<li>お酒を購入するときはは写真のID見せろと言われるので忘れずに</li>
<li>朝食・昼食はでますので食費には困らない

<ul>
<li>野菜でないのかなと思ってたらベジタリアン用の弁当がでていました。</li>
</ul>
</li>
<li>よく外国は窃盗が多いからリュックは前にして、財布は後ろポケットにいれるな！っていう言い伝えのようなものがあったけど全然しなかった

<ul>
<li>会場行き来するくらいなので何も起きなかっただけなのかもしれません&hellip;</li>
</ul>
</li>
</ul>


<h2>帰国</h2>

<ul>
<li>日本円に換金するときにコインは換金できないので使い切る必要があるといわれたのでコインは外国で使い切って帰国しましょう！！</li>
</ul>


<p>そんなところかな、何の問題もなく生活・帰還しました。
　
　</p>

<p>終わり。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC2014に参加してきました]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/06/08/wwdc2014/"/>
    <updated>2014-06-08T23:50:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/06/08/wwdc2014</id>
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/wwdc/">
  <img src="https://devimages.apple.com.edgekey.net/wwdc/images/wwdc14-home-branding.png" width=800/>
</a></p>

<p>今回、アプリエンジニアなら一度は行ってみたいはずのWWDC2014に行くことになりました。そこで、この一週間いろんなこと起きたので何回かに分けてブログという形で記録に残しておきたいと思います。</p>

<h2>経緯</h2>

<p>ここ最近の２、３年はプライベートでアプリを作る時間の割合がどんどん大きくなってきて何個かアプリを出したり、CocoaPodsでプラグインを出したりと活動して来たわけですが、その成果もあってかないのか仕事でもアプリの仕事を振られるようになって徐々に仕事もプライベートもアプリの仕事の比重が高くなってくる今日このごろでした。</p>

<p>そんななか同僚の<a href="https://twitter.com/misyobun">@misyobun</a> <a href="https://twitter.com/daniel0613">@daniel0613</a>と今年のWWDCはどうしようかという話になって、たしかにいち早くセッションの内容が見れたりLabで開発者の人に質問したりと魅力たっぷりなのですが予算とか有給とか上長の許可とか。。。。超えなければいけない壁あったのですが、まぁ当選に受かったらその後のことは後で考えようということで駄目もとで応募してみました。</p>

<p>その後、突如何の前触れもなく当選したというメールがきたのでびっくりしました。じわじわきた感じです。とはいえ、これからどうしたものかと思いとにかく基盤の方、事業部長、上長、人事の方に相談していろいろありましたが、WWDCに行く承認がおりましてめでたく参加という形になりました。一つ奇跡がありまして僕の同僚である<a href="https://twitter.com/misyobun">@misyobun</a>も受かっていたことです。初めてのサンフランシスコで初めてのWWDCだったの一緒にいくメンバーがいたのは大変心強いものを感じました。</p>

<h2>KeyNote</h2>

<p>詳しい纏めは<a href="http://www.gizmodo.jp/2014/06/wwdc_2014_3.html">ギズモードさんの記事</a>を読んでもらった方がわかりやすいです。</p>

<p>衝撃的だったのが新しいプログラミング「Swift」が発表されたこと。
しかも、しれっとはじまったので驚きました。。。クレイグさんが「Xcode..」って言ったときにみんな”ざわっ”ってしてたのは忘れないです。
今年はiPhone6やフィットネス関係のハードが出るのかなと思いきや、iOS8、Swiftとデベロッパの祭典ならではの内容だったのかなと思います。</p>

<p><img src="https://devimages.apple.com.edgekey.net/swift/images/swift-hero.png" alt="Swift" /></p>

<h4>Swift &ndash; Objective-C without C</h4>

<p><a href="https://developer.apple.com/swift/">Introducing Swift</a></p>

<ul>
<li>安全なプログラミングパターンの提供</li>
<li>現代の機能・技術の即したものをよりシンプルに柔軟に楽しく実装できる</li>
<li>Python, Objective-Cより高速</li>
</ul>


<h3>CocoaPods MeetUp in Twillio</h3>

<p>その日は、いろんな会社でWWDCにちなんだミートアップをやっていたので自分はTwillio社で開催されていたCocoaPodsのミートアップに参加してきました。英語が早くてほとんど聞き取れなかった・・・。とはいえ、なんかコミニュケーションしようと思って発表した人に挨拶しにいきました。</p>

<iframe src="http://nakajijapan.github.io//instagram.com/p/ow-OKBsR0Y/embed/" width="612" height="710" frameborder="0" scrolling="no" allowtransparency="true"></iframe>


<h2>2日目</h2>

<p>せっかくなので自分の興味のある分野をみてきたのでした。</p>

<ul>
<li>Mastering Modern Media Playback</li>
<li>Harnessing Metadata in Audiovisual Media</li>
<li>Introducing HomeKit</li>
</ul>


<p>夜は二人でSwiftごにょごにょ</p>

<h2>3日目</h2>

<p>この日もせっかくなので自分の興味のある分野をみてきたのでした。</p>

<ul>
<li>What&rsquo;s New in Core Audio</li>
<li>Introducing HealthKit</li>
<li>Mastering Modern Media Playback</li>
<li>Harnessing Metadata in Audiovisual Media</li>
<li>Camera Capture: Manual Controls</li>
<li>Intermediate Swift</li>
<li>Swift Interoperability In Depth</li>
</ul>


<p>夜は二人でSwiftごにょごにょ</p>

<h2>4日目</h2>

<p>この日は、二人でSwiftのドキュメント読んだりプログラミングしているうちにわからないところがでてきたので一旦セッションにでることは中止して各分野のLabにいって担当のエンジニアに質問をしに行く業を行いました。</p>

<ul>
<li>Swift Lab

<ul>
<li>Swiftの実装の仕方もろもろ</li>
</ul>
</li>
<li>Media Lab

<ul>
<li>AV Foundation関連でAVAssetWriterの処理方法</li>
</ul>
</li>
</ul>


<p>その後は、Bashというなの打ち上げが庭で開催されました。</p>

<h2>5日目</h2>

<ul>
<li>Advanced Swift Debugging in LLDB</li>
</ul>


<p>時間があったのでSwift Labで質問。</p>

<h2>Bash!!!!!!!</h2>

<p>WWDCは五日間あったのですが、四日目にはBash!というなの打ち上げがあり、せっかくなので参加してきました。開会式・閉会式とかはないんですがね&hellip;これは文化の違いなのかな。あ、書いてて思ったのですが、
参加したエンジニアと交流する名目のあれだったんだな思いました。。。。Bashのプログラムが全くなかったので同僚と話していたらおばちゃんが英語で交流しなさい！！
っていわれたので何人かのエンジニアさんと会話してきましたのも思い出しました。アジアからきたりヨーロッパからきたりいろんな国のエンジニアさんと話させていただきました。
みんな英語流暢でなかなか理解できなかったのですがそこはお酒の力をかりてテンションで会話できたのでした。。。</p>

<p>途中からはライブが始まり、KeyNoteで流れていた曲のアーティスト、Bastilleがライブしたらしいです。KeyNoteを見直したら確かにこの曲でじわじわと会場にいたときの興奮がよみがえって来たので購入してしまいましたw</p>

<p><img src="http://ecx.images-amazon.com/images/I/51IANZeQuXL.jpg" alt="Bastille - Pompeii" /></p>

<p>Bad Blood &ndash; Pompeii</p>

<p>あと、本当に偶然にクレイグさんが近くにいたので一緒に写真を撮らせていただいたのは貴重な思い出です。安定のスマイルでした。</p>

<blockquote class="twitter-tweet" lang="ja"><p>Awesome!! はじめまして！ <a href="https://twitter.com/craig_apple">@craig_apple</a> <a href="https://twitter.com/search?q=%23WWDC&amp;src=hash">#WWDC</a> <a href="http://t.co/zjZ3LrzLFA">pic.twitter.com/zjZ3LrzLFA</a></p>&mdash; nakajijapan (@nakajijapan) <a href="https://twitter.com/nakajijapan/statuses/474827650419007488">2014, 6月 6</a></blockquote>


<script async src="http://nakajijapan.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>WWDCに参加してみて</h2>

<h3>Labにもっと行こう！！！</h3>

<p>今回は初めてもありあまり用意という用意はしてこなかったのですが、実際に参加してみてセッションに躍起になって参加はしなくてもいいのかなと思いました。
今年はセッションの発表が終了してから１、２日後にはセッションの動画アップロードされているので、あまりWWDCに参加したメリットは感じられないと思います。
なのでセッションは適度にして、新しい機能や仕事やプライベートで解決できない問題纏めて各分野のLabで質問しまくるのがいいなと思いました。
実際に、Appleのエンジニアさんも、皆さんがLabで質問してくるこが大変ありがたいし大歓迎だよ！改善にもつながるしね！とおっしゃっていました。
英語もコードとサンプルプログラムで一緒に話せばなんとかなると実感しました。
もっと、質問すれば良かったと大変反省しております。</p>

<h3>沸き上がる興奮を日本に持ち帰る</h3>

<p>自慢話します。（違います）
今回参加したことを何らかの形でフィードバックして来年こそ自分が行きたい！来年も参加の許可が下りるようにする使命みたいなものは勝手にあると思っています。
もっと盛り上げたいな。まぁ自分や近くにいる人たちが楽しんでれば、勝手に集まってくるのかな。よし、もっと楽しもう！！！！</p>

<h3>戦争だ！</h3>

<p>いや、ビジネスと言う名の戦争です。
外国の方（特に英語圏）は言語の壁がないのでがんがんLabに質問していって解決したり、勝手に他のエンジニアとなかよくなって情報交換したりと圧倒されたり、
このようなエンジニアが会場でこんな多いと感じたのに世界にはもっとたくさんいるんだなと思うと自分なんてほんの点なんだなと萎縮しています。</p>

<p>そんな人と、ビジネスで闘っているとなるとなおさら。</p>

<h2>最後に</h2>

<p>相談に乗っていただいた<a href="https://twitter.com/kentaro">@kentaro</a>さん、<a href="https://twitter.com/mau_rin">@mau_rin</a>さん、
仕事がまだがんがん残っているのにも関わらず許可していただいた上長、事業部長、そしてWWDCそしてサンフランシスコで一週間心の支えになった同僚の
<a href="https://twitter.com/misyobun">@misyobun</a>には大変大変大変大変大変感謝しております。</p>

<p>この恩義は業務や後輩の育成で返していこう思います！！！！</p>

<p>ぼそっ(来年も参加したい。。。)
ぼそっ(仕事が溜まってる!!!!!)</p>

<p>以上、Apple信者のたわいもないブログでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[app道場#3 「よくある動画アプリのあれを実装したい」を発表した]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/06/01/app-doujou3/"/>
    <updated>2014-06-01T20:05:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/06/01/app-doujou3</id>
    <content type="html"><![CDATA[<p>２回目の参加となるiPhone and Android勉強会の<a href="http://atnd.org/events/50499">「app道場#3」</a>に参加してきました。</p>

<p>今回は、自分が酔った勢いで以下のような発言をしてしまい、大変誤解を招くような発言をしてしまいました。この場を借りて陳謝したいと思います。
そんなこんながありまして、弊社で勉強会を開催する運びとなりました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>mixiさんに喧嘩売ってきた。</p>&mdash; nakajijapan (@nakajijapan) <a href="https://twitter.com/nakajijapan/statuses/458961908943446016">2014, 4月 23</a></blockquote>


<script async src="http://nakajijapan.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>詳細は<a href="http://www.vagrantup.jp/entry/2014/05/31/234116">「喧嘩を売る」</a>を参照すると良いでしょう。</p>

<blockquote><p>お分かりの通り、ここでいう「喧嘩を売る」は「次の勉強会を企画・開催する」と解釈されます。
「app道場」という字面的に少し物騒ではありますが「喧嘩」というフレーズは意外にも正鵠を射ているのではないかと思う次第です。（さすが、@nakajijapan）</p></blockquote>

<p>いいこといっています。</p>

<h2>本題</h2>

<p>さて、今回は「よくある動画アプリのあれを実装したい」というタイトルで、またもやAV Foundationの話になります。自分も動画周りの勉強してる身として、VineとかInstagramとかの動画のインターフェースの実装ってどうやるんだろうなと疑問に思っていました。
気になって気になってしょうがなかったのでちょっと実装してみようかなという想い、自分なりに考えて実装してみました。</p>

<script async class="speakerdeck-embed" data-id="52a36f80c901013130852e590c444dc4" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>仕様自体は以下のようになっています。</p>

<ul>
<li>タッチが開始したら動画の保存を開始する</li>
<li>タッチが終了したら動画の保存を終了する</li>
<li>動画はファイルに保存する</li>
<li>それぞれ保存した動画を結合して一つの動画ファイルに結合する。</li>
</ul>


<p>詳細はスライドを見ていただくことにして、実際にいい感じにできたのでCocoaPodsに登録しました。</p>

<p><a href="https//github.com/nakajijapan/NKJMultiMovieCaptureView.git">NKJMultiMovieCaptureView</a></p>

<p>これが今回公開したpodで、SessionCaptureView部分にタッチして動画を保存するところまでの処理を提供しています。
実際の保存処理は前回作成したpod, <a href="https//github.com/nakajijapan/NKJMovieComposer.git">NKJMovieComposer</a>を利用することで簡単に実装することができます。</p>

<p>しかし、まだまだまだまだ汎用性に欠ける部分が多々あるので粛々と時間を見つけて改善していこうと思います。</p>

<h4>課題</h4>

<ul>
<li>現在は正方形のビデオサイズを主にテスト対象にしているのでいろんなサイズに対応できるようにする</li>
<li>動画を結合したときに最初の0.1?0.2?だけ真っ黒になる部分がでてしまう。</li>
</ul>


<h2>懇親会</h2>

<p>今回の勉強会にSlideStoryさんの中の人が来てくださって、動画周りのことでやんややんやお話を聞くとができたので大変勉強なりやした。
実装してみてやはり同じ課題にぶつかっていたそうです。あと何個か動画関連のpodを紹介してもらえたので時間を見つけて実装して見ようと思います。</p>

<ul>
<li><a href="https://github.com/rFlex/SCRecorder">SCRecorder</a></li>
<li><a href="https://github.com/BradLarson/GPUImage">GPUImage</a></li>
</ul>


<p>また、今回の勉強会の裏側で違う勉強会が開催されていた模様で自分と同じような内容の発表があり、大変シンクロを感じましたので紹介させていただきます。かなり驚きました！！！！w</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35199041" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/himaratsu/6-vine" title="6秒動画アプリ Vineの作り方" target="_blank">6秒動画アプリ Vineの作り方</a> </strong> from <strong><a href="http://www.slideshare.net/himaratsu" target="_blank">Hiramatsu Ryosuke</a></strong> </div></p>

<p>最後に、勉強会準備で手伝ってくださったみなさん、app道場関係者のみなさん、本当にお疲れ様でした。また次も参加します！！</p>

<p>だれかに喧嘩売らねば！！！！！（売りません買わないでださい）</p>

<h2>Ref</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureVideoDataOutput_Class/Reference/Reference.html">AVCaptureVideoDataOutput</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureVideoDataOutputSampleBufferDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/AVCaptureVideoDataOutputSampleBufferDelegate/captureOutput:didOutputSampleBuffer:fromConnection:">AVCaptureVideoDataOutputSampleBufferDelegate</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/AVFoundation/Reference/AVCaptureAudioDataOutputSampleBufferDelegate_Protocol/Reference/Reference.html">AVCaptureAudioDataOutputSampleBufferDelegate</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAssetWriter_Class/Reference/Reference.html">AVAssetWriter</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/AVFoundation/Reference/AVAssetWriterInput_Class/Reference/Reference.html">AVAssetWriterInput</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/CoreMedia/Reference/CMSampleBuffer/Reference/reference.html">CMSampleBuffer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[動画からサムネイル画像を生成する]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/05/25/creating-thumbnailimage-from-the-movie/"/>
    <updated>2014-05-25T22:02:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/05/25/creating-thumbnailimage-from-the-movie</id>
    <content type="html"><![CDATA[<p>動画のある一部分を画像として取り出したいときがあったので調べてみたら、ドキュメントにそれっぽい記述があったので実装してみました。</p>

<p>方法としては、以下のメソッドを利用してCMTimeを利用して指定された時間に対する画像を生成します。</p>

<blockquote><p>copyCGImageAtTime:actualTime:error:</p></blockquote>

<p>実際に、メソッドにして動くようにしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UIImage*)createThumbnailImageWithURL:(NSURL *)movieURL
</span><span class='line'>{
</span><span class='line'>    AVAsset *asset = [[AVURLAsset alloc] initWithURL:[movieURL objectAtIndex:index] options:nil];
</span><span class='line'>
</span><span class='line'>    if ([asset tracksWithMediaCharacteristic:AVMediaTypeVideo]) {
</span><span class='line'>        AVAssetImageGenerator *imageGenerator = [[AVAssetImageGenerator alloc] initWithAsset:asset];
</span><span class='line'>
</span><span class='line'>        Float64 durationSeconds = CMTimeGetSeconds([asset duration]);
</span><span class='line'>        CMTime midpoint         = CMTimeMakeWithSeconds(durationSeconds/2.0, 600);
</span><span class='line'>        NSError* error          = nil;
</span><span class='line'>        CMTime actualTime;
</span><span class='line'>
</span><span class='line'>        CGImageRef halfWayImageRef = [imageGenerator copyCGImageAtTime:midpoint actualTime:&actualTime error:&error];
</span><span class='line'>
</span><span class='line'>        if (halfWayImageRef != NULL) {
</span><span class='line'>            UIImage* image = [[UIImage alloc]initWithCGImage:halfWayImageRef];
</span><span class='line'>
</span><span class='line'>            // 明示的にリリースしておきます
</span><span class='line'>            CGImageRelease(halfWayImageRef);
</span><span class='line'>            return image;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return nil;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>動画を取り終わった後に、一時的に一覧として残しておきたいときなどに利用できますね。</p>

<h2>p.s.</h2>

<p>これは試していないのですが、以下のメソッドがあってブロックの中で複数の画像が生成できるようです。</p>

<blockquote><p>generateCGImagesAsynchronouslyForTimes:completionHandler::^(CMTime requestedTime, CGImageRef image, CMTime actualTime, AVAssetImageGeneratorResult result, NSError
*error)</p></blockquote>

<h2>ref</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/AVFoundationPG.pdf">AV Foundation Programming Guide</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVAudioMixでオーディオの調節を行う]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/05/01/about-audiomix/"/>
    <updated>2014-05-01T11:56:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/05/01/about-audiomix</id>
    <content type="html"><![CDATA[<p>先日、<a href="https://itunes.apple.com/jp/app/the-ghost-movie-app-look-again/id696530211?mt=8">心霊動画アプリ「もう一度ご覧いただこう」</a>のアップデートしました。
その修正内容を書き綴ろうと思います。この動画アプリでは、録画した動画の同じタイムライン上にナレーションが入るのですが、あまりに録画した動画がにぎやかすぎるとナレーションがほとんど聞き取れない問題がありました。
対策としては、ナレーションの音声はそのままにして録画した動画の音声を小さくするように調整すること。<code>AVAudioMix</code>、<code>AVMutableAudioMixInputParameters</code>をうまく利用することで解決しました。</p>

<h2>実装</h2>

<p>基本的には対象のメディア情報に対して、オーディオを制御する用の<code>AVMutableAudioMixInputParameters</code>を利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVMutableComposition</span> <span class="n">avComposition</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">snip</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// movie sound</span>
</span><span class='line'><span class="n">AVMutableCompositionTrack</span><span class="o">*</span> <span class="n">compositionAudioTrack</span> <span class="o">=</span> <span class="p">[</span><span class="n">avComposition</span> <span class="nl">addMutableTrackWithMediaType:</span><span class="n">AVMediaTypeAudio</span>
</span><span class='line'>                                                                              <span class="nl">preferredTrackID:</span><span class="n">kCMPersistentTrackID_Invalid</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// オーディオのメディア情報をもとにオーディオミックス用のパラメータを生成する</span>
</span><span class='line'><span class="n">AVMutableAudioMixInputParameters</span> <span class="o">*</span><span class="n">mixInputParameters</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableAudioMixInputParameters</span>
</span><span class='line'>                                                        <span class="nl">audioMixInputParametersWithTrack:</span><span class="n">audioTrack</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 音量の調整</span>
</span><span class='line'><span class="p">[</span><span class="n">mixInputParameters</span> <span class="nl">setVolumeRampFromStartVolume:</span><span class="mf">0.2f</span> <span class="nl">toEndVolume:</span><span class="mf">0.2f</span>
</span><span class='line'>                                  <span class="nl">timeRange:</span><span class="n">CMTimeRangeMake</span><span class="p">(</span><span class="n">kCMTimeZero</span><span class="p">,</span> <span class="n">videoAsset</span><span class="p">.</span><span class="n">duration</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 入力パラメータをオーディオミックスに渡す。</span>
</span><span class='line'><span class="n">mutableAudioMix</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVMutableAudioMix</span> <span class="n">audioMix</span><span class="p">];</span>
</span><span class='line'><span class="n">mutableAudioMix</span><span class="p">.</span><span class="n">inputParameters</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="n">mixInputParameters</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>&ndash; (BOOL)getVolumeRampForTime:(CMTime)time startVolume:(float <em>)startVolume endVolume:(float </em>)endVolume timeRange:(CMTimeRange *)timeRange</h4>

<p>これでどの時間からどのくらいの間、音量をどのくらいにするのかの設定を行えるので、ここでその制御を行います。自分の場合はずっと音量を低くできればよかったので上記のような設定になっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVAssetExportSession</span> <span class="o">*</span><span class="n">assetExportSession</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">snip</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 音声の制御</span>
</span><span class='line'><span class="n">assetExportSession</span><span class="p">.</span><span class="n">audioMix</span> <span class="o">=</span> <span class="n">mutableAudioMix</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定が終われば、<code>AVAssetExportSession</code>の<code>audioMix</code>に格納すれば、設定が反映されているはずです。
これでナレーションが動画がうるさくてもしっかり聞こえるようになったので、よりテレビ番組のような感じに近づけられたかと思います！！！</p>

<h2>Resources</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVMutableAudioMix_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40009740">AVMutableAudioMix Class</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAudioMixInputParameters_Class/Reference/Reference.html#//apple_ref/occ/cl/AVAudioMixInputParameters">AVAudioMixInputParameters Class</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVCompositionDebugVieweriOS使ってみた]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/04/23/debug-of-a-video-editing/"/>
    <updated>2014-04-23T10:50:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/04/23/debug-of-a-video-editing</id>
    <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="e6b31510ad7401311d323e814ed3dd4c" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>先日ですが、mixiさんで開催されたスマホアプリ開発勉強会 <a href="http://atnd.org/events/49386">app道場 #2</a>に参加して、LTしてきました。</p>

<p>今回は、WWDC 2013 Session Videosの<code>Advanced Editing with AV Foundation</code>をみていたときにまだ試していないサンプルがあったのと、ビデオ編集時に使えそうなテストプログラムだったので試しに使ってみたときの話をしてきました。
「Debug of a video editing」です。サンプルプログラムのタイトルは<code>AVCompositionDebugVieweriOS</code>です。</p>

<p>これは、ビデオ編集時に大きく<code>AVComposition</code>,<code>AVVideoComposition</code>,<code>AVAudioMix</code>なるクラスを利用するのですが、その構造を可視化してくれるプログラムでした。
普段は、生成した後に単純に目的の動画が完成しているかをただ <strong>目視</strong> しているだけだったのでサンプレプログラムなのに大変助かるプログラムでした。なので少しカスタマイズして自分で作った動画アプリ<a href="https://itunes.apple.com/jp/app/xin-ling-dong-huaapuri-mou/id696530211?mt=8&amp;ign-mpt=uo%3D4">「もう一度ご覧いただこう」</a>に組み込んでおきました。</p>

<p>発表がすべて終了した後の反省会なる飲み会が、参加者全員？といろいろおしゃべりもできて大変有意義な時間を過ごさせていただきました。
mixiさん、@punchdrunkerさん、参加された皆さん楽しい時間をありがとうございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メディアキャプチャの出力先の実装について]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/04/07/about-avcaptureinput/"/>
    <updated>2014-04-07T02:10:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/04/07/about-avcaptureinput</id>
    <content type="html"><![CDATA[<p><code>AV Foundation</code>を利用して写真の撮影やはたまた動画の撮影を行う場合は、カメラデバイスに接続して映像をリアルタイムに表示させたい場合があるかと思います。</p>

<p><img src="http://nakajijapan.github.io/images/posts/2014-04-06-01.png" alt="AV Foundation" /></p>

<p>そんなときは<code>AVCaptureSession</code>を利用してメディアキャプチャの実装の準備をを行い、入力先・出力先はどうするかという設定を行うのですが、今回はその出力部分について何パターンか方法があったので調べてみました。</p>

<h3>Video Output</h3>

<ul>
<li>AVCaptureMovieFileOutput

<ul>
<li>ムービーファイルを出力するときに利用する</li>
</ul>
</li>
<li>AVCaptureVideoDataOutput

<ul>
<li>キャプチャ中のビデオフレームを処理するときに利用する</li>
</ul>
</li>
<li>AVCaptureStillImageOutput

<ul>
<li>付随するメタデータを使用して静止画像をキャプチャするときに利用する</li>
</ul>
</li>
</ul>


<h3>Audio Output</h3>

<ul>
<li>AVCaptureAudioDataOutput

<ul>
<li>キャプチャ中のオーディオフレームを処理するときに利用する</li>
</ul>
</li>
</ul>


<h2>使い方</h2>

<h3>AVCaptureMovieFileOutput</h3>

<p>ムービーファイルを保存するのに必要な処理を提供してくれるクラス。</p>

<p>録画するときは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//録画開始</span>
</span><span class='line'><span class="p">[</span><span class="n">captureMovieFileOutput</span> <span class="nl">startRecordingToOutputFileURL:</span><span class="n">outputURL</span> <span class="nl">recordingDelegate:</span><span class="n">self</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように始めることができます。</p>

<p>必要に応じて<code>AVCaptureFileOutputRecordingDelegate</code>オプションを利用して、各タイミングに応じた処理を行います。</p>

<ul>
<li>AVCaptureFileOutputRecordingDelegate</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">Delegate</span> <span class="n">Methods</span>
</span><span class='line'>
</span><span class='line'><span class="err">–</span> <span class="nl">captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:</span>
</span><span class='line'><span class="err">–</span> <span class="nl">captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:</span>
</span></code></pre></td></tr></table></div></figure>


<p>前者は録画を開始したときに、後者は終了したときに呼び出されるメソッドです。例えば、<code>captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:</code>の時に録画したムービーファイルをデバイスに保存する等の処理が行えることができます。</p>

<h4>AVCaptureStillImageOutput</h4>

<p>画像をキャプチャするときに利用して、出力は以下のように実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">AVCaptureConnection</span> <span class="o">*</span><span class="n">connection</span> <span class="o">=</span> <span class="p">[[</span><span class="n">captureStillImageOutput</span> <span class="n">connections</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">captureStillImageOutput</span> <span class="nl">captureStillImageAsynchronouslyFromConnection:</span><span class="n">connection</span>
</span><span class='line'>                                                     <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">CMSampleBufferRef</span> <span class="n">imageDataSampleBuffer</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                                         <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVCaptureStillImageOutput</span> <span class="nl">jpegStillImageNSDataRepresentation:</span><span class="n">imageDataSampleBuffer</span><span class="p">];</span>
</span><span class='line'>                                                         <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageWithData:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>                                                         <span class="n">ALAssetsLibrary</span> <span class="o">*</span><span class="n">library</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ALAssetsLibrary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>                                                         <span class="p">[</span><span class="n">library</span> <span class="nl">writeImageToSavedPhotosAlbum:</span><span class="n">image</span><span class="p">.</span><span class="n">CGImage</span>
</span><span class='line'>                                                                                   <span class="nl">orientation:</span><span class="n">image</span><span class="p">.</span><span class="n">imageOrientation</span>
</span><span class='line'>                                                                               <span class="nl">completionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="n">assetURL</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                                                                   <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;saved&quot;</span><span class="p">);</span>
</span><span class='line'>                                                                               <span class="p">}];</span>
</span><span class='line'>                                                     <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AVCaptureVideoDataOutput, AVCaptureAudioDataOutput</h3>

<p>デリゲートメソッドを利用して非圧縮状態のビデオフレーム情報を提供します。
そのフレーム情報は<code>CMSampleBufferRef</code>という形式で送信されてきてそれを利用して動画の保存やら編集やらを行うことができます。
このときにビデオとオーディオは別で処理しないといけません。（デリゲートメソッドが分かれているように）
主にビデオもオーディオも両方扱うときは<code>– captureOutput:didOutputSampleBuffer:fromConnection:</code>でどちらのメディアなのか区別して処理を行うような実装になります。
さらに細かい処理を行っていく場合はこちらのクラスを実装しないといけないですね。例えば、リアルタイムに動画を編集したりだとか、Vineみたいにタッチしているときは動画の保存し続けるような処理でしょうか。</p>

<ul>
<li>AVCaptureVideoDataOutputSampleBufferDelegate</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">Managing</span> <span class="n">Sample</span> <span class="n">Buffer</span> <span class="n">Behavior</span>
</span><span class='line'><span class="err">–</span> <span class="nl">captureOutput:didOutputSampleBuffer:fromConnection:</span>
</span><span class='line'><span class="err">–</span> <span class="nl">captureOutput:didDropSampleBuffer:fromConnection:</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>AVCaptureAudioDataOutputSampleBufferDelegat</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">Delegate</span> <span class="n">Methods</span>
</span><span class='line'><span class="err">–</span> <span class="nl">captureOutput:didOutputSampleBuffer:fromConnection:</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>メディアキャプチャの出力先の実装について調べてみました。目的に応じてどれを使うかは選択していけばいいのですが、よりユーザにインタラクティブなインタフェースや体験をさせるにはそれ相応に細かい実装していかなければいけないこともわかりました。何度も言っているかもしれないけどメディア系の実装は大変です。。。</p>

<h2>ref</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/AVFoundationPG.pdf">AV Foundation公式ドキュメント</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureMovieFileOutput_Class/Reference/Reference.html#//apple_ref/occ/cl/AVCaptureMovieFileOutput">AVCaptureMovieFileOutput</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureFileOutputRecordingDelegate_Protocol/Reference/Reference.html">AVCaptureFileOutputRecordingDelegate</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureVideoDataOutput_Class/Reference/Reference.html">AVCaptureVideoDataOutput</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVCaptureVideoDataOutputSampleBufferDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/AVCaptureVideoDataOutputSampleBufferDelegate/captureOutput:didOutputSampleBuffer:fromConnection:">AVCaptureVideoDataOutputSampleBufferDelegate</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/AVFoundation/Reference/AVCaptureAudioDataOutputSampleBufferDelegate_Protocol/Reference/Reference.html">AVCaptureAudioDataOutputSampleBufferDelegate</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRKit + iBeacon]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/03/29/irkit-plus-ibeacon/"/>
    <updated>2014-03-29T16:32:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/03/29/irkit-plus-ibeacon</id>
    <content type="html"><![CDATA[<p>先日IRKitとEstimote Beaconsを購入しまして、せっかくなんでこの二つ合わせてなにかできないかなーと思いまして
自宅で活用できるものを作ってみました。</p>

<h4>IRKit</h4>

<p><a href="http://www.amazon.co.jp/IRKit-001-IRKit-iPhone-iPad%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E5%A4%96%E5%87%BA%E5%85%88%E3%81%8B%E3%82%89%E3%82%A8%E3%82%A2%E3%82%B3%E3%83%B3%E7%AD%89%E3%81%AE%E5%AE%B6%E9%9B%BB%E3%82%92%E6%93%8D%E4%BD%9C%E3%81%A7%E3%81%8D%E3%82%8B%E5%AD%A6%E7%BF%92%E3%83%AA%E3%83%A2%E3%82%B3%E3%83%B3/dp/B00H91KK26%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Ddaichibnejp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00H91KK26" target="_blank" title="IRKit - iPhone,iPadを使って外出先からエアコン等の家電を操作できる学習リモコン"><img src="http://ecx.images-amazon.com/images/I/31HuSy3ACXL.jpg" width="500" height="356" alt="IRKit - iPhone,iPadを使って外出先からエアコン等の家電を操作できる学習リモコン" /></a></p>

<h4>Estimote Beacons</h4>

<iframe src="http://nakajijapan.github.io//instagram.com/p/iDTqkYMR1I/embed/" width="612" height="710" frameborder="0" scrolling="no" allowtransparency="true"></iframe>


<p>仕様としては、</p>

<ul>
<li>beaconに近づいたら（家に帰ってきたら）テレビをつける</li>
<li>beaconから離れたら（外出したら）テレビを消す</li>
</ul>


<p>ってことを試してみました。</p>

<h2>下準備</h2>

<p>まずはそれぞれのライブラリを追加して<code>pod install</code>する。</p>

<p>SDKのインストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target "irkit_ibeacon" do
</span><span class='line'>  pod 'IRKit', :git =&gt; 'https://github.com/irkit/ios-sdk.git'
</span><span class='line'>  pod 'EstimoteSDK'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>frameworkの追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CoreLocation.framework
</span><span class='line'>CoreBluetooth.framework</span></code></pre></td></tr></table></div></figure>


<h2>IRKit</h2>

<p>ここでは、IRKit SDKを利用してシグナルを登録してテーブルのセルにボタンを追加する処理を行います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">snip</span><span class="p">..)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// find IRKit</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">IRKit</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">countOfReadyPeripherals</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">IRNewPeripheralViewController</span> <span class="o">*</span><span class="n">vc</span> <span class="o">=</span> <span class="p">[[</span><span class="n">IRNewPeripheralViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">vc</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">vc</span>
</span><span class='line'>                           <span class="nl">animated:</span><span class="n">YES</span>
</span><span class='line'>                         <span class="nl">completion:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                             <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;presented&quot;</span><span class="p">);</span>
</span><span class='line'>                         <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IRSignals</span> <span class="o">*</span><span class="n">tmpSignals</span> <span class="o">=</span> <span class="p">[[</span><span class="n">IRSignals</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// and add a signal to the collection</span>
</span><span class='line'>    <span class="p">[</span><span class="n">tmpSignals</span> <span class="nl">loadFromStandardUserDefaultsKey:</span><span class="s">@&quot;xxxxxxxxxxxxxxxxxxxxxx&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">[[</span><span class="n">tmpSignals</span> <span class="n">signals</span><span class="p">]</span> <span class="n">count</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">tmpSignals</span> <span class="n">signals</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>IRNewPeripheralViewControllerDelegate</code>で信号の登録が終了したときに呼ばれるメソッドの実装を行います。
ここでは、ハード側で学習が完了した信号を<code>NSUserDefault</code>側でも保存させるようにしておきます。（実際にはそのシグナルを識別できるようにするためのハッシュ値のようなもの）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cp">#pragma mark - IRNewPeripheralViewControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">newSignalViewController:</span><span class="p">(</span><span class="n">IRNewSignalViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span>
</span><span class='line'>            <span class="nf">didFinishWithSignal:</span><span class="p">(</span><span class="n">IRSignal</span> <span class="o">*</span><span class="p">)</span><span class="nv">signal</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span> <span class="s">@&quot;signal: %@&quot;</span><span class="p">,</span> <span class="n">signal</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_datasource</span> <span class="nl">addSignalsObject:</span><span class="n">signal</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_datasource</span><span class="p">.</span><span class="n">signals</span> <span class="nl">saveToStandardUserDefaultsWithKey:</span><span class="s">@&quot;SIGNALS&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span>
</span><span class='line'>                             <span class="nl">completion:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                                 <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;dismissed&quot;</span><span class="p">);</span>
</span><span class='line'>                             <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - IRNewSignalViewControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">newPeripheralViewController:</span><span class="p">(</span><span class="n">IRNewPeripheralViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span>
</span><span class='line'>            <span class="nf">didFinishWithPeripheral:</span><span class="p">(</span><span class="n">IRPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span> <span class="s">@&quot;peripheral: %@&quot;</span><span class="p">,</span> <span class="n">peripheral</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span>
</span><span class='line'>                             <span class="nl">completion:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                                 <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;dismissed&quot;</span><span class="p">);</span>
</span><span class='line'>                             <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>登録した信号を実行するときは以下のような実装で呼び出せるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;indexPath: %@&quot;</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">tableView</span> <span class="nl">deselectRowAtIndexPath:</span><span class="n">indexPath</span>
</span><span class='line'>                             <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IRSignal</span> <span class="o">*</span><span class="n">signal</span> <span class="o">=</span> <span class="p">[</span><span class="n">_datasource</span> <span class="nl">objectAtIndex:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">signal</span> <span class="nl">sendWithCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;sent error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>iBeacon</h2>

<p>ここでは、ビーコンで領域を観測し出たか入ったかを監視して、IRKitに信号を送る処理を行います。</p>

<p>まず、<code>ESTBeaconManager</code>をインスタンス化して<code>startMonitoringForRegion:</code> で監視を開始します。
<code>startRangingBeaconsInRegion:</code>で距離の観測を開始します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">snip</span><span class="p">...)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">beaconManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ESTBeaconManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">beaconManager</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ESTBeaconRegion</span> <span class="o">*</span><span class="n">region</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ESTBeaconRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProximityUUID:</span><span class="n">MY_ESTIMOTE_PROXIMITY_UUID</span>
</span><span class='line'>                                                                       <span class="nl">major:</span><span class="mi">36605</span>
</span><span class='line'>                                                                       <span class="nl">minor:</span><span class="mi">43679</span>
</span><span class='line'>                                                                  <span class="nl">identifier:</span><span class="s">@&quot;EstimoteSampleRegion&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">beaconManager</span> <span class="nl">startMonitoringForRegion:</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">beaconManager</span> <span class="nl">startRangingBeaconsInRegion:</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>位置情報を利用した領域観測の方法と同様に、ビーコン領域の出入りのイベントをハンドリングします。その処理内でIRKitへ信号の送信する処理を実行します。
メソッドとしては、<code>locationManager:didEnterRegion:</code>と、<code>locationManager:didExitRegion:</code>をハンドリングして処理を行います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">beaconManager:</span><span class="p">(</span><span class="n">ESTBeaconManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didEnterRegion:</span><span class="p">(</span><span class="n">ESTBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IRSignals</span> <span class="o">*</span><span class="n">signals</span> <span class="o">=</span> <span class="p">[[</span><span class="n">IRSignals</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">signals</span> <span class="nl">loadFromStandardUserDefaultsKey:</span><span class="s">@&quot;SIGNALS&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">IRSignal</span> <span class="o">*</span><span class="n">signal</span> <span class="o">=</span> <span class="p">[</span><span class="n">signals</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">signal</span> <span class="nl">sendWithCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="nl">say:</span><span class="p">[</span><span class="n">NSString</span>  <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@を実行しました。&quot;</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">name</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;beaconの近くに入りました。&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">beaconManager:</span><span class="p">(</span><span class="n">ESTBeaconManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didExitRegion:</span><span class="p">(</span><span class="n">ESTBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IRSignals</span> <span class="o">*</span><span class="n">signals</span> <span class="o">=</span> <span class="p">[[</span><span class="n">IRSignals</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">signals</span> <span class="nl">loadFromStandardUserDefaultsKey:</span><span class="s">@&quot;SIGNALS&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">IRSignal</span> <span class="o">*</span><span class="n">signal</span> <span class="o">=</span> <span class="p">[</span><span class="n">signals</span> <span class="nl">objectAtIndex:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">signal</span> <span class="nl">sendWithCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="nl">say:</span><span class="p">[</span><span class="n">NSString</span>  <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@を実行しました。&quot;</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">name</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;beaconから離れました。&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>これで上記の仕様が実現できます。
今回の実装はまだIRKitにしてもEstimote Beaconsにしてもさわりの部分しか実装していないのですが、他の仕様も合わせたりするとまだまだ面白いことでできるかと思います。
最近、生活が変わるような技術がどんどんでてきていて楽しいですね♪（ただハードを購入しなきゃいけないのでお金がかかってしまいますがw）
まだまだこれからも、生活を変えるような技術がでてくると思うのでそれキャッチアップして試せるものは試していこうと思います！！</p>

<p>Enjoy Technology!!!</p>

<h2>Ref</h2>

<ul>
<li><a href="http://getirkit.com/">IRKit</a></li>
<li><a href="http://estimote.com/">Estimote Beacons</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第５回 #potatotips に参加してきた。]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/03/17/potetotips5-nkjmoviecomposer/"/>
    <updated>2014-03-17T03:37:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/03/17/potetotips5-nkjmoviecomposer</id>
    <content type="html"><![CDATA[<p>先日ですが、#potatetips　（第五回）に参加させていただきました。
持ち時間一人５分のtips共有会なのですが、自分はAVFoundation周りの話をしてきました。
本当は実装しているときにこんなメソッド使うと便利だよとかこうすると迷走するからこうしたしたほうがいいよとかあればよかったのですが
いまいち思いつかなくて、自分でプラグイン作成して、これ使うと便利だよっ、知らなかったでしょう！！という感じに強制的にもっていった発表内容でした。
内容としては前回の発表のつづきで、以前作成したアプリの機能を切り出して、動画関連の処理を簡単に実装できるようにした（CocoaPods化）した話をしました。</p>

<script async class="speakerdeck-embed" data-id="f675b2008c7e013162b85e7a2e8ee0d7" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p><a href="https://github.com/nakajijapan/NKJMovieComposer">NKJMovieComposer</a></p>

<p>インストール方法は至って簡単で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod "NKJMovieComposer"</span></code></pre></td></tr></table></div></figure>


<p>でオッケーです。後は実装するファイルに<code>#import 'NKJMovieComposer.h'を追加すればOKです。</code></p>

<p>機能としては以下の機能が実装できます。</p>

<ul>
<li>動画結合</li>
<li>ワイプ</li>
<li>フェードイン・アウト</li>
</ul>


<p>詳しいことは<a href="https://github.com/nakajijapan/NKJMovieComposer">GitHub</a>をみていただくことにして、
まだエラー処理とかデバイス・OSに応じたカスタマイズがまだまだできていないので地道に実装していこうと思います。</p>

<p>最後に、発表者のみなさん、クックパッドさんおつかれさまでした！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant勉強会でLTした]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/02/28/vagrant-tips/"/>
    <updated>2014-02-28T20:34:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/02/28/vagrant-tips</id>
    <content type="html"><![CDATA[<p>社内でVagrant勉強会があったので参加・発表してきました。</p>

<p>あるサービスのVagrant化を進めていて、エンジニアは当然のことデザイナさんでもローカルで開発できるように環境をそろえていた時に苦労したちょっとしたTipsを発表しました。まぁちょっとしたことなのですが、はまると何時間もはまるときあるのでこういう機会があると大変助かります。。。</p>

<script async class="speakerdeck-embed" data-id="dc857f2082a0013107e95ea41e86eac8" data-ratio="1.33333333333333" src="http://nakajijapan.github.io//speakerdeck.com/assets/embed.js"></script>


<p>僕の他にも公開しているメンバーがいるのでご紹介します。
こちらのブログにもリンクがあるので他の人の資料にもたどりつけると思います。</p>

<h3>うづら(udzura)さん</h3>

<p><a href="http://udzura.hatenablog.jp/entry/2014/02/28/140957">http://udzura.hatenablog.jp/entry/2014/02/28/140957</a>
(アフェリエイトおじさんです。。。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【iOS勉強会】ヤフー vs クラスメソッド に参加してきた]]></title>
    <link href="http://nakajijapan.github.io/blog/2014/02/26/yxcm-epilogue/"/>
    <updated>2014-02-26T21:44:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2014/02/26/yxcm-epilogue</id>
    <content type="html"><![CDATA[<p>面白そうな勉強会が開催されると耳にして<a href="http://connpass.com/event/5159/">【iOS勉強会】ヤフー vs クラスメソッド</a> に参加してきました。</p>

<ul>
<li><p>ヤフーさん発表資料
<a href="http://techblog.yahoo.co.jp/ios/yxcm/">http://techblog.yahoo.co.jp/ios/yxcm/</a></p></li>
<li><p>クラスメソッドさん発表資料
<a href="http://dev.classmethod.jp/study_meeting/yxcm-epilogue/">http://dev.classmethod.jp/study_meeting/yxcm-epilogue/</a></p></li>
</ul>


<p>形式的にはYahoo!さんとクラスメソッドさんが交互にiOS開発に関連するテーマに対して発表してどちらグッドだったか競う会になっていました。よかったらその場でボタンを連打して投票する仕組みがあるのですが、リアルタイムにFacebook風ないいねの花火みたいなのでがドーンと別画面で表示されてわかるのはかなり面白かったです（Node.jsかな&hellip;）。</p>

<p>そのなかで便利そうなものをpickupして自分でもやってみました。</p>

<h2>code snippet</h2>

<h3><code>Code Snippet Library</code>を開いた状態にする</h3>

<p><img src="http://nakajijapan.github.io/images/posts/2014-02-28_02.png" alt="01" /></p>

<h3>対象のコードを選択しといてそれLibrary側にドラッグアンドドロップ</h3>

<p><img src="http://nakajijapan.github.io/images/posts/2014-02-28_01.png" alt="01" /></p>

<p>そうすると<code>My Code Snippet</code>が出来上がるのでそれを適当に編集すると終わりです。
作成されたSnippetは<code>/Users/username/Library/Developer/Xcode/UserData/CodeSnippets/</code>いかに保存されます。</p>

<p>試しにUIAlertViewをいれてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alertView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithTitle</span> <span class="o">:</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Title&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                                                    <span class="n">message</span> <span class="o">:</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Message&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                                                   <span class="n">delegate</span> <span class="o">:</span> <span class="n">self</span>
</span><span class='line'>                                          <span class="n">cancelButtonTitle</span> <span class="o">:</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                                          <span class="n">otherButtonTitles</span> <span class="o">:</span> <span class="nb">nil</span>
</span><span class='line'>                          <span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">alertView</span> <span class="nl">setTag:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">alertView</span> <span class="n">show</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Objective-Cって結構冗長になりがちなので、よく利用するものは登録しておくとよさそう。</p>

<h2>code template</h2>

<p>よくファイルを作成するときにはデフォルトでその親クラスに合わせたコードなりヘッダコメントなりテンプレートを作成してくれるのですが、カスタマイズしたくなったときは<code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates</code>にいっぱいテンプレートが用意されています。これを自分のディレクトリにコピーして利用するといいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">mkdir</span> <span class="o">-</span><span class="n">p</span> <span class="o">~/</span><span class="n">Library</span><span class="o">/</span><span class="n">Developer</span><span class="o">/</span><span class="n">Xcode</span><span class="o">/</span><span class="n">Templates</span><span class="o">/</span><span class="n">File</span> <span class="n">Templates</span>
</span><span class='line'><span class="n">cd</span>    <span class="o">~/</span><span class="n">Library</span><span class="o">/</span><span class="n">Developer</span><span class="o">/</span><span class="n">Xcode</span><span class="o">/</span><span class="n">Templates</span><span class="o">/</span><span class="n">File</span> <span class="n">Templates</span>
</span><span class='line'><span class="n">cp</span> <span class="o">/</span><span class="n">Applications</span><span class="o">/</span><span class="n">Xcode</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span><span class="n">Developer</span><span class="o">/</span><span class="n">Platforms</span><span class="o">/</span><span class="n">iPhoneOS</span><span class="p">.</span><span class="n">platform</span><span class="o">/</span><span class="n">Developer</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Xcode</span><span class="o">/</span><span class="n">Templates</span><span class="o">/</span><span class="n">File</span> <span class="n">Templates</span><span class="o">/*</span> <span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>File Templates</code>いかに<code>Cocoa Touch</code>ディレクトリがあるのですが自分がカスタマイズしたものだよとわかるように<code>My Cocoa Touch</code>とか作成してみる。</p>

<p>ファイルを作成するときにオプションで以下のような設定をするとオプションでテンプレートを利用するかしないか決定できるようです。<code>Objective-C class.xctemplate/TemplateInfo.plist</code>ファイルで設定するのですがXML形式なっているのでそこの<code>Options</code>以下に新しい設定を追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">Default</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">false</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">Identifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">Nakajijapan</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">Name</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">Nakajijapan</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">RequiredOptions</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">cocoaTouchSubclass</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">array</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">NSObject</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">UIViewController</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">array</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">Type</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">checkbox</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NSObject/___FILENAME___.h</code>を上書きしてもよいのですが、念のため自分用に作成しておきましょう。<code>NSObjectNakajijapan/___FILENAME___.h</code>な感じで。（suffixは適当です。。。）</p>

<h4>NSObjectNakajijapan/<strong><em>FILENAME</em></strong>.h</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  ___FILENAME___</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by ___FULLUSERNAME___.</span>
</span><span class='line'><span class="c1">//  Copyright ___YEAR___ ___FULLUSERNAME___. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="n">___IMPORTHEADER_cocoaTouchSubclass___</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">___FILEBASENAMEASIDENTIFIER___</span> : <span class="nc">___VARIABLE_cocoaTouchSubclass___</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>NSObjectNakajijapan/<strong><em>FILENAME</em></strong>.m</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  ___FILENAME___</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by ___FULLUSERNAME___.</span>
</span><span class='line'><span class="c1">//  Copyright ___YEAR___ ___FULLUSERNAME___. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;___FILEBASENAME___.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">___FILEBASENAMEASIDENTIFIER___</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">___FILEBASENAMEASIDENTIFIER___</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithNibName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">nibNameOrNil</span> <span class="nf">bundle:</span><span class="p">(</span><span class="n">NSBundle</span> <span class="o">*</span><span class="p">)</span><span class="nv">nibBundleOrNil</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithNibName:</span><span class="n">nibNameOrNil</span> <span class="nl">bundle:</span><span class="n">nibBundleOrNil</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Custom initialization</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Do any additional setup after loading the view.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで自分好みの設定にできました。</p>

<h3>参加してみて</h3>

<p>吉田 一星さんの発表が印象的で</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31669085" width="510" height="420" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/issaymk2/apple-31669085" title="Appleの先を行くポストタッチインターフェース" target="_blank">Appleの先を行くポストタッチインターフェース</a> </strong> from <strong><a href="http://www.slideshare.net/issaymk2" target="_blank">issaymk2</a></strong> </div></p>

<blockquote><p>既存のAPIをそのまま使うアイディアは他の誰かに実現されている
Appleが未だ実現されていない機能を先に作れ</p></blockquote>

<p>あえてブログでも書くようなものじゃなくてごくごく当たり前のことなのですが、これおもろくね？って思ったものはだいたいというかしょっちゅう世の中に出ちゃってるんですよね。その度に落胆しているnakajijapanですが。。。
まぁ、自分もまだAPIを利用してなんとかアプリを作っているレベルなのでドキュメントにものどこにもないような「え、そんなんできんの！！」っていわれるもの作っていきたいですね。もちろん、アプリのアイディアとか企画は別にして。技術的な観点からのはなしでした。まだまだ頑張りまっしゅ。</p>

<p>あと、自分でも使えそうなTipsが、今回のエントリ以外にたくさんあったのでちょこちょこ利用していこうと思います。</p>
]]></content>
  </entry>
  
</feed>
