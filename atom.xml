<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nakajijapan]]></title>
  <link href="http://nakajijapan.github.io/atom.xml" rel="self"/>
  <link href="http://nakajijapan.github.io/"/>
  <updated>2013-06-05T02:52:26+09:00</updated>
  <id>http://nakajijapan.github.io/</id>
  <author>
    <name><![CDATA[nakajijapan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rubyhiroba]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/06/05/rubyhiroba/"/>
    <updated>2013-06-05T00:12:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/06/05/rubyhiroba</id>
    <content type="html"><![CDATA[<iframe src="http://www.slideshare.net/slideshow/embed_code/22314337" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/nakajijapan/2013-lt" title="サービスをRailsにした話" target="_blank">サービスをRailsにした話</a> </strong> from <strong><a href="http://www.slideshare.net/nakajijapan" target="_blank">Daichi Nakajima</a></strong> </div></p>

<p>rubyhirobaでLTに参加してきまして自分のサービスのことについて話してきました。
以前はCGIだったものをせっせせっせとRailsにリニューアルしていっていますよ。という内容です。
やはり５分で話すにはちょっと時間が足りなかったように思います。薄い話になってしまったのが
反省点であります。しかし、今回のリニューアルにはいろいろする理由はあると思うけども（そもそもCGIてどうよてなところから）</p>

<p>perlにしろrubyにしろテストがあるのは大変心強いし、安心します。
たとえ、最新のRailsにのせ変えたとしてもテストがない時点でもう技術的負債。前のコードと何ら変わりはない。
まぁ作成した時点負債は負債なんだけどその劣化速度は抑えられるはず。</p>

<p>まだまだリニューアルは続きますが、引き続きがんばります。</p>

<p>そして裏で支えていただいた@hsbt氏には感謝の意を隠しきれないであります。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/06/03/hello/"/>
    <updated>2013-06-03T10:23:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/06/03/hello</id>
    <content type="html"><![CDATA[<p>こちらでいろいろ記述していくことにしました。</p>

<p>mkdownはなによりたのもしいです。
さよならwordpress&hellip;</p>

<h1>Title</h1>

<h2>Sub</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hoge</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">message</span><span class="p">:</span> <span class="s1">&#39;hello world nakajijapan&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js 読書会01-02]]></title>
    <link href="http://nakajijapan.github.io/blog/2013/05/30/backbone-guidebook01/"/>
    <updated>2013-05-30T00:12:00+09:00</updated>
    <id>http://nakajijapan.github.io/blog/2013/05/30/backbone-guidebook01</id>
    <content type="html"><![CDATA[<p>第１章の続き</p>

<p>Eventsあたりのところから</p>

<blockquote><p>Eventsが提供しているインタフェースはオブザーバパターンを駆使してオブジェクト間の結合を「疎」に保たせている</p></blockquote>

<p>と記述されている。</p>

<h2>オブザーバパターンとは</h2>

<p>購読者と発行者と呼ばれるオブジェクトが存在する。
発行者が購読者のメソッドを直接呼び出す代わりに、購読者は発行者
のイベントを購読する。イベントが発生したらそれを購読している
オブジェクトに通知される。</p>

<p>発行者はだれが購読してるのか知らずに済む。</p>

<p>イベント駆動開発の技法。</p>

<p>詳細はここが分かりやすい。
<a href="http://www.techscore.com/tech/DesignPattern/Observer.html/">http://www.techscore.com/tech/DesignPattern/Observer.html/</a></p>

<h3>Backbone.jsでいう購読者と発行者</h3>

<p>これを以下のようにして考えるとわかりやすい</p>

<ul>
<li>購読者: View</li>
<li>発行者 : Model</li>
</ul>


<p>Modelはだれが購読してるかしらなくていい、イベントを通知してあげればいいんです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># viewの中で
</span><span class='line'>var entry = new Entry();
</span><span class='line'>entry.on('change', this.render());</span></code></pre></td></tr></table></div></figure>


<h2>メディエータパターン</h2>

<blockquote><p>複数オブジェクトの間を取り持つ仲介者と鳴るオブジェクトを用意し、オブジェクト間の連動の詳細をその仲介者に持たせる
個々のオブジェクトの独自性を高める</p></blockquote>

<p>内容は理解できたけど、使いどころまだピンときていない。</p>

<p>ここに詳しく記述されていた。
<a href="http://www.techscore.com/tech/DesignPattern/Mediator.html/">http://www.techscore.com/tech/DesignPattern/Mediator.html/</a></p>

<h2>コラムでのまめ知識</h2>

<p>メモリーリークの問題から<code>on() off()</code>ではなくて <code>listenTo() stopListening()</code>を利用するといい
v1.0からはView#remove()内部でstopListening() ViewではlistenToしてるので大丈夫！</p>

<h2>Underscore.js</h2>

<p>便利関数の紹介だった。</p>

<ul>
<li>_.debounce()

<ul>
<li>一定時間イベントが発生しなかったときに処理を実行する</li>
</ul>
</li>
<li>_.throtte()

<ul>
<li>コールバックの実行頻度をさげる</li>
</ul>
</li>
<li>_.delay()

<ul>
<li>処理を遅らせる</li>
</ul>
</li>
<li>_.defer()

<ul>
<li>コールバック関数の中で最後に実行されることを保証する</li>
</ul>
</li>
</ul>


<p>上記二つの関数は今にも使えそうな便利関数だったので導入していきたいな。</p>

<p><a href="http://underscorejs.org/">http://underscorejs.org/</a></p>

<p>見る限り処理を便利＆スマートにしてくれるのでカジュアルにこれだけ導入でもありかもしれない。</p>

<p>さて来週からは第二章ですよ。</p>
]]></content>
  </entry>
  
</feed>
